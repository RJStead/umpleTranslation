use objectFactory_add_DeclareDefault.ump;
use objectFactory_add_DeclareOneToOne.ump;
use objectFactory_add_methods.ump;

class UmpleToJava {
    objectFactory_add_Declare_All <<!<</*objectFactory_add_Declare_All*/>><<#
  for(UmpleClass uClass : model.getUmpleClasses())
  {
      if (uClass.getIsDistributed()){
      boolean reqSuperCode, reqCommonCode;
      AssociationVariable relatedAssociation;
      Association relatedAssoc;
      boolean isFake=false;
      GeneratedClass gClass = uClass.getGeneratedClass();
      boolean isOneToOne = false;
      Boolean hasBody=false;
      String arguments;
      String caller;
      String argumentscomma;
      String accessibility = "public I"+uClass.getName()+"Impl";
      String accessibilityCreate="public I"+uClass.getName()+"Impl";
      if(model.getDistributePattern()==2)
        accessibility = "public "+uClass.getName();
      if(model.getDistributePattern()==0)
        accessibility = "public void";  
      String webMethod="";
      if(model.getDistributeTechnology().equals("WS"))
        webMethod="@WebMethod"+NL;
      if(uClass.getDistributeTechnology().equals("WS"))
      {  
        if(model.getDistributePattern()==0) 
        {
          accessibilityCreate = "public "+uClass.getName();
        }         
      }

      for (AssociationVariable av : uClass.getAssociationVariables()) 
      {
        relatedAssociation = av.getRelatedAssociation();

        if (av.isOnlyOne() && relatedAssociation.isOnlyOne() && av.getIsNavigable() && relatedAssociation.getIsNavigable())
        {
          isOneToOne = true;
          break;
        }
      }
      caller=gClass.getLookup("constructorSignature_caller");
    #>><<@ UmpleToJava.objectFactory_add_DeclareDefault >><<#
      if (isOneToOne)
      {
      #>>
      <<@ UmpleToJava.objectFactory_add_DeclareOneToOne >>
      <<#
      }
      if (uClass.hasMethods()&&false)
      {
        for (Method aMethod : uClass.getMethods()) 
        {
          if(!aMethod.getExistsInLanguage("Java"))
            continue;
          String methodName = aMethod.getName();
          String methodType = aMethod.getType();
          /*
          user defined constructors
          */
          if(("".equals(methodType))&&(uClass.getName().equals(methodName))&&!aMethod.getModifier().equals("private"))
          {
            StringBuilder parameters = new StringBuilder();
            StringBuilder parametersWithoutTypes = new StringBuilder();
            arguments="";
            
            caller="";
            String paramName="";
            String paramType="";
            String aSingleParameter="";
            String isList="";
            String finalParams = "";        
            String finalParamsWithoutTypes = "";
            if (aMethod.hasMethodParameters())
            { 
              argumentscomma=", ";
              for (MethodParameter aMethodParam : aMethod.getMethodParameters()) 
              {
                paramName = aMethodParam.getName();
                paramType = aMethodParam.getType();
                isList = aMethodParam.getIsList() ? " [] " : " ";
                aSingleParameter = paramType + isList + paramName;
                parameters.append(aSingleParameter + ", ");
                parametersWithoutTypes.append(aMethodParam.getName() + ", ");
              }
              
              arguments = parameters.toString().substring(0, parameters.toString().length()-2);
              caller = parametersWithoutTypes.toString().substring(0, parametersWithoutTypes.toString().length()-2);
            }
            else{
              argumentscomma=""; 
            }
            #>><<@ UmpleToJava.objectFactory_add_methods >><<#
            
          }
        }
      }            
    }    
  }
#>>!>>
}
