class UmpleToJava {
  association_GetMany <<!  /* Code from template association_GetMany */
<</*association_GetMany*/>>  public <<=gen.translate("type",av)>> <<=gen.translate("getMethod",av)>>(int index)
  {
    <<# if (customGetPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customGetPrefixCode,gen.translate("getMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customGetPrefixCode, "    ")); } #>><<# for( TraceItem traceItem : traceItems ) #>><<= 
(traceItem!=null&&traceItem.getIsPre()?"\n"+traceItem.trace(gen, av,"as_g", uClass,gen.translate("associationMany",av)+".get(index)"):"")
>>
    <<=gen.translate("type",av)>> <<=gen.translate("parameterOne",av)>> = <<=gen.translate("associationMany",av)>>.get(index);<<# for( TraceItem traceItem : traceItems ) #>><<= 
(traceItem!=null&&traceItem.getIsPost()?"\n"+traceItem.trace(gen, av,"as_g", uClass,gen.translate("parameterOne",av)):"")
>>
    <<# if (customGetPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customGetPostfixCode,gen.translate("getMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customGetPostfixCode, "    ")); } #>>
    return <<=gen.translate("parameterOne",av)>>;
  }


<<# if (av.numberOfComments() > 0 && av.numberOfRequirements() > 0) { List<Comment> toComment = new ArrayList<Comment>(av.getComments()); toComment.addAll(Requirement.convertToComment(av.getRequirements())); append(realSb, "\n  {0}", Comment.format("Attribute Javadoc", toComment)); } #>><<# if (av.numberOfComments() > 0 && av.numberOfRequirements() == 0) { append(realSb, "\n  {0}", Comment.format("Attribute Javadoc", av.getComments())); } #>><<# if (av.numberOfComments() == 0 && av.numberOfRequirements() > 0) { append(realSb, "\n  {0}", Requirement.format("Attribute Javadoc", av.getRequirements())); } #>><<= umpleSourceFile >>
  public List<<<=gen.translate("type",av)>>> <<=gen.translate("getManyMethod",av)>>()
  {
    <<# if (customGetManyPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customGetManyPrefixCode,gen.translate("getManyMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customGetManyPrefixCode, "    ")); } #>>
    List<<<=gen.translate("type",av)>>> <<=gen.translate("parameterMany",av)>> = Collections.unmodifiableList(<<=gen.translate("associationMany",av)>>);
    <<# if (customGetManyPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customGetManyPostfixCode,gen.translate("getManyMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customGetManyPostfixCode, "    ")); } #>>
    return <<=gen.translate("parameterMany",av)>>;
  }

  public int <<=gen.translate("numberOfMethod",av)>>()
  {
    <<# if (customNumberOfPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customNumberOfPrefixCode,gen.translate("numberOfMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customNumberOfPrefixCode, "    ")); } #>>
    int number = <<=gen.translate("associationMany",av)>>.size();
    <<# if (customNumberOfPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customNumberOfPostfixCode,gen.translate("numberOfMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customNumberOfPostfixCode, "    ")); } #>>
    return number;
  }

  public boolean <<=gen.translate("hasManyMethod",av)>>()
  {
    <<# if (customHasManyPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customHasManyPrefixCode,gen.translate("hasManyMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customHasManyPrefixCode, "    ")); } #>>
    boolean has = <<=gen.translate("associationMany",av)>>.size() > 0;
    <<# if (customHasManyPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customHasManyPostfixCode,gen.translate("hasManyMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customHasManyPostfixCode, "    ")); } #>>
    return has;
  }

  public int <<=gen.translate("indexOfMethod",av)>>(<<=gen.translate("type",av)>> <<=gen.translate("parameterOne",av)>>)
  {
    <<# if (customIndexOfPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customIndexOfPrefixCode,gen.translate("indexOfMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customIndexOfPrefixCode, "    ")); } #>>
    int index = <<=gen.translate("associationMany",av)>>.indexOf(<<=gen.translate("parameterOne",av)>>);
    <<# if (customIndexOfPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customIndexOfPostfixCode,gen.translate("indexOfMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customIndexOfPostfixCode, "    ")); } #>>
    return index;
  }
!>>
}
