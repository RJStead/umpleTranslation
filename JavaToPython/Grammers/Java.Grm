comments
    //
    /*  */
end comments

compounds 
    'self. '== '!=
end compounds 

tokens
    number  "(-\s?)?\d+(.\d+)?"
end tokens

%--------------------%
%     Statements     %
%--------------------%

keys
 return new if else for true false while this super self tuple len True False + - * / ? ; : pass
end keys

define acess_modifier
        'private
    |   'public
    |   'protected
end define

define boolean_operator
        '&&
    |   '|'|
end define

define comparator
        '==
    |   '!=
    |   '>
    |   '<
    |   '>=
    |   '<=
end define

define arithmatic_operator
        '+
    |   '-
    |   '*
    |   '/
    |   '%
end define

define program
    [repeat package_statement]  
    [repeat import_statement]
    [repeat class_declaration]
end define

define package_statement 
    'package [imported]';
end define

define import_statement 
    'import [imported]';
end define



define imported
        [id]
    |   '*
    |   [id]'. [imported]
end define

define nested_class
    [nestable_class] [repeat nested_class_access]
end define

define nested_class_access
    '. [nestable_class]
end define

define nestable_class
    [id]'< [list id] '>
    | [id] 
end define

define arithmatic_expression
       [value_no_recursion] [arithmatic_operator] [arithmatic_expression]
    |   [value_no_recursion]
end define

define nested_identifier
     [nestable_value] [SPOFF] [repeat attribute_access] [SPON]
end define

define attribute_access
       '. [nestable_value] 
end define

define nestable_value 
        [function_call]
    |    [id]
    |   'this
    |   'super
end define

define value_no_recursion 
        [new_call]
    |   '( [value]')
    |   [nested_identifier]
    |   [nested_class] '. [id]
    |   [number]
    |   [stringlit]
    |   'null
    |   'true
    |   'false
    |   [casting]
    |   '! [boolean_expression]
    |   [method_reference]
end define

define method_reference
    [nested_class] ':: [id]
end define

define value
       [value_no_ternary]
    |   [ternary]
end define

define value_no_ternary
        [value_no_recursion]
    |   [boolean_expression]
    |   [arithmatic_expression]
end define

define new_call
    'new [nested_class] '( [list value] ')
end define

define variable_declaration
        [nested_class] [assignment] '; [NL]
    |   [nested_class] [nested_identifier]';
end define

define assignment
        [nested_identifier] '= [value] 
    |    [nested_identifier]'++
    |    [nested_identifier]'--
    |   [nested_identifier] '+= [value]
    |   [nested_identifier] '-= [value]
end define


define stmt_return
        'return [value] '; [NL]
end define

define statement
        [variable_declaration]
    |   [stmt_return]
    |   [conditional_block]
    |   [for_loop]
    |   [for_in_loop]
    |   [while_loop]
    |   [nested_identifier]'; [NL]
    |   [assignment] '; [NL]
    |   [throw_statement]
    |   [switch_case]
end define

define while_loop
    'while( [value] ') [NL] '{ [NL] [IN] [repeat statement] [EX] '} [NL]
end define

define ternary
    [value_no_recursion] '? [value] ': [value]
end define

define for_loop
    'for( [variable_declaration] [value]'; [assignment]') '{ [NL] [IN] [repeat statement] [EX] '} [NL]
end define

define for_in_loop
    'for( [nested_class] [id] ': [nested_identifier]')'{ [NL] [IN] [repeat statement] [EX] '} [NL]
end define

define switch_case
    'switch( [value] ') '{ [repeat switch_case_case] [opt switch_case_default] '}
end define

define switch_case_case
    'case [value] ': [repeat statement] 'break;
end define

define switch_case_default
    'default ': [repeat statement]
end define

define conditional_block
    [if] [repeat else_if] [opt else]
end define

define if 
    'if '( [value] ') '{  [repeat statement]  '}
    | 'if '( [value] ') [statement]
end define

define else_if
    'else 'if '( [value] ') [NL]'{ [NL] [IN] [repeat statement] [EX] '} [NL]
end define

define else
    'else [NL]'{ [NL] [IN] [repeat statement] [EX] '} [NL]
end define

define throw_statement
    'throw 'new [id] '( [stringlit] ');
end define

define casting
    '( [nested_class]') [nested_identifier]
end define

define function_call
        [id][SPOFF] '( [SPON] [list value]')    
end define

define boolean_expression
        [condition] [repeat boolean_continuation]
end define

define boolean_continuation
        [boolean_operator] [condition]
end define

define condition
        [value_no_recursion] [comparator] [value]
    |   [value_no_recursion]
end define

define method_parameter
    [nested_class] [id]
end define

define decorator
    '@ [SPOFF] [id] [SPON] [NL]
end define

define throws
    'throws [list nested_class]
end define

define concrete_method_declaration
        [opt decorator] [acess_modifier] [opt static] [nested_class] [id] '( [list method_parameter] ') [opt throws] [NL] '{ [NL] [IN] [repeat statement] [EX] '} [NL]
end define

define method_declaration
        [concrete_method_declaration]
    |   [abstract_method_declaration]
end define

define abstract_method_declaration
    [acess_modifier] [nested_class] [id] '( [list method_parameter] '); [NL]
end define

define inheritance_statement
        'extends
    |   'implements
end define


%--------------------%
%        Class       %
%--------------------%

define class_declaration
        [concrete_class_declaration]
    |   [interface_declaration]
end define

define concrete_class_declaration
    [acess_modifier] 'class [nested_class] [repeat inheritance_list] [NL] '{ [NL] [IN] [class_body_decl] [EX] '} [NL]
end define

define inheritance_list
    [inheritance_statement] [list nested_class]
end define

define interface_declaration
        [acess_modifier] 'interface [nested_class] [repeat inheritance_list] [NL] '{ [NL] [IN] [class_body_decl] [EX] '} [NL]
end define

define class_type
        'class
    |   'interface
end define

define static
    'static
end define

define volatile
    'volatile
end define

define transient
    'transient
end define

define constructor
    [acess_modifier] [id]'( [list method_parameter] ') [opt throws] [NL] '{ [NL] [IN] [repeat statement] [EX] '} [NL]
end define

define enum_declaration
    [opt acess_modifier] 'enum [id] '{ [list id]'}
end define

define member_variable_declaration
    [opt acess_modifier] [opt transient] [opt static] [opt volatile] [variable_declaration]
end define

define class_body_decl
    [repeat class_body_element]
end define

define class_body_element
        [enum_declaration]
    |   [member_variable_declaration]
    |   [constructor]
    |   [method_declaration]
end define
