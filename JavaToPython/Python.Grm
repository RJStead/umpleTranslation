include "Java.Grm"

%Num of char in a line before TXL splits it in two. Hopefully a temporary solution.
#pragma -width 1073741824


redefine boolean_operator
    ...
    |'and
    | 'or
end redefine

redefine comparator
    ...
    |   'is
    |   'in
end redefine

redefine nestable_value
    ...
    | 'self
    |  [array_access]
end redefine


define array_access
    [id] [SPOFF] '[ [value] '] [SPON]
end define

redefine assignment
    ...
    |   [nested_identifier] '= [value] [NL]
end redefine

redefine statement
    ...
    |  [nested_identifier] [NL]
    | 'pass [NL]
end redefine

redefine stmt_return
    ...
    |   'return [value] [NL]
end redefine


redefine value_no_recursion
    ...
    |   'True
    |   'False
    |   'None
    |   '[ [list value] ']
    |   'not [boolean_expression] 
    |   [lambda_function]
    |   '* [SPOFF] [id] [SPON]
end redefine

define  lambda_function
    'lambda [list id] ': [value]
end define 

define python_function_name
        'tuple
    |   'len
    |   'super
    |   'list
end define

define python_arguments
    [list value]
    | [list value+] ', [list assignment+]
    | [list assignment+]
end define

redefine function_call
    ...
    |   [id] [SPOFF] '( [SPON] [python_arguments]')
    |   [generic_class] [SPOFF] '( [SPON] [python_arguments]')
    |   [python_function_name] [SPOFF] '( [SPON] [python_arguments]')
end redefine


redefine for_loop
    ...
    |'for [nestable_value] 'in 'range( [value] ', [value] ', [value] '): [NL] [IN] [repeat statement] [EX] [NL]
end redefine

redefine for_in_loop
    ...
    | 'for [id] 'in  [nested_identifier] [SPOFF] ': [SPON] [NL] [IN] [repeat statement] [EX] [NL]
end redefine

redefine while_loop
    ...
    | [opt variable_declaration] 'while [value] ': [NL] [IN] [repeat statement] [EX] [NL]
end redefine

redefine if 
    ... 
    |   'if [value] ': [NL] [IN] [repeat statement] [EX] 
end redefine

redefine else_if
    ...
    |   'elif [value] ': [NL] [IN] [repeat statement] [EX] 
end redefine

redefine else
    ...
    |   'else:  [NL] [IN] [repeat statement] [EX] 
end redefine

redefine throw_statement
    ...
    |   'raise 'RuntimeError( [stringlit] ') [NL]
end redefine


redefine method_parameter
    ...
    | [id]
end redefine

redefine ternary
    ...
    |   [value_no_ternary] 'if [value] 'else [value]
end redefine

redefine var_arg
    ...
    | '* [SPOFF] [id] [SPON]
end redefine

redefine concrete_method_declaration
    ...
    |   [opt decorator] 'def  [id] [SPOFF]'( [SPON] [list method_parameter] [SPOFF] '): [SPON] [NL] [IN] [repeat statement] [NL] [EX] [NL]
end redefine

redefine abstract_method_declaration
    ...
    |   [SPOFF] '@abstractmethod [SPON] [NL] 'def  [id] [SPOFF]'( [SPON] [list method_parameter] [SPOFF] '): [SPON] [NL] [IN] [repeat statement] [NL] [EX] [NL]
end redefine


redefine constructor
    ...
    | 'def '__init__ [SPOFF] '( [SPON] [list method_parameter] [SPOFF]'): [SPON] [NL] [IN] [repeat statement] [NL] [EX] [NL]
end redefine

redefine concrete_class_declaration
    ... 
    | [repeat import_statement] [NL] 'class [nested_identifier] [SPOFF] [opt inheritance_group] ': [SPON] [NL] [IN] [class_body_decl] [NL] [EX] [NL]
end redefine

define inheritance_group
    '( [SPON] [list nested_identifier] [SPOFF] ')
end define

redefine interface_declaration
    ... 
    |  [import_statement] [repeat import_statement] [NL] 'class [nested_identifier] [SPOFF] '( [SPON] [list nested_identifier] [SPOFF] '): [SPON] [NL] [IN] [class_body_decl] [NL] [EX] [NL]
end redefine

redefine class_body_decl
    ...
    | 'pass
    | [opt constructor] [repeat method_declaration]
end redefine

redefine variable_declaration
    ...
    |   [assignment] [FL]
    |   [id] [FL]
end redefine

redefine import_statement
    ...
    |   'from [nested_identifier] 'import [list nested_identifier] [NL]
    |   'import [id] [NL]
end redefine 

redefine enum_declaration
    ...
    | 'class [id] [SPOFF] '(Enum'): [SPON][NL] 
        [IN] 'def '_generate_next_value_ [SPOFF] '( [SPON] 'name, 'start, 'count, 'last_values) [SPOFF] ': [SPON] [NL] 
            [IN] 'return 'name [NL] 
        [EX] 'def '__str__ [SPOFF] '(self): [SPON] [NL] 
            [IN] 'return 'str [SPOFF] '(self. 'value) [SPON] [NL] 
        [EX] [repeat enum_value_declaration] [NL]
    [EX]
end redefine

define enum_value_declaration
    [id] '= 'auto [SPOFF] () [SPON] [NL]
end define

redefine switch_case
    ...
    |   'match [value] ': [NL] [IN] [repeat switch_case_case] [opt switch_case_default] [EX]
end redefine

redefine switch_case_case
    ...
    |   'case [value] ': [NL] [IN] [repeat statement] [EX]
end redefine

redefine switch_case_default
    ...
    |   'case 'default ': [NL] [IN] [repeat statement] [EX]
end redefine

redefine statement
    ...
    | [import_statement]
end redefine
