include "Java.Grm"


compounds 
    self.
end compounds 
redefine boolean_operator
    'and
    | 'or
end redefine


redefine variable_name
    ...
    |   'self._ [SPOFF] [id] [SPON]
end redefine
redefine assignment
    ...
    |   [variable_name] '= [value] [NL]
end redefine

redefine value
    ...
    | 'True
    | 'False
end redefine
redefine statement
    ...
    |   [function_call] [NL]
    | 'pass
end redefine

redefine stmt_return
    ...
    |   'return [value] [NL]
end redefine

redefine for_loop
    ...
    |'for( [id] 'in [variable_name] '): [NL] [IN] [repeat statement] [EX] [NL]
end redefine

redefine if 
    ... 
    |   'if [boolean_expression] ': [NL] [IN] [repeat statement] [EX] [NL]
end redefine

redefine else_if
    ...
    |   'elif [boolean_expression] ': [NL] [IN] [repeat statement] [EX] [NL]
end redefine

redefine else
    ...
    |   'else:  [NL] [IN] [repeat statement] [EX] [NL]
end redefine

redefine boolean_expression
    ...
    |   'not [boolean_expression]
end redefine

redefine method_parameter
    ...
    | [id]
end redefine

redefine concrete_method_declaration
    ...
    |   'def  [id] [SPOFF]'(self, [SPON] [list id] [SPOFF] '): [SPON] [NL] [IN] [repeat statement] [NL] [EX] [NL]
    |   'def  [id] [SPOFF]'(self): [SPON] [NL] [IN] [repeat statement] [NL] [EX] [NL]
end redefine

redefine abstract_method_declaration
    ...
    |   [SPOFF] '@abstractmethod [SPON] [NL] 'def  [id] [SPOFF]'(self, [SPON] [list id] [SPOFF] '): [SPON] [NL] [IN] [repeat statement] [NL] [EX] [NL]
    |   [SPOFF] '@abstractmethod [SPON] [NL] 'def  [id] [SPOFF]'(self): [SPON] [NL] [IN] [repeat statement] [NL] [EX] [NL]
end redefine

redefine constructor
    ...
    | 'def '__init__ [SPOFF] '(self, [SPON] [list id] [SPOFF]'): [SPON] [NL] [IN] [repeat statement] [NL] [EX] [NL]
    | 'def '__init__ [SPOFF] '(self): [SPON] [NL] [IN] [repeat statement] [NL] [EX] [NL]
end redefine

redefine concrete_class_declaration
    ... 
    | 'class [id] [SPOFF] ': [SPON] [NL] [IN] [class_body_decl] [NL] [EX] [NL]
    | [repeat import_statement] [NL] 'class [id] [SPOFF] '( [SPON] [list id] [SPOFF] '): [SPON] [NL] [IN] [class_body_decl] [NL] [EX] [NL]
    | [repeat import_statement] [repeat import_statement] [NL] 'class [id] [SPOFF] '( [SPON] [list id] [SPOFF] ', [SPON] [list id ] [SPOFF] '): [SPON] [NL] [IN] [class_body_decl] [NL] [EX] [NL]
end redefine

redefine interface_declaration
    ... 
    | [import_statement] [NL] 'class [id] [SPOFF] '(ABC): [SPON] [NL] [IN] [class_body_decl] [NL] [EX] [NL]
    | [import_statement] [repeat import_statement] [NL] 'class [id] [SPOFF] '(ABC, [SPON] [list id] [SPOFF] '): [SPON] [NL] [IN] [class_body_decl] [NL] [EX] [NL]
end redefine

redefine class_body_decl
    ...
    | 'pass
    | [opt constructor] [repeat method_declaration]
end redefine

redefine variable_declaration
    ...
    |   [assignment] [FL]
    |   [variable_name]
end redefine

redefine function_call
    ...
    |   'self. [SPOFF] [subfunction_call] [SPON]
    |   'super [SPOFF] '(). [subfunction_call] [SPON]
end redefine

redefine subfunction_call
    ...
    |   '[SPOFF] [id] '( [SPON] [list value] [SPOFF] ') [SPON]
end redefine

redefine import_statement
    ...
    |   'from [id] 'import [id] [NL]
    |   'from [id] 'import [list id] [NL]
end redefine