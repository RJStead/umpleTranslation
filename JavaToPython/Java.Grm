comments
    //
    /*  */
end comments

%--------------------%
%     Statements     %
%--------------------%

define acess_modifier
        'private
    |   'public
    |   'protected
end define

define type
        'byte
    |   'short
    |   'int
    |   'long
    |   'float
    |   'double
    |   'char
    |   'String 
    |   'boolean
end define

define boolean_operators
        '&&
    |   '|'|
end define

define comparator
        '==
    |   '!=
    |   '>
    |   '<
    |   '>=
    |   '<=
end define

define arithmatic_operator
        '+
    |   '-
    |   '*
    |   '/
    |   '%
end define

define arithmatic_expression
        '( [arithmatic_expression]')
    |   [arithmatic_expression] [arithmatic_operator] [arithmatic_expression]
    | [value]
end define

define value
        [id]
    |   [number]
    |   [function_call]
    |   [arithmatic_expression]
    |   [boolean_expression]
    |   [stringlit]
end define
define var_decl
        [id] [assignment]
    |   [id] [id]';
end define

define assignment
        [id] '= [value] '; [NL]
end define

define stmt_return
        'return [value] '; [NL]
end define

define statement
        [var_decl]
    |   [stmt_return]
    |   [conditional_block]
    |   [for_loop]
    |   [function_call]'; [NL]
    |   [assignment]
end define

define for_loop
    'for( [id] [id] ': [id] ') [NL] '{ [NL] [IN] [repeat statement] [EX] '} [NL]
end define

define conditional_block
    [if] [repeat else_if] [opt else]
end define

define if 
    'if '( [boolean_expression] ') [NL]'{ [NL] [IN] [repeat statement] [EX] '} [NL]
end define

define else_if
    'else 'if '( [boolean_expression] ') [NL]'{ [NL] [IN] [repeat statement] [EX] '} [NL]
end define

define else
    'else [NL]'{ [NL] [IN] [repeat statement] [EX] '} [NL]
end define

define function_call
        [id]'. [id]'( [repeat function_call_parameter]')
    |   [id]'( [repeat function_call_parameter]')
end define

define function_call_parameter
        [id]
    |   [number]
    |   [function_call]
end define

define boolean_expression
        '( [boolean_expression] ')
    |   [boolean_expression] [boolean_operator] [boolean_expression]
    |   '! [boolean_expression]
    |   [condition]
end define

define condition
        [id] [comparator] [id]
    |   [number] [comparator] [id]
    |   [id] [comparator] [number]
    |   [function_call]
    |   [id]
end define

define statement_or_method
        [statement]
    |   [method_decl]
end define

define method_parameter
    [id] [id]
end define

define method_decl
        [acess_modifier] [id] [id]'( [list method_parameter] ') [NL] '{ [NL] [IN] [repeat statement] [EX] '} [NL]
end define


%--------------------%
%        Class       %
%--------------------%
define class_decl
    [acess_modifier] 'class [id] [NL] '{ [NL] [IN] [class_body_decl] [EX] '} [NL]
   
end define

define constructor
    [acess_modifier] [id]'( [list method_parameter] ') [NL] '{ [NL] [IN] [repeat statement] [EX] '} [NL]
end define

define member_variable_declaration
    [opt acess_modifier] [var_decl]
end define

define class_body_decl
    [repeat member_variable_declaration] [opt constructor] [repeat method_decl]
end define
