class UmpleToJava {
  association_AddManyToOptionalOne_specialization <<!  /* Code from template association_AddManyToOptionalOne_specialization */
<</*association_AddManyToOptionalOne_specialization*/>>  public boolean <<=gen.translate("addMethod",av)>>(<<=gen.translate("type",av)>> <<=gen.translate("parameterOne",av)>>)
  {
    boolean wasAdded = false;
    <<# if (customAddPrefixCode != null) { #>>
    List<<<=gen.translate("type",av)>>> <<=gen.translate("associationMany",av)>> = <<=gen.translate("getManyMethod",av)>>_<<=gen.translate("type",av)>>();
    <<# } #>>
    <<# if (customAddPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customAddPrefixCode,gen.translate("addMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customAddPrefixCode, "    ")); } #>>
    <<=gen.relatedTranslate("type",av)>> <<=gen.relatedTranslate("parameterExisting",av)>> = <<=gen.translate("parameterOne",av)>>.<<=gen.relatedTranslate("getMethod",av)>>_<<# if (relatedAssociation.getMultiplicity().getUpperBound() != 1) { #>><<=gen.relatedTranslate("type",av)>><<# } else { #>>One<<=gen.relatedTranslate("type",av)>><<# } #>>();<<#for( TraceItem traceItemAssocAdd : traceItemAssocAdds )#>><<= 
(traceItemAssocAdd!=null&&traceItemAssocAdd.getIsPre()?"\n"+traceItemAssocAdd.trace(gen, av,"as_a", uClass,gen.translate("numberOfMethod",av)+"()"):"")
>>
    if (<<=gen.relatedTranslate("parameterExisting",av)>> == null)
    {
      <<# if (!relReqSetCode) { #>>
      <<=gen.translate("parameterOne",av)>>.<<=gen.relatedTranslate("setMethod",av)>>(this);
      <<# } else { #>>
      <<=gen.translate("parameterOne",av)>>.clear_<<=gen.relatedTranslate("associationOne",av)>>();
      <<=gen.translate("parameterOne",av)>>.<<=gen.relatedTranslate("addMethod",av)>>(this);
      <<# } #>>
    }
    else if (!this.equals(<<=gen.relatedTranslate("parameterExisting",av)>>))
    {
      <<=gen.relatedTranslate("parameterExisting",av)>>.<<=gen.translate("removeMethod",av)>>(<<=gen.translate("parameterOne",av)>>);
      <<=gen.translate("addMethod",av)>>(<<=gen.translate("parameterOne",av)>>);
    }
    else
    {
      <<=gen.translate("associationMany",av)>>.add(<<=gen.translate("parameterOne",av)>>);
    }<<#for( TraceItem traceItemAssocAdd : traceItemAssocAdds )#>><<= 
(traceItemAssocAdd!=null&&traceItemAssocAdd.getIsPost()?"\n"+traceItemAssocAdd.trace(gen, av,"as_a", uClass,gen.translate("numberOfMethod",av)+"()"):"")
>>
    wasAdded = true;
    <<# if (customAddPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customAddPostfixCode,gen.translate("addMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customAddPostfixCode, "    ")); } #>>
    return wasAdded;
  }

  public boolean <<=gen.translate("removeMethod",av)>>(<<=gen.translate("type",av)>> <<=gen.translate("parameterOne",av)>>)a
  {
    boolean wasRemoved = false;
    <<# if (customRemovePrefixCode != null) { #>>
    List<<<=gen.translate("type",av)>>> <<=gen.translate("associationMany",av)>> = <<=gen.translate("getManyMethod",av)>>_<<=gen.translate("type",av)>>(); <<# } #>>
    <<# if (customRemovePrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customRemovePrefixCode,gen.translate("removeMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customRemovePrefixCode, "    ")); } #>>
    if (<<=gen.translate("getMethod",av)>><<# if (mulChangedToOne) { #>>_One<<=gen.translate("type",av)>><<# } #>>.contains(<<=gen.translate("parameterOne",av)>>))
    {<<#for( TraceItem traceItemAssocRemove : traceItemAssocRemoves )#>><<= 
(traceItemAssocRemove!=null&&traceItemAssocRemove.getIsPre()?"\n"+traceItemAssocRemove.trace(gen, av,"as_r", uClass,gen.translate("numberOfMethod",av)+"()"):"")
>>
      <<=gen.translate("associationMany",av)>>.remove(<<=gen.translate("parameterOne",av)>>);
      <<=gen.translate("parameterOne",av)>>.<<=gen.relatedTranslate("setMethod",av)>>(null);
      wasRemoved = true;<<#for( TraceItem traceItemAssocRemove : traceItemAssocRemoves )#>><<= 
(traceItemAssocRemove!=null&&traceItemAssocRemove.getIsPost()?"\n"+traceItemAssocRemove.trace(gen, av,"as_r", uClass,gen.translate("numberOfMethod",av)+"()"):"")
>>
    }
    <<# if (customRemovePostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customRemovePostfixCode,gen.translate("removeMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customRemovePostfixCode, "    ")); } #>>
    return wasRemoved;
  }
!>>
}
