class UmpleToJava {
    state_machine_SetSimple <<!<</*state_machine_SetSimple*/>><<#
  StringBuilder allExitCases = new StringBuilder();
  StringBuilder allEnterCases = new StringBuilder();
  
  for(State s : sm.getStates())
  {
    boolean hasThisExit = false;
    boolean hasThisEntry = false;
    for (Action action : s.getActions())
    {
      if ("exit".equals(action.getActionType()))
      {
        TraceItem traceItem = s.getTraced("exit",uClass);
        
        if (!hasThisExit)
        {
          allExitCases.append(StringFormatter.format("    if ({0} == {1}.{2} && {3} != {1}.{2} )\n    {"
            , gen.translate("stateMachineOne",sm)
            , gen.translate("type",sm)
            , gen.translate("stateOne",s)
            , gen.translate("parameterOne",sm)
          ));
        }

        hasThisExit = true;

        allExitCases.append(
          traceItem!=null/*&&traceItem.getIsPost()*/?traceItem.trace(gen, s,"sm_e", uClass)+"\n":"");

        allExitCases.append("\n      " + action.getActionCode()); 
      }
      else if("entry".equals(action.getActionType()))
      {
        TraceItem traceItem = s.getTraced("entry",uClass);        
        
        if (!hasThisEntry)
        {
          allEnterCases.append(StringFormatter.format("    if ({0} != {1}.{2} && {3} == {1}.{2} )\n    {"
            , gen.translate("stateMachineOne",sm)
            , gen.translate("type",sm)
            , gen.translate("stateOne",s)
            , gen.translate("parameterOne",sm)
          ));
        }

        hasThisEntry = true;

        allEnterCases.append(
            traceItem!=null/*&&traceItem.getIsPost()*/?traceItem.trace(gen, s,"sm_x", uClass)+"\n":"");

        allEnterCases.append("\n      " + action.getActionCode()); 
      }
    }
    if (s.getHasExitAction()){
     allExitCases.append("\n    }\n");
    }
    if (s.getHasEntryAction()){
     allEnterCases.append("\n    }\n");
    }
  }
  
  String exitCasesOutput = allExitCases.toString().trim();
  String enterCasesOutput = allEnterCases.toString().trim();
#>>
  public boolean <<=gen.translate("setMethod",sm)>>(<<= gen.translate("type",sm) >> <<= gen.translate("parameterOne",sm) >>)
  {
    <<# if (!exitCasesOutput.isEmpty()) { append(realSb, "\n    {0}",exitCasesOutput); } #>>
    <<# if (!enterCasesOutput.isEmpty()) { append(realSb, "\n    {0}",enterCasesOutput); } #>>
    <<= gen.translate("stateMachineOne",sm) >> = <<= gen.translate("parameterOne",sm) >>;
    return true;
  }
!>>
}
