class UmpleToJava {
  association_IsNumberOfValidMethod <<!  /* Code from template association_IsNumberOfValidMethod */
<</*association_IsNumberOfValidMethod*/>>  public boolean <<=gen.translate("isNumberOfValidMethod",av)>>()
  {
    <<# if (customIsNumberOfValidPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customIsNumberOfValidPrefixCode,gen.translate("isNumberOfValidMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customIsNumberOfValidPrefixCode, "    ")); } #>>
<<# if (av.getMultiplicity().isUpperBoundMany()) { #>>
    boolean isValid = <<=gen.translate("numberOfMethod",av)>>() >= <<=gen.translate("minimumNumberOfMethod",av)>>();
<<# } else { #>>
    boolean isValid = <<=gen.translate("numberOfMethod",av)>>() >= <<=gen.translate("minimumNumberOfMethod",av)>>() && <<=gen.translate("numberOfMethod",av)>>() <= <<=gen.translate("maximumNumberOfMethod",av)>>();
<<# } #>>
    <<# if (customIsNumberOfValidPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customIsNumberOfValidPostfixCode,gen.translate("isNumberOfValidMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customIsNumberOfValidPostfixCode, "    ")); } #>>
    return isValid;
  }!>>
}
