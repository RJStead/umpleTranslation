/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This file generates a randomized sequences of events and their resulting states
for every state machine in the model. The results of this sequence is output
in an HTML table.

Command line action for this is
  -g EventSequence

 */
namespace cruise.umple.compiler;

class EventSequenceGenerator
{
  isA CodeGeneratorWithSubptions;
  depend java.io.*;
  depend java.util.*;
  depend cruise.umple.util.*;
  depend cruise.umple.compiler.exceptions.*;

  // Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based
  // off of what's contained in here.
  UmpleModel model = null;
  String output = "";
}

class EventSequencer {
  0..1 -> * StateWrapper possibleStates;
  0..1 -> * Transition possibleTransitions;
  0..1 -> * Event possibleEvents; 
  0..1 -> 0..1 EventSequenceWalkTracker tracker;

  StateMachine sm;
  double randomEventProportion = 0.15;
  Random randomGenerator = new Random();
  int smNumber;
  int nextStateId = 0;

  after constructor 
  {
    tracker = new EventSequenceWalkTracker();
  }

  public StringBuilder generateEventSequence(EventSequenceTemplate templater)
  {
    EventSequenceTable table = new EventSequenceTable(smNumber);
    EventSequenceList list = new EventSequenceList();

    recursivelyAnalyzeStateMachine(sm, table, null);

    // After analysis, set the tracker event limit
    tracker.calculateMaximumEvents();

    // Special case, empty state machine
    if(numberOfPossibleStates() == 0)
    {
      return new StringBuilder(templater.genNoStatesMessage(
        String.valueOf(smNumber)));
    }

    // Special case, state machine without transitions
    if(numberOfPossibleTransitions() == 0)
    {
      return new StringBuilder(templater.genNoTransitionMessage(
        String.valueOf(smNumber)));
    }

    walkThroughStateMachine(table, list);

    StringBuilder output = new StringBuilder();
    output.append(table.output(templater));
    output.append(list.output(templater));
    output.append(templater.genEndMessage(tracker.getFinishReason()));
    return output;
  }

  // Build the data structures the EventSequencer will use to walk the state
  // machine. Also, adds rows the the output table
  private void recursivelyAnalyzeStateMachine(StateMachine currentStateMachine, 
                                              EventSequenceTable table,
                                              StateWrapper parent)
  {
    StateWrapper wrappedState;

    for(State state : currentStateMachine.getStates()) 
    {
      wrappedState = new StateWrapper(state, nextStateId++);
      wrappedState.setParent(parent);

      //Add the state only if it has not been added before
      if(wrapState(state) == null) 
      {
        addPossibleState(wrappedState);
        tracker.addUnvisitedState(wrappedState);
        table.addRow(wrappedState);
        recursivelyAddStateTransitions(wrappedState, wrappedState);
      }
      
      for (StateMachine nestedSm : state.getNestedStateMachines())
      {
        recursivelyAnalyzeStateMachine(nestedSm, table, wrappedState);
      }
    }
  }

  private void recursivelyAddStateTransitions(StateWrapper originalState,
                                              StateWrapper currentState)
  {
    State unwrappedState = currentState.getWrappedState();
    Event event;

    for(Transition trans : unwrappedState.getTransitions())
    {
      event = trans.getEvent();

      // only handle the transition and event if it has not already been dealt
      // with in a sub state
      if(indexOfPossibleTransition(trans) == -1)
      {
        addPossibleTransition(trans);
        tracker.addUnvisitedTransition(trans);
      }

      // add the event to the state's pool of available events
      originalState.addMappedTransistion(event, trans);

      // only add the event to the global list of possible transitions if it
      // doesn't make sense as an event that could happen globally (ie auto
      // and timed transitions).
      // add the event to the global possible list if it isn't already there
      if(event.isAutoTransition() &&
         event.getIsTimer() &&
         indexOfPossibleEvent(event) == -1)
      {
        addPossibleEvent(event);
      }
    }

    if(currentState.hasParent()) 
    {
      recursivelyAddStateTransitions(originalState, currentState.getParent());
    }
  }

  // Does a random walk through the state machine. It will choose events that
  // apply to the current state 1-randomEventProportion, and the rest of the
  // time it will choose a random event from the state machine (which may or 
  // may not apply to the current state). It builds up the EventSequenceTable
  // as it walks. The walk finishes depending on the policy set (visit all
  // states, use all transitions, do X events)
  private void walkThroughStateMachine(EventSequenceTable table,
                                       EventSequenceList list)
  {
    StateWrapper currentState;
    Transition currentTransition;
    Event currentEvent;
    boolean isFinished = false;

    currentState = wrapState(resolveStartState(sm.getStartState()));

    // Add the start state to the output table
    table.addColumn(currentState, "START");

    // Add the start state to the output list
    list.addFirstRow(currentState, "-");

    // Mark the start state as visited
    tracker.removeUnvisitedState(currentState);

    // Begin walking through the state machine
    while(!isFinished)
    {
      currentEvent = nextEvent(currentState);
      currentTransition = currentState.getMappedTransition(currentEvent,
                                                           randomGenerator);

      if(currentTransition != null)
      {
        currentState = wrapState(findNextState(currentTransition));
      }      
      
      // Mark the transition and state as visited
      tracker.markTransitionVisited(currentTransition);
      tracker.markStateVisited(currentState);

      // Add state and event to the outputs
      table.addColumn(currentState, 
                      extractLabel(currentEvent, currentTransition));
      list.addRow(currentState, 
                     extractLabel(currentEvent, currentTransition));

      isFinished = tracker.isWalkFinished(currentState);
    }
  }

  // Decides whether to have the next event be pulled from the global set of
  // events, or only from the events associated with the current state.
  private Event nextEvent(StateWrapper currentState)
  {
    double chance = randomGenerator.nextDouble();
    Event nextEvent;

    // only try to get a random event from the global pool of events if
    // the global event pool isn't empty (which will happen if the only
    // kinds of transitions are auto and timed transitions) 
    if(numberOfPossibleEvents() != 0 && chance <= randomEventProportion )
    {
      nextEvent = getRandomEvent();
    }
    else
    {
      nextEvent = getRandomEvent(currentState); 
    }

    return nextEvent;
  }

  // Retrieves an event randomly from the set of all events present in the
  // state machine.
  private Event getRandomEvent()
  {
    int index = randomGenerator.nextInt(numberOfPossibleEvents());
    return getPossibleEvent(index);
  }

  // Retrieves an event from the set of events that will cause a transition
  // within the current state.
  private Event getRandomEvent(StateWrapper curState)
  {
    Event[] events = curState.getPossibleEvents();
    int index = randomGenerator.nextInt(events.length);
    return events[index];
  }

  // Retrieves a StateWrapper object from the associated StateWrappers based
  // on the state that it is wrapping.
  private StateWrapper wrapState(State state)
  {
    StateWrapper resultWrappedState = null;

    for(StateWrapper sw : getPossibleStates())
    {
      if(sw.getWrappedState() == state)
      {
        resultWrappedState = sw;
        break;
      }
    }

    return resultWrappedState;
  }

  private State findNextState(Transition trans)
  {
    State nextState = trans.getNextState();

    nextState = resolveStartState(nextState);

    return nextState;
  }

  private State resolveStartState(State nextState) 
  {
    while(nextState.hasNestedStateMachines()) 
    {
      for(StateMachine sm : nextState.getNestedStateMachines()) 
      {
        tracker.removeUnvisitedState(wrapState(nextState)); // Superstates are marked as visited
        nextState = sm.getStartState();
      }
    }

    return nextState;
  }

  private String extractLabel(Event event, Transition trans) 
  {
    String eventLabel;
    Guard guard = null;

    if(event.isAutoTransition())
    {
      eventLabel = "(auto)";
    }
    else if(event.getIsTimer())
    {
      eventLabel = "after(" + event.getTimerInSeconds() + ")";
    }
    else
    {
      eventLabel = event.getName();
    }

    if(trans != null)
    {
      guard = trans.getGuard();
    }

    if(guard != null) 
    {
      eventLabel += " [" + extractGuardLabel(guard) + "]";
    }

    return eventLabel;
  }

  private String extractGuardLabel(Guard guard)
  {
    JavaGenerator gen = new JavaGenerator();
    UmpleClass umpClass = sm.getUmpleClass();
  
    gen.setModel(umpClass.getSourceModel());
    return guard.getCondition(gen).replaceAll("\"","&quot;");
  }
}

class EventSequenceWalkTracker
{
  0..1 -> * StateWrapper unvisitedStates;
  0..1 -> * Transition unvisitedTransitions;

  finishReason = "";
  int counter = 0;
  int maxEvents = -1; //set lazily

  public boolean isWalkFinished(StateWrapper currentState) {
    boolean isFinished = false;

    counter++;

    // Hit event counter limit (ensures the walk ends in every case)
    if(counter >= maxEvents)
    {
      isFinished = true;
      setFinishReason("Hit arbitrary counter");
    }

    // Reached end state policy
    if(currentState.isEndState())
    {
      isFinished = true;
      setFinishReason("Reached an end-state");
    }

    // Visit all states policy
    if(numberOfUnvisitedStates() == 0)
    {
      isFinished = true;
      setFinishReason("Visited all states");
    }

    return isFinished;
  }

  public void calculateMaximumEvents() {
    maxEvents = (numberOfUnvisitedStates() + numberOfUnvisitedTransitions());
  }

  public void markTransitionVisited(Transition trans) {
    removeUnvisitedTransition(trans);
  }

  public void markStateVisited(StateWrapper state) {
    removeUnvisitedState(state);
    markSuperStatesAsVisited(state);
  }

  private void markSuperStatesAsVisited(StateWrapper state) {
    while(state != null) {
      removeUnvisitedState(state);
      state = state.getParent();
    }
  }
}

// A simple wrapper over a State machine's states that allows keeping track
// of the parent state of the wrapped state, and all events that will cause
// a transition out of the wrapped state.
class StateWrapper
{
  * -> 0..1 StateWrapper parent;
  0..1 -> * EventWrapper events;

  State wrappedState;
  int stateId;
  
  // If no possible events exist to exit this state, then the wrapped state is
  // an end state.
  public boolean isEndState()
  {
    boolean result = false;
    
    if(numberOfEvents() == 0) 
      result = true;
    
    return result;
  }

  // Adds an event and the transition it maps to for this state to the eventMap
  public void addMappedTransistion(Event event, Transition transition)
  {
    wrapEvent(event).addTransition(transition);
  }

  // Returns one of the transitions caused by this event using the injected
  // Random number generator
  public Transition getMappedTransition(Event event, Random randomGen) 
  {
    EventWrapper wrappedEvent = wrapEvent(event);

    if(isEndState() || wrappedEvent.numberOfTransitions() == 0) 
      return null;

    int index = randomGen.nextInt(wrappedEvent.numberOfTransitions());

    return wrappedEvent.getTransition(index);
  }

  // returns an array of possible events
  public Event[] getPossibleEvents()
  {
    Event[] eventArray = new Event[numberOfEvents()];
    for(int i = 0; i < numberOfEvents(); i++) 
    {
      eventArray[i] = events.get(i).getWrappedEvent();
    }

    return eventArray;
  }

  // Returns the name of this state, accounting for parent states. 
  // The parent state names are added as prefixes, separated by dots.
  public String getDottedName() 
  {
    return recursivelyGetDottedNames(this);
  }

  // Returns the name of this state, accounting for nested depth.
  // For each level of nesting this state is in, a dash is prefixed to the name
  public String getDashedName() 
  {
    String name = "";
    StateWrapper parent = getParent();

    while(parent != null) {
      name += "- ";
      parent = parent.getParent();
    }

    return name + wrappedState.getName();
  }

  // Returns the id value of this states parent, or the empty string, if this 
  // has no parent
  public String getParentId()
  {
    if(parent == null)
    {
      return "";
    }
    else
    {
      return String.valueOf(getParent().getStateId());
    }
  }

  private String recursivelyGetDottedNames(StateWrapper stateWrapper) 
  {
    if(stateWrapper.hasParent()) {
      return stateWrapper.recursivelyGetDottedNames(stateWrapper.getParent()) 
        + "." + stateWrapper.getWrappedState().getName();
    } else {
      return stateWrapper.getWrappedState().getName();
    }
  }

  private EventWrapper wrapEvent(Event unwrapped) 
  {
    for(EventWrapper ev : events) {
      if(ev.getWrappedEvent() == unwrapped) {
        return ev;
      }
    }

    EventWrapper newEv = new EventWrapper(unwrapped);
    events.add(newEv);
    return newEv;
  }
}

// Allows mapping from events to the various transitions. This allows guards to
// effectively be ignored for the purpose of walking randomly through the state
// machine.
class EventWrapper
{
  0..1 -> * Transition;
  Event wrappedEvent;
}

// The grid-type view of the event sequence, with the possible states as rows
// and the sequence of events as columns.
class EventSequenceTable
{
  0..1 -> * StateWrapper headerStates;
  0..1 -> * EventSequenceTableRow;
  0..1 -> 0..1 EventSequenceTableHeaderRow headerRow;

  int gridId;
  int nextEventNumber = 0;

  // Create the header row and blank table cell
  after constructor 
  {
    headerRow = new EventSequenceTableHeaderRow();
  }

  //Adds a column to the table, puts an X in the row with the active state
  public void addColumn(StateWrapper activeState, String triggeringEvent)
  {
    addToHeaderRow(triggeringEvent);
    for(EventSequenceTableRow row : getEventSequenceTableRows())
    {
      row.addCell(activeState.getWrappedState());
    }
  }

  //Adds a row to the table, puts the state name in the first cell of the row
  public void addRow(StateWrapper rowState)
  {
    addHeaderState(rowState);
    addEventSequenceTableRow(new EventSequenceTableRow(rowState));
  }

  // Outputs the entire table
  public StringBuilder output(EventSequenceTemplate templater)
  {
    StringBuilder tableSb = new StringBuilder();
    tableSb.append(templater.genGridHeader());
    tableSb.append(templater.genGridContainer(gridId));

    //Outputting the floating grid header
    tableSb.append(templater.genFloaterHeader());

    tableSb.append(templater.genFloaterRowStart());
    tableSb.append(templater.genFloaterFirstCell(templater.GRID_FLOATER_FIRST,
                                            "States"));
    tableSb.append(templater.genFloaterRowEnd());

    for(StateWrapper state : headerStates)
    {
      tableSb.append(templater.genFloaterRowStart());
      tableSb.append(templater.genFloaterCell(templater.GRID_FLOATER,
                                              state.getParentId(),
                                              state.getDashedName()));
      tableSb.append(templater.genFloaterRowEnd());
    }

    tableSb.append(templater.genFloaterFooter());

    //Outputting the body of the event grid
    tableSb.append(templater.genGridBodyHeader());

    tableSb.append(headerRow.output(templater));

    for(EventSequenceTableRow row : getEventSequenceTableRows())
    {
      tableSb.append(row.output(templater));
    }

    tableSb.append(templater.genGridBodyFooter());
    tableSb.append(templater.genGridContainerFooter());
    tableSb.append(templater.genGridEnd());
    return tableSb;
  }

  private void addToHeaderRow(String eventLabel)
  {
    if(nextEventNumber == 0)
    {
      headerRow.addCell(eventLabel);
    }
    else
    {
      headerRow.addCell(String.valueOf(nextEventNumber) + ". " + eventLabel);
    }
    nextEventNumber++;
  }
}

//Represents the header row of a Event Sequence table.
class EventSequenceTableHeaderRow
{
  0..1 -> * EventSequenceHeaderCell;

  public void addCell(String eventLabel)
  {
    addEventSequenceHeaderCell(new EventSequenceHeaderCell(eventLabel));
  }

  // Outputs the header row
  public StringBuilder output(EventSequenceTemplate templater) 
  {
    StringBuilder rowSb = new StringBuilder();

    rowSb.append(templater.genGridRowStart());

    for(EventSequenceHeaderCell cell : getEventSequenceHeaderCells())
    {
      rowSb.append(cell.output(templater));
    }

    rowSb.append(templater.genGridRowEnd());
    return rowSb;
  }
}

// Represents a row in the Event Sequence table. This has a state name as a row
// label
class EventSequenceTableRow
{
  0..1 -> * EventSequenceCell;

  StateWrapper rowState;
  boolean isHeader = false;

  public void addCell(State activeState)
  {
    if(activeState == rowState.getWrappedState())
    {
      addEventSequenceCell(new EventSequenceCell(false, "X"));
    }
    else
    {
      addEventSequenceCell(new EventSequenceCell(true, ""));
    }
  }

  // Outputs this row
  public StringBuilder output(EventSequenceTemplate templater) 
  {
    StringBuilder rowSb = new StringBuilder();
    boolean isFirst = true;

    rowSb.append(templater.genGridRowStart());

    for(EventSequenceCell cell : getEventSequenceCells())
    {
      if(isFirst)
      {
        rowSb.append(cell.outputFirst(templater, rowState.getParentId()));
        isFirst = false;
      }
      else
      {
        rowSb.append(cell.output(templater));
      }
    }

    rowSb.append(templater.genGridRowEnd());
    return rowSb;
  }
}

// Represents a cell in a row in the first row of a Event Sequence table.
class EventSequenceHeaderCell
{
  label;

  // Outputs this cell
  public String output(EventSequenceTemplate templater)
  {
    String cellContents = templater.genGridHeaderContent(label);

    return templater.genGridCell(templater.TABLE_HEADER, cellContents);
  }
}

// Represents a cell in a row in the Event Sequence table.
class EventSequenceCell
{
  boolean isEmpty;
  label;

  // Outputs this cell
  public String output(EventSequenceTemplate templater)
  {
    return templater.genGridCell(templater.TABLE_CELL, 
                                 generateCellContents(templater));
  }

  // Outputs this cell if it is the first in the row
  public String outputFirst(EventSequenceTemplate templater, String parentId)
  {
    return templater.genFirstGridCell(templater.TABLE_CELL, 
                                      parentId, 
                                      generateCellContents(templater));
  }

  private String generateCellContents(EventSequenceTemplate templater)
  {
    if(isEmpty)
    {
      return "&nbsp;";  
    }
    else
    {
      return label;
    }
  }
}

// This is the list-style view for the event sequence. It has two primary rows.
// The first row is the sequence of events generated, the second row is the 
// the state resulting from that event.
class EventSequenceList
{
  0..1 -> * EventListRow;

  int eventCount = 1;

  public void addFirstRow(StateWrapper resultingState, String triggeringEvent)
  {
    addEventListRow(new EventListRow("", 
      "START", 
      triggeringEvent, 
      resultingState.getDottedName()));
  }

  public void addRow(StateWrapper resultingState, String triggeringEvent)
  {
    addEventListRow(new EventListRow("", 
      String.valueOf(eventCount), 
      triggeringEvent, 
      resultingState.getDottedName()));

    eventCount++;
  }

  public StringBuilder output(EventSequenceTemplate templater)
  {
    StringBuilder outputSb = new StringBuilder();

    outputSb.append(templater.genListStart());

    outputSb.append(new EventListRow(
      templater.TABLE_HEADER, 
      "Event<br>Number",
      "Event",
      "Next State").output(templater));

    for(EventListRow row : eventListRows)
    {
      outputSb.append(row.output(templater));
    }

    outputSb.append(templater.genListEnd());

    return outputSb;
  }
}

// A row in the list-style output
class EventListRow
{
  cellClassName;
  number;
  eventName;
  nextStateName;

  public StringBuilder output(EventSequenceTemplate templater)
  {
    StringBuilder outputSb = new StringBuilder();
    outputSb.append(templater.genListRowStart());

    outputSb.append(templater.genListCell(cellClassName, number));
    outputSb.append(templater.genListCell(cellClassName, eventName));
    outputSb.append(templater.genListCell(cellClassName, nextStateName));
  
    outputSb.append(templater.genListRowEnd());

    return outputSb;
  }
}

class EventSequenceGenerator
{
  EventSequenceTemplate templater = new EventSequenceTemplate();

  // CENTRAL GENERATE METHOD

  public void generate()
  {
    int counter = 0;
    StringBuilder code = new StringBuilder();
    code.append(templater.genTopHeader(
      model.getUmpleFile().getSimpleFileName()));

    // Determine if there are multiple classes with state machines
    // or multiple state machines in any class
    // If so, we will need to put boxes around the state machines
    int smCount = 0;
    for (UmpleClass uClass : model.getUmpleClasses()) 
    {
      for (StateMachine sm : uClass.getStateMachines()) 
      {
        smCount++;
      }
    }

    if(smCount == 0) 
    {
      // Special case. No state machine.

      code.append(templater.genNoSMMessage());

      terminateCode(code);
      return;
    }

    // Message to notify users that the order of events is random
    code.append(templater.genRandomNotification());

    // We now know we have to output one or more state machines
    // Iterate through each class.
    for (UmpleClass uClass : model.getUmpleClasses())
    {
      String className = uClass.getName();

      // Process the top level state machines in a class
      for (StateMachine sm : uClass.getStateMachines())
      {
        code.append(templater.genTableTitleHeader(className, sm.getName()));
        EventSequencer es = new EventSequencer(sm, counter);
        counter++;
        seedRandomFromSuboptions(es);        

        code.append(es.generateEventSequence(templater));

      } // End iteration through state machines of a class
    } // End iteration through classes

    // Add scripts
    code.append(templater.genScripts());

    terminateCode(code);
  }

  private void terminateCode(StringBuilder code)
  {
    model.setCode(code.toString());
    writeModel();
  }

  // Output the html to a file with a .html suffix
  private void writeModel()
  {
    try
    {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + 
        model.getUmpleFile().getSimpleFileName() + ".html";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException(
        "There was a problem with generating Event Sequences." + e, e);
    }
  }

  // Sets a non-random seed for the EventSequencer when the suboption "seed"
  // is used. A second suboption can be passed directly after the "seed" to 
  // specify a specific seed.
  private void seedRandomFromSuboptions(EventSequencer es) {
    if(this.hasSuboption("seed")) {
      int subOptIndex = Arrays.asList(getSuboptions()).indexOf("seed");
      long seed = 0;
      if(subOptIndex + 1 < getSuboptions().length) {
        //Probably a seed number attached to the suboptions
        try {
          seed = Long.parseLong(getSuboptions()[subOptIndex + 1]);
        } catch (NumberFormatException e) {
          System.out.println("Seed value expected as suboption after 'seed'");
        }
      } 

      es.getRandomGenerator().setSeed(seed);
    }
  }
}

// Contains the templates for both the event sequence UI types
class EventSequenceTemplate
{
  // css class constants
  const GRID_FLOATER_FIRST = "row-header first";
  const GRID_FLOATER = "row-header";
  const TABLE_HEADER = "column-header";
  const TABLE_CELL = "content-cell";

  // helper templates
  cr <<!
!>>
  cr2 <<!

!>>
  tab <<!  !>>
  tab2 <<!    !>>
  tab3 <<!      !>>
  tab4 <<!        !>>
  tab5 <<!          !>>
  tab6 <<!            !>>

  ////////////////////////////////////////////////////////////////////////////
  //  General output templates                                              //
  ////////////////////////////////////////////////////////////////////////////
  styleHeader <<!<style>!>>
  styles <<!
  /* Shared Styles */
  .event-sequence-grid, .event-sequence-list 
  { 
    font-family: sans-serif;
  }

  .event-sequence-grid table, table.event-sequence-list
  {
    border-collapse: collapse;
  }

  .event-sequence-list td, .event-sequence-grid td
  { 
    line-height: 1;
    padding: 2px 10px 2px 10px; 
    white-space: nowrap;
    text-align: center; 
  }

  /* Grid-only styles */
  .event-sequence-grid .content-cell {
    border: 1px solid black;
  }

  .event-sequence-grid .row-header {
    text-align: left;
  }

  .event-sequence-grid .column-header > div {
    width: 10px;

    -moz-transform:
      perspective(999px) /* Helps with the font distortion */
      translate(20px, 0px)
      rotate(-45deg);
    -moz-transform-origin: left bottom;
    -ms-transform:
      translate(21px, 0px)
      rotate(-45deg);
    -ms-transform-origin: left bottom;
    -webkit-transform:
      translate(21px, 2px) 
      rotate(-45deg);
    -webkit-transform-origin: left bottom;
    -o-transform:
      translate(21px, 0px)
      rotate(-45deg);
    -o-transform-origin: left bottom;
  }

  .event-sequence-grid .column-header span {
    border-bottom: 1px solid black;
  }

  /* Floating column styles */
  .event-sequence-grid .wrapper {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .event-sequence-grid .floating-col {
    display: inline-block;
    position: absolute;
    overflow: hidden;
    border-right: 1px solid black;
    z-index: 1;
  }

  .event-sequence-grid .inner-wrapper {
    position: relative;
  }

  .event-sequence-grid .hidden-spacer {
    position: relative;
    display: inline-block;
  }

  .event-sequence-grid .table-body {
    overflow-x: scroll;
  }

  .event-sequence-grid .table-body table {
    position: relative;
    display: inline-block;
  }

  .event-sequence-grid .floating-col td {
    background-color: white;
    border: 1px solid black;
  }

  .event-sequence-grid .floating-col td.first {
  }

  /* List-only styles */
  table.event-sequence-list
  {
    margin-top: 20px;
  }

  .event-sequence-list td
  {
    border: 1px solid black;
  }!>> /* END OF CSS TEMPLATE */
  styleFooter <<!</style>!>>

  scriptHeader <<!<script>!>>
  scripts <<!
  function formatEventSequence(wrapper) 
  {
    if(wrapper === undefined || wrapper.innerHTML === "") 
    {
      return;
    }

    // Calculate spacer height due to slanted names
    var longest = 0;
    var last = 0;
    var columnHeaders = wrapper
        .getElementsByClassName("column-header");

    for(var i = 0; i < columnHeaders.length; i++) 
    {
      var innerSpan = columnHeaders[i].firstChild.firstChild;
      if(longest < innerSpan.offsetWidth)
        longest = innerSpan.offsetWidth;

      if(i == columnHeaders.length - 1)
        last = innerSpan.offsetWidth;
    }

    var spacerHeight = longest * Math.cos(45 * (Math.PI / 180));
    var lastLabelWidth = last *  Math.sin(45 * (Math.PI / 180));

    // Get the various elements
    var tableBody = wrapper.getElementsByClassName("table-body")[0];
    var floatingCol = wrapper.getElementsByClassName('floating-col')[0];
    var innerWrapper = wrapper.getElementsByClassName("inner-wrapper")[0];
    var actualTable = innerWrapper.getElementsByTagName('table')[0]

    // give the inner elements the header space for the slanted headers
    tableBody.style.height = tableBody.offsetHeight + spacerHeight +'px';

    // Make the inner wrapper long enough to hold the scrollable contents
    innerWrapper.style.width = floatingCol.offsetWidth 
                             + actualTable.offsetWidth 
                             + lastLabelWidth 
                             + 'px';

    // Move the elements down so the headers show
    actualTable.style.top = spacerHeight + 'px';
    floatingCol.style.top = spacerHeight - 1 + 'px';

    // Move the table body over to accommodate the floating header column
    innerWrapper.getElementsByTagName('table')[0].style.left 
      = floatingCol.offsetWidth - 6 + 'px';
  };

  var wrapperIndex = 0;

  while(true)
  {
    var wrapper = document.getElementById("wrapper" + wrapperIndex);

    if(wrapper === null)
    {
      break;
    }

    wrapperIndex++;
    formatEventSequence(wrapper);
  }!>> /* END OF JAVASCRIPT TEMPLATE */
  scriptFooter <<!</script>!>>

  header <<!<h1>Event sequence generated by Umple from <<=modelName>>.ump</h1>!>>
  tableTitleHeader <<!<h2>Class <<=className>> state machine <<=smName>></h2>!>>
  randomNotificationMessage <<!<p>Note that the sequence of events is randomly generated. Subsequential event generation will likely yield different results.</p>!>>
  noSMMessage <<!<p>No State machines found in this model</p>!>>
  endMessage <<!<p>Event sequence ending reason: <<=reason>></p>!>>
  noStatesMessage <<!<p>No states found in state machine</p>!>>
  noTransitionsMessage <<!<p>No transitions found in state machine</p>!>>

  emit genTopHeader(String modelName)(styleHeader, styles, cr, styleFooter, cr2, header, cr);
  emit genTableTitleHeader(String className, String smName)(cr, tableTitleHeader, cr2);
  emit genScripts()(scriptHeader, scripts, cr, scriptFooter, cr);
  emit genRandomNotification()(randomNotificationMessage, cr2);
  emit genNoSMMessage()(noSMMessage, cr);
  emit genEndMessage(String reason)(endMessage, cr2);


  ////////////////////////////////////////////////////////////////////////////
  //  Table output templates                                                //
  ////////////////////////////////////////////////////////////////////////////
  gridStart         <<!<div class="event-sequence-grid">!>>
  gridWrapper         <<!<div id="wrapper<<=containerId>>" class="wrapper">!>>
  gridFloaterHeader     <<!<div class="floating-col">!>>
  gridBodyHeader        <<!<div class="table-body">!>>
  gridInnerWrapper        <<!<div class="inner-wrapper">!>>
  gridHeaderContents            <<!<div><span><<=content>></span></div>!>>

  tableStart    <<!<table>!>>
  rowStart      <<!<tr>!>>
  cell          <<!<td class="<<=cssClass>>"><<=content>></td>!>>
  firstCell     <<!<td class="<<=cssClass>>" data-parent="<<=parentId>>"><<=content>></td>!>>
  rowEnd        <<!</tr>!>>
  tableFooter   <<!</table>!>>
  divFooter     <<!</div>!>>

  listStart <<!<table class="event-sequence-list">!>>
  
  emit genGridHeader()(gridStart, cr);
  emit genGridContainer(int containerId)(tab, gridWrapper, cr);
  emit genFloaterHeader()(tab2, gridFloaterHeader, cr, tab3, tableStart, cr);
  emit genFloaterRowStart()(tab4, rowStart, cr);
  emit genFloaterFirstCell(String cssClass, String content)(tab5, cell, cr);
  emit genFloaterCell(String cssClass, String parentId, 
                      String content)(tab5, firstCell, cr);
  emit genFloaterRowEnd()(tab4, rowEnd, cr);
  emit genFloaterFooter()(tab3, tableFooter, cr, tab2, divFooter, cr);
  emit genGridBodyHeader()(tab2, gridBodyHeader, cr, tab3, gridInnerWrapper, 
                           cr, tab4, tableStart, cr);
  emit genGridRowStart()(tab5, rowStart, cr);
  emit genGridHeaderContent(String content)(gridHeaderContents);
  emit genFirstGridCell(String cssClass, String parentId, 
                        String content)(tab6, firstCell, cr);
  emit genGridCell(String cssClass, String content)(tab6, cell, cr);
  emit genGridRowEnd()(tab5, rowEnd, cr);
  emit genGridBodyFooter()(tab4, tableFooter, cr, tab3, divFooter, cr, tab2, 
                           divFooter, cr);
  emit genGridContainerFooter()(tab, divFooter, cr);
  emit genGridEnd()(divFooter, cr2);

  emit genListStart()(listStart, cr);
  emit genListRowStart()(tab, rowStart, cr);
  emit genListCell(String cssClass, String content)(tab2, cell, cr);
  emit genListRowEnd()(tab, rowEnd, cr);
  emit genListEnd()(tableFooter, cr2);

  // Special cases for state machines without states or transitions
  emit genNoStatesMessage(String containerId)(gridWrapper, divFooter, 
                                              noStatesMessage, cr2);
  emit genNoTransitionMessage(String containerId)(gridWrapper, divFooter, 
                                                  noTransitionsMessage, cr2);
}