namespace cruise.umple.nusmv;

class NuSMVModule {

    isA MyUtility;
  	identifier;
  	String [] parameters;
  
  	1 -> 1 ModuleBody;
  	comment <<!
-- This defines a NuSMV module for <<=identifier>> --
!>>
	output <<!MODULE <<=getIdentifier()>><<#if(parameters.size() != 0){#>> ( <<=printArray( parameters )>> )<<=moduleBody.toString()>><<#}
else {#>><<=moduleBody.toString()>><<#}#>>!>>
  emit toString()(comment, output);
}

class CounterExampleTable {
	
	//depend cruise.umple.compiler.*;
	isA MyUtility;
	
	//defines associations 
	1 -> 1 ModuleElement requirement;
	1 -> * CounterExampleColumn;
	
	//defines attribute(s)
	String [] rowLabels;
	String sourceMachine; 
	String sourceClass;
	
	public String printRequirement() {
	    //we want to validate that the requirement is in a class of INVARSPEC or CTLSPEC
		if( !(( requirement instanceof InvarConstraint ) || ( requirement instanceof CTLSpecification )) )
			return null;
		return requirement.toString();
	}	
	
	private CounterExampleColumn buildFirstColumn( List<String> rowLabels ) {

		CounterExampleColumn firstColumn = new CounterExampleColumn( 0, "Variables"  );
		List<ColumnEntry> entries = buildColumnEntries( rowLabels );
		for( ColumnEntry entry : entries ) {
			entry.setIsDerived( true );
			firstColumn.addColumnEntry( entry );
		}
	
		ColumnEntry firstEntry = new ColumnEntry("Variables");
		firstEntry.setIsDerived( true );
		firstColumn.addColumnEntryAt( firstEntry, 0 );
		return firstColumn; 
	}
	
	public void setRowLabels( List<String> values ) {
		for( String value : values )
			rowLabels.add( value );
		counterExampleColumns.add( 0, buildFirstColumn( rowLabels ) );
	}
	
	//To facilitate ease of reading, editing the table to eliminate repetitive values are necessary...
	public List<CounterExampleColumn> editColumnContents(){
		
		//There is no need for editing if the number of columns of the table is less than 3 (including the header)
		if( counterExampleColumns.size() < 3 )
			return null;
	
		List<CounterExampleColumn> newColumns = new ArrayList<CounterExampleColumn>();
		List<String> stateValues;
		ColumnEntry myEntry;
		
		int i = 1;
		while ( i < counterExampleColumns.size() ) {
			CounterExampleColumn newColumn = new CounterExampleColumn( i, counterExampleColumns.get( i ).getHeader() );
			stateValues = new ArrayList<String>();
			
			int k = 1;
			while( k < counterExampleColumns.get( i ).getColumnEntries().size() ) {

				ColumnEntry entry = counterExampleColumns.get(i).getColumnEntries().get(k);
				ColumnEntry lowEntry = counterExampleColumns.get(i-1).getColumnEntries().get(k);
				if( entry.getValue().equals( lowEntry.getValue() ) ){
					myEntry = new ColumnEntry(" ");
					stateValues.add( " " );
					myEntry.setIsDerived( entry.getIsDerived() );
					newColumn.addColumnEntry( myEntry );
				}
				else {	
					myEntry = new ColumnEntry( entry.getValue() );
					stateValues.add( entry.getValue() );
					myEntry.setIsDerived( entry.getIsDerived() );
					newColumn.addColumnEntry( myEntry );
				}
				k++;
			}
			newColumn.setStateValues( stateValues );
			newColumns.add( newColumn );
			i++;
		}
		newColumns.add( 0, buildFirstColumn( rowLabels ) );
		return newColumns;
	}
	
	//To facilitate ease of reading, editing the table to eliminate repetitive values are necessary...
	public CounterExampleTable editTable() {
		List<CounterExampleColumn> columns = editColumnContents();
		if( columns == null )
			return this;
		
		CounterExampleTable table = new CounterExampleTable(sourceMachine, sourceClass, requirement);
		for( CounterExampleColumn column : columns )
			table.addCounterExampleColumn( column );
		 
		 //table.setRowLabels( rowLabels );
		 return table;
	}
	
	output <<!
	Source State Machine :: <<=sourceClass>> 
	Requirement Under Verification (RUV) :: <<=printRequirement()>>
	<<#for(CounterExampleColumn col : counterExampleColumns){#>>
       <<=col.printColumnEntries()>><<#}#>>
!>>
   emit toString()(output);
}

trait MyUtility {

  //this method prints elements of the input list in a comma-separated manner
  public String printArray ( List<String> input ) {
		String temp = "";
		int size = input.size();
		if(size > 1) {
  			for(int i = 0; i < size - 1 ; i++)
  				temp += input.get(i) + " , ";
  			temp += input.get(size-1);
  		} 
  	else if( size == 1 ) 
  			temp = input.get(0);
		return temp;
	}
	
	public List<ColumnEntry> buildColumnEntries( List<String> stateValues ) {
	  List<ColumnEntry> entries = new ArrayList<ColumnEntry>();
		for( int i = 0; i < stateValues.size(); i++ ) {
			ColumnEntry entry = new ColumnEntry( stateValues.get(i) );
			entry.setIsDerived( true );
			entries.add( entry );
		}
		return entries;
	}
	
	public List<String> buildStateValuesFromColumnEntries( List<ColumnEntry> entries ){
		
		List<String> stateValues = new ArrayList< String >();
		
		for( ColumnEntry entry : entries )
			stateValues.add( entry.getValue() );
			
		return stateValues;
	}
}

class ColumnEntry {
	depend cruise.umple.compiler.*;
	isA StateTableEntry;
	
	//local variables
	lazy Boolean isDerived;
	value;

	//Output this state cell as html - appears in counterexample table
  	public StringBuilder htmlString() {
    	StringBuilder sb = new StringBuilder();
    	sb.append("<span");
    	if( isDerived ) sb.append(" class=\"derived\"");
    	sb.append(">");
    	sb.append(value);
    	sb.append("</span>");
    	return( sb );
  	}
}

class Range {
	isA Multiplicity;
	
	output <<!<<=getMinimum()>>..<<=getMaximum()>>!>>
  emit toString()(output);
}

class CounterExampleColumn {

    isA MyUtility;
	Integer index;
	1 -> * ColumnEntry;
	String [] stateValues;
	String header;
	
	public String printColumnEntries(){
		String output = "";
		for( ColumnEntry entry : columnEntries )
			output += entry.htmlString();
		return output;
	}
	
	public void setStateValues( List<String> values ) {
		for( String value : values )
			stateValues.add( value );
		columnEntries = buildColumnEntries( stateValues );
		ColumnEntry header = new ColumnEntry( this.header );
		header.setIsDerived( true );
		columnEntries.add(0, header);
	}
	output <<!<<# if( stateValues.size() == 0 && columnEntries.size() != 0 )
		buildStateValuesFromColumnEntries( columnEntries ); #>><<=header>> :: <<=printArray( stateValues )>>!>>
  emit toString()(output);
}

class ModuleBody {

  1 -> 1..* ModuleElement;
	
	//Defines the template for outputting the instance of this class
	output <<!<<#for(ModuleElement me : moduleElements){#>>
<<=me.toString()>><<#}#>>!>>
  emit toString()(output);
}

class ModuleElement {
    lazy header;
}

class VarDeclaration {
  
  isA ModuleElement;
  after constructor { setHeader("VAR"); }
  1 -> 1..* VariableSpecifier;

  comment <<!
   -- This part declares state variables for the given NuSMV module --
!>>
  output <<!   <<=getHeader()>>
    <<#for(VariableSpecifier vs : variableSpecifiers){#>>
     <<=vs.toString()>><<#}#>>!>>
  emit toString()(comment, output);
}

class VariableSpecifier {
  isA MyUtility;
  
  identifier;
  String [] typeSpecifier;
  lazy boolean isBracketed;
  lazy String typeName;
  
  after constructor { isBracketed = false; typeName = ""; }
	
  output <<!
  <<#if(typeSpecifier.size() == 1 && !isBracketed){#>><<=getIdentifier()>> : <<=printArray( typeSpecifier )>>;<<#}
  else if( isBracketed ){#>><<=getIdentifier()>> : <<=getTypeName()>>( <<=printArray( typeSpecifier )>> );<<#}
  else {#>><<=getIdentifier()>> : { <<=printArray( typeSpecifier )>> };<<#}#>>!>>
  emit toString()(output);
}

class IVarDeclaration {
  
  isA ModuleElement;
  after constructor { setHeader("IVAR");}

  1 -> 1..* VariableSpecifier;
  comment <<!
   -- This part declares input variables for the given NuSMV module --
  !>>
  output <<! <<=getHeader()>>
    <<#for(VariableSpecifier vs : variableSpecifiers){#>>
     <<=vs.toString()>>
    <<#}#>>!>>
  emit toString()( comment, output );
}

class DefineDeclaration {
  
  isA ModuleElement;
  after constructor { setHeader("DEFINE");}
  1 -> 1..* DefineBody;
  comment <<!
   -- This part defines macros that summarize the transitions and guards (if any) of the given NuSMV module --
  !>>
  output <<! <<=getHeader()>>
  <<#for(DefineBody db : defineBodies){#>><<=db.toString()>>
  <<#}#>>!>>
  emit toString()(comment, output); 
}

class DefineBody {
  identifier;
  1 -> 1 BasicExpression;
  
  output <<!
     <<=getIdentifier()>> :=<<=basicExpression.toString()>>;!>>
  emit toString()(output);
}

class BasicExpression {
	//Association definition
	0..1 parent -- 0..2 BasicExpression children;
	//Variable Declarations
	identifier;
  	lazy Boolean bracketed;
	lazy Boolean displayNegation;
	operator { AND, OR, XOR, XNOR, IMPLY, IFF, EQ, NE, LT, GT, LE, GE, NULL, NOT, MOD, PLUS, MUL, MINUS, DIV };
  	after constructor { setBracketed(false); }
	after constructor { setDisplayNegation(false); }
    
  public String convertOperator(){
		String op = getOperatorFullName();
		switch( op ){
			case "AND" : 		return " & ";
			case "OR" :      		return " | ";
			case "XOR" :    	return " xor ";
			case "XNOR" : 	return " xnor ";
			case "IMPLY" : 	return " -> ";
			case "IFF" : 			return " <-> ";
			case "EQ" : 			return " = ";
			case "NE" : 			return " != ";
			case "LT" : 			return " < ";
			case "GT" : 			return " > ";
			case "LE" : 			return " <= ";
			case "GE" : 			return " >= ";
            case "MINUS" : 	return " - ";
            case "NOT" : 		return " ! ";
			case "MOD" : return " mod ";
			case "PLUS" : return " + ";
			case "MUL" : return " * ";
			case "DIV" : return " / ";
			
			default : 				return "";
		}
  }
	public String getExpression() {
  		String op = convertOperator();
  		String temp = "";
		if(children.size() == 0)
      		return getIdentifier();
    	if(getChildren().size() == 1)
				if(getBracketed()) {
					temp += "( ";
					temp += getChildren().get(0) == null ? getChildren().get(1).getExpression() : getChildren().get(0).getExpression() + " )";
				}
      			else  
      				temp = getChildren().get(0) == null ? getChildren().get(1).getExpression() : getChildren().get(0).getExpression();
    	else
				if(getBracketed())
					temp = "( "+ getChildren().get(0).getExpression() + op + getChildren().get(1).getExpression()+" )";
      			else 
      				temp = getChildren().get(0).getExpression() + op + getChildren().get(1).getExpression();   	
      	if(getDisplayNegation())
      		return " !"+temp;
      	return temp;
	}	

  //Template for formatting output
  output <<! <<=getExpression()>>!>>
  emit toString()(output);
}

class CTLSpecification {
	isA ModuleElement;
	lazy Boolean displayNegation;
	after constructor { setHeader("CTLSPEC");  displayNegation = false; }
	1 -> 1 CTLExpression;
	
	private String printExpression() {
		if( displayNegation )
			return "! " + cTLExpression.toString();
		return cTLExpression.toString();
	}
  	//Template for formatting output
  	output <<!   <<=getHeader()>>  <<=printExpression()>>!>>
  	emit toString()(output);
}

class InvarExpression {
	isA BasicExpression;
	invarOperator { next };
	lazy Boolean qualified;
	after constructor { setQualified(false); }
	
    public String getExpression() {
  		String op = convertOperator();
  		String temp = "";
		if(getChildren().size() == 0)
      		return getIdentifier();
    	if(getChildren().size() == 1)
				if(getBracketed()) {
					temp += "( ";
					temp += getChildren().get(0) == null ? getChildren().get(1).getExpression() : getChildren().get(0).getExpression() + " )";
				}
      			else  
      				temp = getChildren().get(0) == null ? getChildren().get(1).getExpression() : getChildren().get(0).getExpression();
    	else
				if(getBracketed())
					temp = "( "+ getChildren().get(0).getExpression() + op + getChildren().get(1).getExpression()+" )";
      			else 
      				temp = getChildren().get(0).getExpression() + op + getChildren().get(1).getExpression();   	
      	if(getDisplayNegation())
      		temp = " !"+temp;
      	if( qualified )
      		return getInvarOperatorFullName() + temp;
      	return temp;
	}	
	//Template for formatting output
  output <<! <<=getExpression()>>!>>
  emit toString()(output);
}

class CTLExpression {
	isA BasicExpression;
	ctlOperator { EG, EX, EF, AG, AX, AF, E, A, U };
	lazy Boolean qualified;
	after constructor { setQualified(false); }
	
    public String getExpression() {
  		String op = convertOperator();
  		String temp = "";
		if(getChildren().size() == 0)
      		return getIdentifier();
    	if(getChildren().size() == 1)
				if(getBracketed()) {
					temp += "( ";
					temp += getChildren().get(0) == null ? getChildren().get(1).getExpression() : getChildren().get(0).getExpression() + " )";
				}
      			else  
      				temp = getChildren().get(0) == null ? getChildren().get(1).getExpression() : getChildren().get(0).getExpression();
    	else
				if(getBracketed())
					temp = "( "+ getChildren().get(0).getExpression() + op + getChildren().get(1).getExpression()+" )";
      			else 
      				temp = getChildren().get(0).getExpression() + op + getChildren().get(1).getExpression();   	
      	if(getDisplayNegation())
      		temp = " !"+temp;
      	if( qualified )
      		return getCtlOperatorFullName() + temp;
      	return temp;
	}	
	//Template for formatting output
  output <<! <<=getExpression()>>!>>
  emit toString()(output);
}

class NextExpression {
  isA BasicExpression;
  1 -> 1 BasicExpression;
  
  output <<!next( <<=getIdentifier()>> ) =<<=basicExpression.toString()>>!>>
  emit getExpression()(output);
}

class AssignConstraint {

  isA ModuleElement;
  after constructor { setHeader("ASSIGN"); }

	//Association Definition
  1 -> 1..* Assign; 

	private <E> boolean has( List<E> objectList, E whatToFind ) {
  		boolean yes = false;
  		for(E st : objectList) {
  			if( st.equals(whatToFind) ) {
  				yes = true;
  				break;
  			}
  		}
  		return yes;
	} 

	private String getVarNames(){
		List<String> names = new ArrayList<String>();
		for( Assign assign : assigns ) {
			if(! has( names, assign.getIdentifier()))
				names.add(assign.getIdentifier());
		}		

		if( names.size() == 1)
			return names.get(0);
		String temp = "";
		int i = 0;
		while( i < names.size() - 1 ){
			temp += names.get(i) +", ";
			i++;
		}
		temp += names.get(i);
		return temp;
	}
  comment <<!
   -- This part defines logic for the assignment of values to state variable "<<=getVarNames()>>" of this NuSMV module --
  !>>
  output <<! <<=getHeader()>>
 <<#for(Assign assign : assigns){#>><<=assign.toString()>>
 <<#}#>>!>>
  emit toString()(comment, output);
}

class Assign {
		
  identifier;
  1 -> 1 BasicExpression;
  public String toString() { return null; }
}

class SimpleAssign {
	isA Assign;
  
  //Template for formatting output
  output <<!
    <<=getIdentifier()>> :=<<=getBasicExpression().toString()>>;!>>
  emit toString()(output);
}

class InitAssign {
	isA Assign;

  //Template for formatting output
  output <<!
     init( <<=getIdentifier()>> ) :=<<=getBasicExpression().toString()>>;!>>
  emit toString()(output);
}

class NextAssign {
	isA Assign;
  
  //Template for formatting output
  output <<!
     next( <<=getIdentifier()>> ) :=<<=getBasicExpression().toString()>>;!>>
  emit toString()(output);
}

class CaseExpression {
  isA BasicExpression;
  1 -> 1..* CaseStatement;
  
  output <<! case
  <<#for(CaseStatement stmt : caseStatements){#>><<=stmt.toString()>>
  <<#}#>>
     esac!>>
  emit toString()(output);
}

class CaseStatement {
  1 -> 2 BasicExpression;
  
  //Template for formatting output
  output <<!
      <<=basicExpressions.get(0).toString()>> :<<=basicExpressions.get(1).toString()>>;!>>
  emit toString()(output);
}

class TransConstraint {
  
  isA ModuleElement;
  after constructor { setHeader("TRANS"); setTerminated(false); }

	//Associations with basic expressions
	1 -> 1 BasicExpression;

	lazy Boolean terminated;
    
  //Template for formatting output
  output <<! <<=getHeader()>>
   <<#if(terminated){#>> <<=basicExpression.toString()>>;
  <<#}
   else{#>> <<=basicExpression.toString()>>
  <<#}#>>!>>
  emit toString()(output);
}

class InitConstraint {
  
  isA ModuleElement;
  after constructor { setHeader("INIT"); setTerminated(false); }
	lazy Boolean terminated; 

	//Defines associations with basic expressions
	1 -> 1 BasicExpression;  

	//Template for formatting output
  output <<! <<=getHeader()>>
  <<#if(terminated){#>>  <<=basicExpression.toString()>>;
  <<#}
  else{#>>  <<=basicExpression.toString()>>
  <<#}#>>!>>
  emit toString()(output); 
}

class InvarConstraint {
  
  isA ModuleElement;
  after constructor { setHeader("INVARSPEC"); setTerminated(false); }
  
  //Defines associations with basic expressions
  1 -> 1 InvarExpression;
  lazy Boolean terminated;
  //Template for formatting output
  output <<!   <<=getHeader()>>
  <<#if(terminated){#>>  <<=invarExpression.toString()>>;
  <<#}
  else{#>>  <<=invarExpression.toString()>>
  <<#}#>>!>>
  emit toString()(output); 
}
