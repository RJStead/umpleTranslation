/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This class provides helper methods of trace related code generation.

Please refer to GeneratorHelper_Code.ump for more details.

*/

namespace cruise.umple.compiler;

class GeneratorHelper
{
  
private static void postpareTrace(UmpleModel aModel)
  {}

  // Currently no internal trace entities to remove at the class level
  private static void postpareTrace(UmpleClass aClass)
  {}
  
  //*********************************************** 
  //*******  Methods dealing with different tracers
  //*********************************************** 
  // Process traces based on tracer selected
  // Current Tracers supported ( Console / File / String / Log4j / LTTNG  )
  static private boolean generateConsole = true;
  static private boolean generateFile = true;
  static private boolean generateString = true;
  static private boolean generateLog4j = true ;

  public static boolean getWillGenerateString(){
  	return generateString;
  }
  
  public static  void prepareAllTracers(CodeTranslator t, UmpleModel model, UmpleClass aClass, Map<String,String> templateLookups){
    for(TraceDirective td: aClass.getAllTraceDirectives())
    {
      if(templateLookups.containsKey("dependTracer"))
      {
      	if(td.getTracerType().equals("log4j") || td.getTracerType().equals("javaapi") 
        		|| td.getTracerType().equals("lttngjni") || td.getTracerType().equals("lttng"))
      	{
//          aClass.addDepend(new Depend("org.apache.logging.log4j.LogManager"));
//          aClass.addDepend(new Depend("org.apache.logging.log4j.Logger"));
        }
        else
        {
        	String tracerName = Character.toUpperCase(td.getTracerType().charAt(0)) + td.getTracerType().substring(1);
          aClass.addDepend(new Depend(StringFormatter.format(templateLookups.get("dependTracer"),tracerName)));
        }
      }
      if(templateLookups.containsKey("dependDate"))
      {
        Depend dep = new Depend(templateLookups.get("dependDate"));
        dep.setIsInternal(true);
        aClass.addDepend(dep);
      }
      if ("console".equals(td.getTracerType()))
      {
        if(generateConsole)
        {
          generateConsole=false;
          prepareConsoleTracer(model,templateLookups);
        }
      }
      else if ("file".equals(td.getTracerType()))
      {
        if(generateFile)
        {
          generateFile=false;          
          if(model.getTracer().numberOfTracerArguments()>0)
          {
            templateLookups.put("filename","\""+td.getTracerDirective().getTracerArgument(0).getArgument()+"\"");
          }
          else
          {
            templateLookups.put("filename","\"trace.txt\"");
          }
          prepareFileTracer(model,templateLookups);
        }
      }
      else if ("string".equals(td.getTracerType()))
      {
        if(generateString)
        {
          generateString=false;
          prepareStringTracer(model,templateLookups);
        }
      }
      else if ("log4j".equals(td.getTracerType()))
      {
        generateLog4j=false;
        prepareLog4jTracer(model,templateLookups);
      }
    }
  }
  
  // Add a StringTracer class to support "String" tracing - typically used for testing, this methods 
  // expects the following action semantic lookups
  //  + packageName: What package should this class belong to?
  //  + extraCode: What is the code required to execute the trace 
  public static void prepareStringTracer(UmpleModel model, Map<String,String> lookups)
  {
    UmpleClass aClass = model.addUmpleClass("StringTracer");
    
    if (aClass.numberOfAttributes() == 0)
    {
      aClass.setIsInternal(true);
      aClass.setIsSingleton(true); 
      aClass.setPackageName(lookups.get("packageName"));
      Attribute traces = new Attribute("traces","String",null,"null",false,aClass);
      Attribute startTime = new Attribute("startTime","int",null,lookups.get("startTime"),false,aClass);
      traces.setIsList(true);
      CodeInjection init = new CodeInjection("after","constructor", lookups.get("initial"), aClass);
      init.setIsInternal(true);
      aClass.addCodeInjection(init);
      aClass.appendExtraCode(lookups.get("stringTracer"));
      aClass.appendExtraCode(lookups.get("static"));
    }
    aClass.createGeneratedClass(model);
  }
  public static void prepareConsoleTracer(UmpleModel model, Map<String,String> lookups)
  {
    UmpleClass aClass = model.addUmpleClass("ConsoleTracer");
    
    if (aClass.getExtraCode().equals(""))
    {
      aClass.setIsInternal(true);
      aClass.setIsSingleton(true); 
      aClass.setPackageName(lookups.get("packageName"));
      aClass.appendExtraCode(lookups.get("consoleTracer"));
      aClass.appendExtraCode(lookups.get("static"));
      CodeInjection init = new CodeInjection("after","constructor", lookups.get("initial"), aClass);
      init.setIsInternal(true);
      aClass.addCodeInjection(init);
    }
    aClass.createGeneratedClass(model);
  }
  public static  void prepareFileTracer(UmpleModel model, Map<String,String> lookups){
    UmpleClass aClass = model.addUmpleClass("FileTracer");
    
    if (aClass.getExtraCode()=="")
    {
      aClass.setIsInternal(true);
      aClass.setIsSingleton(true); 
      aClass.addDepend(new Depend("java.io.*"));
      aClass.setPackageName(lookups.get("packageName"));
      
      Attribute filename = new Attribute("filename","String","const",lookups.get("filename"),false,aClass);
      // commented these attributes
      // Umple doesn't support static attributes
      /*
      Attribute output = new Attribute("fout","FileOutputStream","static","null",false,aClass);
      Attribute print = new Attribute("stream","PrintStream","static","null",false,aClass);
      Attribute open = new Attribute("open","boolean","static","false",false,aClass);
       */
      aClass.appendExtraCode("  private static FileOutputStream fout = null;");
      aClass.appendExtraCode("  private static PrintStream stream = null;");
      aClass.appendExtraCode("  private static boolean open = false;");
      aClass.appendExtraCode(lookups.get("fileTracer"));
      aClass.appendExtraCode(lookups.get("static"));
      CodeInjection init = new CodeInjection("after","constructor", lookups.get("initial"), aClass);
      init.setIsInternal(true);
      aClass.addCodeInjection(init);
    }
    aClass.createGeneratedClass(model);
  }
  
  public static  void prepareLog4jTracer(UmpleModel model, Map<String,String> lookups){
  	
  	// Don't generate log4j xml configuration file
  	if(model.getTracer().hasLogConfiguration())
  		if(model.getTracer().getLogConfiguration().getGenerateConfig()==false)
  			return;
  	
    try 
    {
      String path = model.getUmpleFile().getPath();
      String logCode = getLogConfigCode(model,lookups);
      model.setCode(logCode);
      
      String modelFilename = path + File.separator + "log4j2.xml";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(logCode);
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating Log4j2 xml code." + e, e);
    }
  }
  
  public static  String getLogConfigCode(UmpleModel model, Map<String,String> lookups){
    String logCode = null;
    String rootLogger = null;
    String appender = "";
    int monitorInterval = 0;

    if(model.getTracer().hasLogConfiguration()==false)
    {
      logCode = lookups.get("log4jConfigDefault");
    }
    else
    {
      LogConfiguration lc = model.getTracer().getLogConfiguration();
      
      for(LoggerLevelToAppender logApp : lc.getLoggerLevelToAppenders())
      {
        for(Level level : logApp.getLevels())
        {
          for(Appender app : logApp.getAppenders())
          {
            appender += StringFormatter.format(lookups.get("log4jAppender"),app.getAppender(),level.getLevel());
          }
        }
      }
      
      rootLogger = lc.getRootLogger();
      monitorInterval = lc.getMonitorInterval();

      logCode = StringFormatter.format(lookups.get("log4jLogger"),rootLogger,appender);
      logCode = StringFormatter.format(lookups.get("log4jConfig"), logCode);
      
      if(monitorInterval > 0)
      {
        logCode = logCode.replace("<Configuration>", StringFormatter.format("<Configuration monitorInterval=\"{0}\">", monitorInterval));
      }
    }
    return logCode;
  }
  
  // Process output to force consistency 
  // this method deals with what is inside the System.err.println();
  static String prepareConsistentOutput(String[] record, Object... params) 
  {
    String output = StringFormatter.format("\"{0}=\" + {1}",params[0],params[1]);
    int i;
    
    for( i = 2 ; i < params.length ; i += 2 )
    {
      if( ! outputRedundant( i, params[i] , params ) )
        output += StringFormatter.format(" + \",{0}=\" + {1}",params[i],params[i+1]);
    }

    if( record != null )
      for( i = 0 ; i < record.length ; ++i )
      {
        if( record[i] == null )
        {
      
        }
        else
          output += StringFormatter.format(" + \",{0}=\" + {1}",record[i],record[i]);
      }
        
    return output;
  }
  
  // purpose of this method is make sure that output is not redundant
  static boolean outputRedundant( int index, Object target, Object... params)
  {
    boolean flag = false;
    
    for( int i =  0 ; i < index ; i += 2 )
    {
      if( target.equals(params[i]) )
        flag = true;
    }
    
    return flag;
  }
  
  
}

