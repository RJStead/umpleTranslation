namespace cruise.umple.alloy;

class AlloyObject 
{
  
  protected String addStartDottedLine(){
  	return "\n\n------------------------------------------------------------------------------------------------------------------\n\n";
  }
  
  protected String addEndDottedLine()
  {
  	return "\n------------------------------------------------------------------------------------------------------------------\n\n";
  }
}

class Fact 
{
  depend cruise.umple.compiler.*;
  //abstract;
  
  isA AlloyObject; 
  
  protected String factName;
  protected String firstClassName;
  protected String secondClassName;
  protected String rName1;
  protected String rName2;
  
  
  public Fact(Association assoc)
  {
    factName = null;
    firstClassName = assoc.getEnd(0).getClassName();
    secondClassName = assoc.getEnd(1).getClassName();
    if(assoc.getEnd(0).getRoleName().equals("as"))
      rName1 = assoc.getEnd(0).getRoleName()+ "_"; 
    else
      rName1 = assoc.getEnd(0).getRoleName() ;
    if(assoc.getEnd(1).getRoleName().equals("as"))
      rName2 = assoc.getEnd(1).getRoleName()+ "_"; 
    else 
      rName2 = assoc.getEnd(1).getRoleName() ;  
  }
  
  public Fact(UmpleClass uClass)
  {
    factName = "VisualizationFact";
    firstClassName = uClass.getName();
    rName1 = uClass.getAttribute(0).getName();    
  }
  
  protected String suchThatPlusNewLine ()
  {
    return " |\n    ";
  }
  
  protected String factHeader()
  {
    return "fact "+factName+" {\n  ";
  }
  
  protected String makeVarName(String name, Integer num)
  {
    return name.toLowerCase()+"_"+num;
  }
  
  private String declarationEnd(String name)
  {
    return " : "+name;
  }
  
  private String varDec(String cName, Integer num)
  {
  	if(num == 1) return makeVarName(cName,1);
  	return varDec(cName,num-1)+", "+makeVarName(cName,num); 
  }
  
  protected String makeVarDeclaration(String cName, Integer num)
  {
	if(num == 1) return varDec(cName,1)+declarationEnd(cName);	 		
	return varDec(cName,num)+declarationEnd(cName);
  }
  
  private String comment()
  {
  	return "-- Defines a rule that enhances visualizing model with String type\n";
  }
  
  public String print()
  { 
    String me = "null";
    return comment()+ factHeader()+"no "+makeVarDeclaration(firstClassName,1)
      +suchThatPlusNewLine()+varDec(firstClassName,1)+"."+rName1+" = "+'"'+me+'"'+"\n}";
  }
  
}

class NoExtendedFact 
{
  depend cruise.umple.compiler.*; 
  isA Fact;
  
  public NoExtendedFact(Association assoc)
  {
  	super(assoc);
  	factName = "NoExtendedRelation";
  }
  
  private String commentNoExtendedFact()
  {
  	return "\n\n-- Defines no extended relation rule for class "+
  		firstClassName+"\n";
  }
  
  //This method prints no extended relation fact
  private String printNoExtendedRelationFact()
  {
  	return factHeader()+"no disj "+makeVarDeclaration(firstClassName,3)+
  	  suchThatPlusNewLine()+noExtRelContent()+"\n}";
  }
    
  //This method generates content no extended relation
  private String noExtRelContent()
  {
  	return makeVarName(firstClassName,1)+" in "+
  		rName2+"["+makeVarName(firstClassName,2)+"] && "+makeVarName(firstClassName,1)
  		+" in "+rName2+"["+makeVarName(firstClassName,3)+"]";
  }
  public String print()
  {
  	return commentNoExtendedFact()+ printNoExtendedRelationFact();
  }
}


class NoSelfRelationFact 
{
  depend cruise.umple.compiler.*; 
  isA Fact;
  
  public NoSelfRelationFact(Association assoc)
  {
  	super(assoc);
  	factName = "NoSelfRelation";
  }
  
  private String commentNoSelfRelation()
  {
  	return "\n\n-- Defines no self relation rule for class "+
  		firstClassName+"\n";
  }
  
  private String decPart()
  {
  	return "no "+makeVarDeclaration(firstClassName,1);
  }
  
  //This method prints no extended relation fact
  private String printNoSelfRelationFact()
  {
  	return factHeader()+decPart()+suchThatPlusNewLine()+noSelfRelContent()+"\n}";
  }
  
  //This method generates content no extended relation
  private String noSelfRelContent()
  {
  	return makeVarName(firstClassName,1)+" in "+
  		makeVarName(firstClassName,1)+".^"+rName2;
  }
  
  public String print()
  {
  	return commentNoSelfRelation()+printNoSelfRelationFact();
  }
}

class BidirectionFact 
{
  depend cruise.umple.compiler.*; 
  isA Fact;
  
  public BidirectionFact(Association assoc)
  {
  	super(assoc);
  	factName = "BidirectionalityRule";
  }
  
  //This methods comments bidirectionality rule
  private String commentBidirectionality()
  {
  	return "\n\n-- Defines bidirectionality rule between class "+
  		firstClassName+" and class "+secondClassName+"\n";
  }
  
  //This method computes the content of a bidirectionality rule
  private String bidirectionalContent()
  {
  	return makeVarName(firstClassName,1)+" in "+rName1+"["+
  	  makeVarName(secondClassName,1)+"] <=> "+makeVarName(secondClassName,1)+" in "+rName2+
  		"["+makeVarName(firstClassName,1)+"]";
  }
  //This method is responsible for printing bidirectionality fact
  private String printBidirectionFact()
  {
  	return factHeader()+"all "+makeVarDeclaration(firstClassName,1)+", "+
  		makeVarDeclaration(secondClassName,1)+suchThatPlusNewLine() +bidirectionalContent()+"\n}";
  }
  
  public String print()
  {
  	return commentBidirectionality()+printBidirectionFact();
  }
}

class GenHierarchyFact {
  depend cruise.umple.compiler.*;
  isA Fact;
  
  public GenHierarchyFact(Association assoc)
  {
    super(assoc);
    factName = "GenHierarchyFact";
  }
  private String content()
  {
  	return makeVarName(firstClassName,1)+"."+
  	  rName2+" = "+makeVarName(firstClassName,1)+"\n}";
  }
  
  private String declaration()
  {
    return "no "+makeVarDeclaration(firstClassName,1);
  }
  
  //This methods comments non reflexive rule
  private String comment()
  {
  	return "\n\n-- Defines generalization hierarchy rule between class "+
  	  secondClassName+" and "+firstClassName+"\n";
  }
  public String print()
  {
  	return comment()+factHeader()+declaration()+suchThatPlusNewLine()+content();
  }
}

class AssociationFact  {

  depend cruise.umple.compiler.*; 
  isA Fact;
  fMult;
  sMult;
  1 -> 1 Utility utility;
  
  public AssociationFact(Association assoc)
  {
  	super(assoc);
  	factName = "AssociationFact";
  	utility = new Utility();
  	fMult = utility.getAlloyMultiplicity(assoc.getEnd(0));
  	sMult = utility.getAlloyMultiplicity(assoc.getEnd(1));
  	if(assoc.isIsLeftNavigable())
  	{
  	  String temp = fMult;
  	  fMult = sMult;
  	  sMult = fMult;
  	  temp = firstClassName;
      firstClassName = secondClassName;
      secondClassName = temp;
      temp = rName1;
      rName1 = rName2;
      rName2 = temp;
  	}
  }
  
  private String comment()
  {
    return "\n\n-- Defines constraints on association between "+ firstClassName +" and "+secondClassName;
  }
  
  private String getAssociationFact()
  {
  	return "\n"+factHeader() +firstClassName+" <: "+rName2+" in ("+firstClassName+") "+
  	  fMult+" -> "+ sMult + " ("+secondClassName+")\n}";
  }
  
  public String print()
  {
    return comment() + getAssociationFact();
  }
}

class NonReflexiveFact
{
  depend cruise.umple.compiler.*; 
  isA Fact;
  
  public NonReflexiveFact(Association assoc)
  {
  	super(assoc);
  	factName = "NonReflexiveRule";
  }  
  
  private String content()
  {
  	return makeVarName(secondClassName,1)+" in "+
  	  rName2+"["+makeVarName(secondClassName,1)+"]\n}";
  }
  
  //This methods comments non reflexive rule
  private String comment()
  {
  	return "\n\n-- Defines non-reflexive rule for class "+
  	  secondClassName+"\n";
  }
  
  private String declaration()
  {
    return "no "+makeVarDeclaration(secondClassName,1);
  }
  
  public String print()
  {
  	return comment()+factHeader()+declaration()+suchThatPlusNewLine()+content();
  }
} 

class SymmetricFact 
{  
  depend cruise.umple.compiler.*;
  isA Fact;
  
  public SymmetricFact(Association assoc)
  {
    super(assoc);
    factName = "SymmetricRelation";
  }
  
  private String declaration()
  {
    return "all "+makeVarDeclaration(secondClassName,2)+suchThatPlusNewLine();
  }
  
  private String comment()
  {
    return "\n\n-- Defines symmetric rule for class "+
  	  secondClassName+"\n";
  }
  
  private String content()
  {
    return makeVarName(secondClassName,1)+" in "+
  	  rName2+"["+makeVarName(secondClassName,2)+"] <=> "+makeVarName(secondClassName,2)+" in "+
  	  rName2+"["+makeVarName(secondClassName,1)+"]\n}";
  }
  
  public String print()
  {
    return comment()+factHeader()+declaration()+content();
  }
}


class NumericBoundFact 
{
  isA Fact;
  depend cruise.umple.compiler.*;
  
  String className;
  String rName;
  Multiplicity mult;
  Integer index;
  
  after constructor
  {
    factName = "NumericBoundFact";
  }
  
  public NumericBoundFact(Association assoc,int endIndex)
  {
    super(assoc);
    factName = "NumericBoundFact";
    index = endIndex;
    mult = assoc.getEnd(index).getMultiplicity();
    initializeExtraVar();
  }
  
  private void initializeExtraVar()
  {
    if(index == 0)
    {
      className = secondClassName;
      rName = rName1;
    }
    else 
    {
      className = firstClassName;
      rName = rName2;
    }
  }
  
  private Integer analyzeEndMult()
  { 
    int m = mult.getUpperBound(), n = mult.getLowerBound();
    if(m == n && m != 1) return 1;
    if(n == 0 && m != 1 && m != -1) return 3;
    if(m != n && m != -1 && n != -1 && m != 1) return 2; 
    return 0;
  }
  
  private String declaration()
  {
    return "no "+makeVarDeclaration(className,1)+suchThatPlusNewLine();
  }
  
  private String temp()
  {
    return "#"+makeVarName(className,1)+"."+rName;
  }
  
  private String content()
  {
    if(analyzeEndMult() == 1)
      return temp()+" != "+mult.getUpperBound()+"\n}";
    if(analyzeEndMult() == 2)
      return temp()+" < "+mult.getLowerBound()+" || "+
        temp()+" > "+mult.getUpperBound()+"\n}";
    if(analyzeEndMult() == 3)
      return temp()+" > "+mult.getUpperBound()+"\n}";
    return "";
  }
  
  private String comment()
  {
  	return "\n\n-- Defines numeric bound rule for class "+className+"\n";
  }
  
  public String print()
  {
    if(content() != "")
      return comment()+factHeader()+declaration()+content();
    return "";
  } 
}
