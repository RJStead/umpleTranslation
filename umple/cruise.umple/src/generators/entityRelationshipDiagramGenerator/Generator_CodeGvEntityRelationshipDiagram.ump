/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This file generates .gv files for use by Graphviz, representing entity relationship 
diagrams in the Umple model. To generate for this format, use 
  generate GvEntityRelationshipDiagram;
in your umple file, or the command line option
  -g GvEntityRelationshipDiagram

See also GvStateDiagram
 */

namespace cruise.umple.compiler;

class GvEntityRelationshipDiagramGenerator
{
  // Returns what is being generated - called SuperGvGenerator
  protected String generatorType()
  {
    return "erd";
  }

  // Create the association between an entity and its parent 
  // - called VisitClass in SuperGvGenerator
  protected void parentClassAssoc(StringBuilder code, String className, String parentName)
  {
    code.append("\n  \""+className+"IsA\" ["+"shape=triangle, ");
    code.append("label=\"IsA\"];\n");
    code.append("  \""+className+"\" -> \""+className+"IsA\""
        +" [arrowhead=\"none\"];\n");
    code.append("  \""+className+"IsA\" -> \""+parentName+"\""
        +" [arrowhead=\"none\"];\n\n");
  }

  // Create each class (entity) - called VisitClass in SuperGvGenerator
  protected void classCreation(UmpleClass uClass, StringBuilder code)
  {
    String className = uClass.getName();
    String classColor = uClass.getDisplayColor();
    String tooltip; 

    if (!classColor.equals("")) classColor=" style=filled, fillcolor="+classColor+", ";

    if (uClass instanceof AssociationClass) {
      //AssociationClass assocClass = (AssociationClass)uClass;
      code.append("\n  // Relationship w/ Attributes: "+className+"\n");
      code.append("\n  \""+className+"\" ["+"shape=diamond, ");
      code.append("label=\"   "+className+"   \"");
      tooltip = "\"";
    } else {
      // Put together the entity
      code.append("\n  // Class: "+className+"\n");
      code.append("  \""+className+"\" ["+classColor+"shape=rectangle, ");
      // Weak entity needs to have be double-boxed
      if (isWeakEntity(uClass))
        code.append("peripheries=2, ");

      code.append("label=\"   "+className);

      // Terminate outputting the class
      code.append("   \"");
      tooltip = "\"class "+className+"\n";
    }

    // Output the tooltip : Class name followed by any comment
    code.append(",\n   tooltip="+tooltip);
    code.append(appendTooltipComment(uClass.getComments(), false));
    code.append("\"");

    // Terminate the class as a whole
    code.append("];\n");

    attributeCreation(uClass, code);
  }

  // Create each attribute for each class - called by classCreation
  private void attributeCreation(UmpleClass uClass, StringBuilder code)
  {
    String className = uClass.getName();
    String classColor = uClass.getDisplayColor();
    if (!classColor.equals("")) classColor=" fillcolor="+classColor+", ";

    code.append("\n  // Attributes for "+className);
    Key key = uClass.getKey();

    // Iterate through attributes of the class
    if (!hasSuboption("hideattributes")) {
      for (Attribute uAttribute : uClass.getAttributes()) {
        if (!uAttribute.isConstant()) 
        {
          String isList = uAttribute.getIsList() ? "[]" : ""; 
          String type = uAttribute.getType().replace("<","&lt;").replace(">","&gt;");
          String attrName = uAttribute.getName();
          String label = "\"   "+attrName+"\\ :\\ "+type+isList+"   \"";

          if (key.isMember(uAttribute)) label = "<   <u>"+attrName+" : "+type+isList+"</u>   >";

          // Create an oval for each attribute 
          // Name for the attribute node concatenation of attribute + class for uniqueness
          code.append("\n  \""+attrName+className+"\" ["+classColor+"shape=ellipse, ");
          
          // Style changes depending on if attribute is derived, and/or coloured
          boolean isDerived = uAttribute.isIsDerived();
          if (!classColor.equals(""))
          {
            if (isDerived)
              code.append("style=\"dashed, filled\", ");
            else
              code.append("style=filled, ");
          } 
          else if (isDerived)
            code.append("style=dashed, ");

          if (!isList.equals("")) code.append("peripheries=2, ");
          
          // Create the tooltip for each attribute
          StringBuilder tooltip = new StringBuilder();
          tooltip.append(type+isList+" "+uAttribute.getName()+"&#13;");
          tooltip.append(appendTooltipComment(uAttribute.getComments(), true));        

          code.append("label="+label+", tooltip=\""+tooltip+"\"];");
          code.append("\n  \""+className+"\" -> \""+attrName+className+"\" [arrowhead=\"none\"];\n");
        }
      }
    }
  }

  // Create the associations in the ER diagram
  // - called VisitClass in SuperGvGenerator
  protected void associationCreation(UmpleClass uClass, Association uAssoc, StringBuilder associations, String className)
  {
    AssociationEnd leftEnd = uAssoc.getEnd(0);
    AssociationEnd rightEnd = uAssoc.getEnd(1);
    String modifierOne = leftEnd.getModifier();
    String modifierTwo = rightEnd.getModifier();
    String visualLeftEnd, visualRightEnd, toolTip, label, relName;

    // Only output them when visiting one class
    if(leftEnd.getClassName().equals(className)) {
      String[] arrows = retArrows(uAssoc);

      // Get the cardinality of the relationship for both ends
      String leftMult, rightMult;
      if ("symmetricreflexive".equals(modifierOne) && "symmetricreflexive".equals(modifierTwo)) 
      {
        if ("undefined".equals(rightEnd.getDisplayRoleName()))
          leftMult = leftEnd.toSimpleString();
        else
          leftMult = rightEnd.toSimpleString();

        rightMult = leftMult;
      }
      else
      {
        leftMult = leftEnd.toSimpleString();
        rightMult = rightEnd.toSimpleString();
      }

      // If normal class - create a relationships (put into a function?)
      if (!(uClass instanceof AssociationClass)) {
        visualLeftEnd = leftEnd.getDisplayRoleName();
        visualRightEnd = rightEnd.getDisplayRoleName();
        label = visualLeftEnd;

        // Determine how the relation will be labelled
        if (visualLeftEnd.equals("") && !visualRightEnd.equals(""))   
          label = visualRightEnd;
        else if (!visualRightEnd.equals("") && !visualLeftEnd.equals(visualRightEnd)) 
          label = visualLeftEnd+" / "+visualRightEnd;

        AssociationVariable av = uClass.getAssociationVariable(uClass.indexOfAssociation(uAssoc));
        relName = leftEnd.getClassName()+"_"+rightEnd.getClassName();

        // Add Diamond for relationship
        associations.append("  \""+relName+"\" ["+"shape=diamond, ");
        
        // If association to weak entity, double border relationship
        if (uClass.getKey().isMember(av))
          associations.append("peripheries=2, ");

        associations.append("label=\"   "+label+"   \"");

        // Create the tooltip for the relationship
        toolTip = leftEnd.getClassName()+"->"+rightEnd.getClassName();

        // Add the tooltip to the relationship diamond
        associations.append(", tooltip=\""+toolTip+"\"];\n");
          
        // Add the associations connecting the relationship diamond + entities
        associations.append(labelAssociation(leftEnd.getClassName(),
          relName, arrows[0], leftMult, toolTip)+"\n");

        associations.append(labelAssociation(relName,
          rightEnd.getClassName(), arrows[0], rightMult, toolTip)+"\n");
      } else {
        // Add the associations connecting the relationship diamond + entities
        toolTip = rightEnd.getClassName()+"->"+leftEnd.getClassName();

        associations.append(labelAssociation(rightEnd.getClassName(),
          leftEnd.getClassName(), arrows[0], leftMult, toolTip)+"\n");
      }
    }
  }

  // Check whether or not an entity is weak (key is from another entity)
  private boolean isWeakEntity(UmpleClass uClass)
  {
    boolean isWeak = false;

    for(AssociationVariable av : uClass.getAssociationVariables()) {
      if (uClass.getKey().isMember(av))
        isWeak = true;
    }

    return isWeak;
  }
  
  
  //This is used to generate interfaces and their hierarchies.
  //This was implemented for Graphviz but not sure about this generator.
  //TODO This must be investigated.
  protected void createInterfacesAndTheirHirerarchy(UmpleInterface inInterface, StringBuilder code){
  	
  }
}