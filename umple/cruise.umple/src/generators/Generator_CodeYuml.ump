/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

 */

namespace cruise.umple.compiler;

class YumlGenerator
{
  isA CodeGeneratorWithSubptions;
  depend java.util.*;
  depend cruise.umple.util.*;

  // Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based
  // off of what's contained in here.
  UmpleModel model = null;
  String outputPath = "";


  public void generate()
  {
    StringBuilder yuml = new StringBuilder();
    for (UmpleInterface uInterface: model.getUmpleInterfaces()) {
    	yuml.append("[<<");
    	//there is a known bug that yUML interface cannot take attributes
        yuml.append(uInterface.getName());
        yuml.append(">>],");
	}
	
    for (UmpleClass aClass : model.getUmpleClasses())
    {
      yuml.append("[");
      yuml.append(aClass.getName());
      if (aClass.numberOfAttributes() > 0)
      {
        yuml.append("|");
        for (Attribute aVar : aClass.getAttributes())
        {
          String modifier = aVar.getModifier();
          String name = aVar.getName();
          String type = aVar.getType();
          if (modifier.equals("settable"))
        	  name = "+"+name;
          else if (modifier.equals("internal"))
        	  name = "-"+name;
          if (aVar.getType() == null)
            yuml.append(StringFormatter.format("{0};", name, type));  
          else
            yuml.append(StringFormatter.format("{0}:{1};", name, type));  
        }
      }

      Boolean hasNonAutoGeneratedMethods = false;
      for (Method aMethod: aClass.getMethods())
      {
      	if (aMethod.getSource() != Method.Source.fAutoAPI)
      	  hasNonAutoGeneratedMethods = true;
      }

      if (aClass.numberOfMethods() > 0 && hasNonAutoGeneratedMethods)
      {
    	yuml.append("|");
    	for (Method method : aClass.getMethods()) {
    	  if (method.getSource() == Method.Source.fAutoAPI)
    	    continue;
          String methodModifier = method.getModifier();
    	  String methodName = method.getName();
    	  methodName = methodModifier.contains("private")?"-"+methodName:"+"+methodName;
    	  
    	  yuml.append(StringFormatter.format("{0}();", methodName));
    	}
      }
      yuml.append("],");

      if (aClass.getExtendsClass() != null)
      {
        UmpleClass parent = aClass.getExtendsClass();
        yuml.append(StringFormatter.format("[{0}]^-[{1}],",parent.getName(),aClass.getName()));
      }
      for (UmpleInterface uInterface : aClass.getParentInterface()) {
        yuml.append(StringFormatter.format("[<<{0}>>]^-.-[{1}],",uInterface.getName(),aClass.getName()));
      }
    }

    for (Association aAssoc : model.getAssociations())
    {
      if(model.getUmpleTrait(aAssoc.getEnd(0).getClassName()) != null || model.getUmpleTrait(aAssoc.getEnd(1).getClassName())  != null) // to ignore associations involving traits.  
      	{ 
      		continue;
      	}
      
      UmpleClass c1 = model.getUmpleClass(aAssoc.getEnd(0).getClassName());
      UmpleClass c2 = model.getUmpleClass(aAssoc.getEnd(1).getClassName());
      
      String mult1 = aAssoc.getEnd(0).toSimpleString();
      String mult2 = aAssoc.getEnd(1).toSimpleString();
      List<AssociationEnd> assocEnds= aAssoc.getEnds();
      AssociationEnd roleName1= new AssociationEnd(null,null,null,null, null);
      AssociationEnd roleName2= new AssociationEnd(null,null,null,null, null);

      if(!assocEnds.isEmpty())
      {  
        roleName1 = assocEnds.get(0);
        roleName2 = assocEnds.get(1);
      }

      String direction = "-";
      if (aAssoc.getIsLeftNavigable() && !aAssoc.getIsRightNavigable())
      {
        direction = "<-";
      }
      else if (!aAssoc.getIsLeftNavigable() && aAssoc.getIsRightNavigable())
      {
        direction = "->";
      }
      else if (aAssoc.getIsLeftComposition() || aAssoc.getIsRightComposition()){
	direction = "<>";
      }
      yuml.append(StringFormatter.format("[{0}]{5}{2}{4}{6}{3}[{1}],",c1.getName(),c2.getName(),mult1,mult2,direction,roleName1.getRoleName()+" ",roleName2.getRoleName()+" "));
    }

    model.setCode(yuml.toString());
    
    
  }
}
