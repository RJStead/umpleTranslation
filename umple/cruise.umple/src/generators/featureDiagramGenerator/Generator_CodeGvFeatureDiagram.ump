/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This file generates .gv files for use by Graphviz, representing the feature diagram along in the Umple model. To generate for this format, use 
  generate GvFeatureDiagram;
in your umple file, or the command line option
  -g GvFeatureDiagram

*/

namespace cruise.umple.compiler;

class GvFeatureDiagramGenerator {
  depend cruise.umple.compiler.FeatureLink.FeatureConnectingOpType;
  UmpleModel model = null;
  Set<String> featureSet = new HashSet<>();
  FeatureModel featureModel = null;
  // Template for what will appear at the start of each graphviz file
  graphStart(umpleVersion) <<! /*This code was generated using the UMPLE <<=umpleVersion>> modeling language! */
  
digraph FeatureModel { 
  node [shape=rectangle]  
  edge [arrowhead=none] 
!>>

  emit graphStart()(graphStart(UmpleModel.VERSION_NUMBER));
  
  // Template for what is output if there is no feature diagram 
  nofeatureDiagram <<! 
  node [shape=plaintext];
  message [fixedsize=true label ="No require-statement found in the umple file." width=4];
!>>
  emit nofeatureDiagram()(nofeatureDiagram);



  public void generateFeatureNodeShape(FeatureLink featureLink , StringBuilder code)
  {
    FeatureNode featureNode = featureLink.getTargetFeatureNode();
    FeatureNode sourceFeatureNode = featureLink.getSourceFeatureNode();
    int indentLevel = 2;
    appendSpaces(code,indentLevel);
    if(featureNode.getIsLeaf())
    { 
      // link source to leaf node 
        code.append(""+sourceFeatureNode.getUniqueFeatureNodeName()+" -> "+featureNode.getName()+" ");
        code.append(getGvTargetShape(featureLink.getFeatureConnectingOpType(), featureLink.getIsSub() ));
        code.append(" ;"+"\n");    
        fillColorOfFeatureNode(code,featureNode,indentLevel);
    }
    else //if the node is not leaf node 
    {
      if(featureNode.getIsCompoundFeature())
      {
        MultiplicityFeatureConnectingOpType multiplicityFeatureLink = (MultiplicityFeatureConnectingOpType) featureLink;
        int upperBound = multiplicityFeatureLink.getMultiplicity().getUpperBound();
        int lowerBound = multiplicityFeatureLink.getMultiplicity().getLowerBound();        
        String minMax =""+lowerBound+".."+upperBound;
        code.append(sourceFeatureNode.getUniqueFeatureNodeName() +"->"+ featureNode.getUniqueFeatureNodeName() +";\n");
        code.append(featureNode.getUniqueFeatureNodeName() + getGvMultiplicityShape(minMax));
        indentLevel+=2;
        List<FeatureNode> featureNodes = ((CompoundFeatureNode) featureNode).getChildFeatures();
        for(int i=0 ; i < featureNodes.size(); i++){
          FeatureLeaf fLeaf = ((FeatureLeaf)featureNodes.get(i));
          appendSpaces(code,indentLevel);
          code.append(featureNode.getUniqueFeatureNodeName() +" -> "+ fLeaf.getName()+" ;"+"\n");
          fillColorOfFeatureNode(code,fLeaf,indentLevel);
        }
      }
      else{
      code.append(getGvNodeShape(featureLink.getFeatureConnectingOpType(),featureNode.getUniqueFeatureNodeName()));
      appendSpaces(code,indentLevel);
      code.append(""+sourceFeatureNode.getUniqueFeatureNodeName()+" -> "+featureNode.getUniqueFeatureNodeName()+" ;"+"\n");
      }
    }
    
    List<FeatureLink> outgoingLinks = featureNode.getOutgoingFeatureLinks();
    for(int i=0 ; i<outgoingLinks.size(); i++){
      boolean isAdded = featureSet.add(outgoingLinks.get(i).getTargetFeatureNode().getUniqueFeatureNodeName().trim());
      if(!isAdded)
        continue;
      generateFeatureNodeShape(outgoingLinks.get(i),code);
    }
  }

  //This overrides the superclass's method.
  public void generate(){
    StringBuilder code = new StringBuilder();
    featureModel = getModel().getFeatureModel(); 
     // Output basic gv file header
    _graphStart(0,code);
    if(featureModel == null)
    {
      code.append("// Umple code does not have a feature diagram. // \n");
      _nofeatureDiagram(0,code);
    }
    else
    {
    //display the status of the invariant of FM
    code.append(configurationStatus());
    // Iterate through each root feature. 
    for (FeatureNode featureNode : featureModel.getRootFeatures())
    {
      List <FeatureLink> featureNodeOutLinks = featureNode.getOutgoingFeatureLinks();
      for(FeatureLink flink : featureNodeOutLinks)
      {
        code.append("  "+featureNode.getUniqueFeatureNodeName()+" [label=\""+featureNode.getName()+" \" ]; \n");
        generateFeatureNodeShape(flink,code);
      }		    
    }
    }
    terminateCode(code);
  }

  public static String getGvTargetShape(FeatureConnectingOpType featureConnectingOpType , boolean isSub)
  { 
		String shapeProp = " ";
	  if(! isSub)
    shapeProp = " constraint=false ";

    switch(featureConnectingOpType)
    {
      case Exclude:
      return "["+ shapeProp +" arrowhead=normal color=red label=exclude " +" ]";
      case Mandatory:
      shapeProp += " arrowhead=dot ";
      return "["+ shapeProp +" ]";
      case Include:
      shapeProp += " arrowhead=normal label=include color=blue ";
      return "["+ shapeProp +" ]";
      case Optional:
      return "[arrowhead=odot "+shapeProp+" ]";
      case Conjunctive:
      return "[arrowhead=dot "+shapeProp+" ]";
      default:
      return "[ "+shapeProp+" ]";
    }
  }

  public static String getGvMultiplicityShape(String minMax)
  {
    return "[label=\""+minMax + "\"]"+ ";"+"\n";
  }
  public static String getGvNodeShape(FeatureConnectingOpType featureConnectingOpType , String nodeName)
  { 
    String end = ";"+"\n";
    switch(featureConnectingOpType)
    {
      case Conjunctive:
      return nodeName+" [label=\" and \" ] "+end;
      case XOR:
      return nodeName+" [label=\"\" shape=triangle fixedsize=true  color=black width=.3 height=0.3 margin=0 ] "+end;
      case Disjunctive:
      return nodeName+" [label=\"\" shape=triangle fixedsize=true style=filled color=black width=.3 height=0.3 margin=0 ]"+end;
      case Multiplicity: // nothing to add here. It will be handled in getGvMultiplicityShape(...)
      return "\n";
      default:
      return nodeName +end;
    }
  }

  //This method fills the background color of a featureLeaf if it is used.
  public void fillColorOfFeatureNode(StringBuilder code, FeatureNode featureNode, int indentLevel)
  {
    if(featureNode.getIsLeaf())
    {
      boolean shouldColor = featureModel.isUsedFeatureLeaf((FeatureLeaf)featureNode);
      if(shouldColor)
      { 
        appendSpaces(code,indentLevel);
        code.append(featureNode.getName()+" [style=filled fillcolor=\"chartreuse\"]" + "; \n"); 
      }
    }
  }

  public String configurationStatus()
  {
    String result = "  InvariantstatusNode[label=\"  Configuration Status:\" shape=plaintext] \n";
    if(featureModel.satisfyFeatureModel())
    {
      result = result + "  validStatus[label=\"Valid\" shape=plaintext fontcolor=blue];\n";
    }
    else 
    result = result + "  validStatus[label=\"Not Valid  \" shape=plaintext fontcolor=red];\n";

    return result;
  }

  protected void terminateCode(StringBuilder code){ 
    code.append("\n"+"}"+"\n");
    model.setCode(code.toString());
    writeModel();
  }

  protected String generatorType() { 
    return "GvFeatureDiagram";
  }
  // copied from "Generator_SuperGvGenerator.ump"
  private void appendSpaces(StringBuilder code, int numSpaces) 
  {
    for(int i=0; i<numSpaces; i++) 
    {
      code.append(" ");
    }
  }

  /**
   * Output the graphviz file to a file with the .gv suffix
   */
  // copied from "Generator_SuperGvGenerator.ump"
   protected void writeModel(){
    try
    {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName()
          + generatorType() + ".gv";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating GraphViz feature model code." + e, e);
    }
  }

}
