/*******************************************************************************
* Copyright (c) 2013 Ahmed M.Orabi, Mahmoud M.Orabi.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     Ahmed M.Orabi
*     Mahmoud M.Orabi
*
* Please refer to the code authors before making any changes. 
* For any code reuse or copy, contact the authors and it is a MUST 
* to refer author names.
*
* @author -Ahmed M.Orabi {@link ahmedvc@hotmail.com}
* @author Mahmoud M.Orabi {@link mahmoud_3rabi@hotmail.com}
*******************************************************************************/
namespace cruise.umple.compiler;

/*A root class elemnt. It is used to backtrack the parent package when walking through
 * an elemnt (@see IWalker, UmpleModelVisitor)
 */
class Package{
	String packageName;
}

/*It is used to track user code when processing objects information */
class UserCode {
	String userCode;
}

/* 
* A pattern object is used to persist Patentable information for a class elemnt such as
* abstract, delegate, immutable, etc. 
*/
class ClassPattern {
	UmpleClass classPattern;
	String pattern;
}



/*Used to persist hirarchy information for given elemnts (owner, and children) */
class Hierarchy {
	UmpleClassifier element;
	* -> 0..1 UmpleClass parentClass;
  	* -> 0..* UmpleInterface parentInterfaces;
}

/* It is designed to visit different types of umple elemnts so it can process and understand
 * the defined walkers (@see IWalker). Any umple IWalker can use this visitor in order to ensure 
 * that the given visitor will be able to interact with the contents in temrs of being Umple-related
 */
class UmpleModelVisitor {
	void visit(UmpleModel umpleModel) {}
	
	// Comment
	void visit(Comment comment) {}
	// Requirement
	void visit(Requirement req) {}
	
	// Umple Classifiers
	void visit(UmpleElement umpleElement) {}
	void visit(UmpleClassifier umpleClassifier) {}
	void visit(UmpleClass umpleClass) {}
	void visit(UmpleInterface umpleInterface) {}
	
	// Dependency
	void visit(Depend dependE) {}
	void visit(Package pkg) {}
	void visit(ClassPattern ptrn) {}
	void visit(Hierarchy hier) {}
	
	// Attributes
	void visit(Constant cnst) {}
	void visit(Attribute attribute) {}
	void visit(Key keyO) {}
	void visit(ConstraintVariable cnstVar) {}
	void visit(UmpleVariable var) {}
	void visit(UniqueIdentifier uid) {}
	
	// Methods
	void visit(Method method) {}
	void visit(MethodParameter param) {}
	void visit(MethodBody methodBody) {}
	
	// Logical
	void visit(Condition cond) {} 
	void visit(Precondition pre) {}
	void visit(ConstraintTree constraint) {}
	
	// Aspect
	void visit(CodeInjection codeInjection) {}
	
	// Association
	void visit(Association associationE) {}
	void visit(AssociationClass associationC) {}
	void visit(AssociationEnd associationE) {}
	void visit(AssociationVariable var) {}
	
	// Statemachine
	void visit(StateMachine sm) {}
	void visit(State state) {}
	void visit(Guard guard) {}
	void visit(Action action) {}
	void visit(Event event) {}
	void visit(Transition transition) {}
	void visit(Activity activity) {}
	
	// Trace
	void visit(TracerDirective tracer) {}
	void visit(TraceDirective traceDirective) {}
	void visit(TraceItem traceItem) {}
	void visit(TraceRecord traceRecord) {}
	void visit(AttributeTraceItem attributeT) {}
	void visit(TraceCase traceCase) {}
	void visit(TraceCondition traceCondition) {}
	void visit(MethodTraceItem methodTraceEntity) {}
	void visit(StateMachineTraceItem stateMachineTraceItem) {}
	
	
	// User Code
	void visit(CodeBlock block) {}
	void visit(UserCode userCode) {}
	
	// Visitor Events
	void done() {}
}

/*
 * User can define their own walker that receives an UmpleModelVisitor to visit a given element contents
 */
interface IWalker {
    void accept(UmpleModelVisitor visitor);
}

/*
 * A generic walker that is designed to parse different types of umple elements. It receives
 * an umple model, and recrusively walks through different contained nodes. 
 */
class UmpleModelWalker {
	depend java.util.List;
	isA IWalker;
	UmpleModel model;
    void accept(UmpleModelVisitor visitor) {
    	List<UmpleElement> umpleElements = model.getUmpleElements();
		
		for(UmpleElement element: umpleElements){
			visitor.visit(element);			
			String extraCode = element.getExtraCode();
			if(extraCode!= null&& !extraCode.isEmpty()){
				visitor.visit(new UserCode(extraCode)); 
			}
			
			if(element instanceof UmpleClassifier){
				UmpleClassifier classifier= (UmpleClassifier) element;
				visitor.visit(classifier);
				
				if(element.getPackageName() != null){
					visitor.visit(new Package(element.getPackageName()));
				}
				for(Depend dep : classifier.getDepends()) {
					visitor.visit(dep);
				}
				for(Method mth : classifier.getMethods()) {
					visitor.visit(mth); // isImplemented
					for(MethodParameter param : mth.getMethodParameters()) {
						visitor.visit(param);
					}
					MethodBody mthBody = mth.getMethodBody();
					visitor.visit(mthBody);					
					visitor.visit(new UserCode(mthBody.getExtraCode()));
					
					for(Comment cmt : mth.getComments()) {
						visitor.visit(cmt);
					}
					for(Requirement r : mth.getRequirements()) {
						visitor.visit(r);
					}
				}
				for(Constant cnst : classifier.getConstants()) {
					visitor.visit(cnst);
				}
				
				if(element instanceof UmpleInterface){
					UmpleInterface uInterface= (UmpleInterface) element;
					visitor.visit(uInterface);
					
					if(uInterface.getExtendsInterface().size() > 0) {
						Hierarchy hier = new Hierarchy(uInterface);
						hier.setParentClass(null);
						for(UmpleInterface uin : uInterface.getExtendsInterface()) {
							hier.addParentInterface(uin);							
						}	
						visitor.visit(hier);					
					}
				}
				if(element instanceof UmpleClass){
					UmpleClass clazz= (UmpleClass) element;
					if(element instanceof AssociationClass){
						visitor.visit((AssociationClass)element);
					} else {
						visitor.visit(clazz);
					}
					
					for(Comment cmt : clazz.getComments()) {
						visitor.visit(cmt);
					}
					for(Requirement r : clazz.getRequirements()) {
						visitor.visit(r);
					}
					
					if(clazz.getParentInterface().size() > 0 || clazz.getExtendsClass() != null) {
						Hierarchy hier = new Hierarchy(clazz);
						hier.setParentClass(clazz.getExtendsClass());
						for(UmpleInterface uin : clazz.getParentInterface()) {
							hier.addParentInterface(uin);							
						}	
						visitor.visit(hier);					
					}
					
					if(clazz.isImmutable() ) {
						visitor.visit(new ClassPattern(clazz,"Immutable"));
					}
					if(clazz.isIsAbstract() ) {
						visitor.visit(new ClassPattern(clazz,"Abstract"));
					}
					if(clazz.isIsInternal() ) {
						visitor.visit(new ClassPattern(clazz,"Internal"));
					}
					if(clazz.isIsSingleton() ) {
						visitor.visit(new ClassPattern(clazz,"Singleton"));
					}
					
					Key key = clazz.getKey();
					if(key!= null&& key.getMembers().length>0){
						visitor.visit(key);
					}
					
					for(Association assoc : clazz.getAssociations()) {
						if(assoc.getEnds().size() == 0 || clazz.getName().equals(assoc.getEnd(0).getReferenceToClassName())) {
							visitor.visit(assoc);
							for(AssociationEnd assocEnd : assoc.getEnds()) {
								visitor.visit(assocEnd);
							}
						}
					}
					
					for(Precondition pr : clazz.getPreConds()) {
						visitor.visit(pr);
					}
					
					if(clazz.getUniqueIdentifier() != null ) {
						visitor.visit(clazz.getUniqueIdentifier());
					}
					
					for(ConstraintTree cnst : clazz.getConstraintTrees()){
                                          for(ConstraintVariable var:cnst)
                                          {
                                            visitor.visit(var);       
                                          }
                                        }
					
					for(AssociationVariable aVar : clazz.getAssociationVariables()) {
						visitor.visit((UmpleVariable)aVar);
						visitor.visit(aVar);
						for(Comment cmt : aVar.getComments()) {
							visitor.visit(cmt);
						}
						for(Requirement r : aVar.getRequirements()) {
							visitor.visit(r);
						}
					}
					
					for(Attribute attribute: clazz.getAttributes()) {
						visitor.visit((UmpleVariable)attribute);
						visitor.visit(attribute); // isIsDerived
						if(attribute.getCodeblock() != null) {
							visitor.visit(attribute.getCodeblock());
						}
						for(Comment cmt : attribute.getComments()) {
							visitor.visit(cmt);
						}	
						for(Requirement r : attribute.getRequirements()) {
							visitor.visit(r);
						}				
					}
					for(StateMachine sm: clazz.getAllStateMachines()){
						visitor.visit(sm);
						for(State state: sm.getStates()){
							visitor.visit(state);
							for (Activity activity : state.getActivities()){
								visitor.visit(activity);
								visitor.visit(new UserCode(activity.getActivityCode()));
							}
							for(Transition transition: state.getTransitions()){
								visitor.visit(transition);
								visitor.visit(transition.getGuard());
								if(transition.getGuard() != null) {
									Guard gElm = (Guard)transition.getGuard();
									String condition = gElm.getCondition(new cruise.umple.compiler.JavaGenerator());
									visitor.visit(gElm);
								}	
								visitor.visit(transition.getEvent());
							}
							for(Action action: state.getActions()){
								visitor.visit(action);
								visitor.visit(new UserCode(action.getActionCode()));
							}					
						}
					}
					
					for(CodeInjection ci: clazz.getCodeInjections()){
						if(ci.getConstraintTree() != null) {
							visitor.visit(ci.getConstraintTree());
						}
						visitor.visit(ci);
						if(ci.getCode() != null) {
							visitor.visit(new UserCode(ci.getCode()));
						}
					}
					
					for(TraceDirective td: clazz.getTraceDirectives()){
						visitor.visit(td);
						visitor.visit(td.getTracerDirective());
						
						for(AttributeTraceItem ati : td.getAttributeTraceItems()) {
							visitor.visit(ati);
						}
						
						for(TraceCondition tc : td.getCondition()) {
							visitor.visit(tc);
						}
						
						for(MethodTraceItem mte : td.getMethodTraceItems()) {
							visitor.visit(mte);
						}
						
						for(StateMachineTraceItem smte : td.getStateMachineTraceItems()) {
							visitor.visit(smte);
						}
						
						//for(TraceCase tc : td.getTraceCases()) {
							//visitor.visit(tc);
						//}
					}
					
					for(TraceCase tc: clazz.getTraceCases()){
						visitor.visit(tc);
					}
				}
			}
		}
		visitor.done();
    }
}
