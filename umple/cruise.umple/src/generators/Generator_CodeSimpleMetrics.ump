/*Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This generates simple metrics from Umple
  generate SimpleMetrics;
in your umple file, or the command line option
  -g SimpleMetrics
*/

namespace cruise.umple.compiler;

use SimpleMetrics_Class.ump;
use SimpleMetrics_SM.ump;
use SimpleMetrics_CodeLines.ump;

class SimpleMetricsGenerator
{
  isA CodeGeneratorWithSubptions;
  depend java.io.*;
  depend java.util.*;
  depend cruise.umple.util.*;
  depend cruise.umple.compiler.exceptions.*;

  // Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based
  // off of what's contained in here.
  UmpleModel model = null;
  String output = "";



  StringBuilder code = new StringBuilder();

  // Basic templates
  topHeader <<!<h1>Metrics generated by Umple from <<=fn>>.ump</h1>!>>
  emit genTopHeader(String fn)(topHeader);
  
  cr <<!
!>>
  
  td <<!<td><<=content>></td>!>>
  emit genCell(String content)(td,cr);
  
  public StringBuilder genCellInt(StringBuilder code, int i) {
    return _genCell(0, code, String.valueOf(i));
  }
  public StringBuilder genCellString(StringBuilder code, String s) {
    return _genCell(0, code, s);
  }
  public StringBuilder genCellFloat(StringBuilder code, Float f) {
    return _genCell(0, code, String.format("%.1f", f));
  }
  
  public void generate (){
    // Output basic file header
    _genTopHeader(0, code, model.getUmpleFile().getSimpleFileName());
  
    // GET DATA ABOUT LINES (CODE, BLANKS, COMMENTS)
    CodeMetrics codemetrics = new CodeMetrics();
    codemetrics.setModel(model);
    codemetrics.setResultCode(code);
    codemetrics.calculate();
    
    // GET DATA FROM CLASSES
    ClassMetrics classmetrics = new ClassMetrics();
    classmetrics.setModel(model);
    classmetrics.setResultCode(code);
    classmetrics.calculate(); 
    
    // GET DATA FROM STATE MACHINES
    StateMachineMetrics SMMeasure = new StateMachineMetrics();    
    SMMeasure.setModel(model);
    SMMeasure.setResultCode(code);
    SMMeasure.calculate();
    
    model.setCode(code.toString());
    writeModel();
    return;
  }
  
  // Output the metrics to a file 
  void writeModel()
  {
    try
    {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName() + ".metrics";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating simple metrics." + e, e);
    }
  } 
     
} // END CLASS

