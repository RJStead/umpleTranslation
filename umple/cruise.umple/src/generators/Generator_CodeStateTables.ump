/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This file generates state tables for all state machines in the current system.

A state-state table shows from-states in rows and to-states in columns, with
the cells showing all events that can make that transition. Empty cells indicate
no direct way to get from one state to another.

A state-event table shows from-states in rows and events in columns, with the
cells showing the resulting to-state.

Command line action for this is
  -g StateTables

 */
namespace cruise.umple.compiler;


class StateTablesGenerator
{
  isA CodeGeneratorWithSubptions;
  depend java.io.*;
  depend java.util.*;
  depend cruise.umple.util.*;
  depend cruise.umple.compiler.exceptions.*;

  // Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based
  // off of what's contained in here.
  UmpleModel model = null;
  String output = "";
}



// Row in a state-state table and state-event table
// Also iterated through as columns in a state-state-table
class StateTableRow 
{
  depend java.util.Map;
  depend java.util.HashMap;

  State uState; // The state for this row (or column)
  String sLabel;  // The label to be used for the state
  Integer nestingLevel;  // Higher number means it is a substate
  StateTableRow parent; // null if not nested
  Integer tableRowId; // The unique id of this row

  isPseudo=false; // H or H* Can never actually be in this so skipped as a row
  Map<String,StateTableCell> stateEventCells = new HashMap<String,StateTableCell>();
  Map<State,StateTableCell> stateStateCells = new HashMap<State,StateTableCell>();

  // Add cells for the entire row of transitions
  public void build() 
  {
    boolean isDerived = false;
    StateTableRow curRow = this;
    State curState;

    //Loops through this row and its parents to find transitions
    while(curRow != null) 
    {
      curState = curRow.getUState();
      extractTransitions(curState, isDerived);
      curRow = curRow.getParent();
      isDerived = true;
    }
    
  }  // End of build() method

  // Output this row of the stateEvent Table (not including tr tags
  public StringBuilder stateEventTableRowHtml() 
  {
    StringBuilder sb = new StringBuilder();

    // Output the name of the state with appropriate nesting
    firstCellInRow(sb);

    // Loop through all events, find the event in the hash table, and output each cell

    for(String ev : getStateTable().getAllEvents()) 
    {
      sb.append("      <td class=\"event-entry\">");
      if(stateEventCells.containsKey(ev)) 
      {
        sb.append(stateEventCells.get(ev).htmlString());
      }
      else 
      {
        sb.append("&nbsp;");
      }
      sb.append("</td>\n");
    }
    return(sb);
  }

  // Output this row of the stateState Table not including tr tags
  public StringBuilder stateStateTableRowHtml() 
  {
    StringBuilder sb = new StringBuilder();

    // Output the name of the state with appropriate nesting
    firstCellInRow(sb);

    // Loop through all states, find the state in the hash table, and output each cell
    for(StateTableRow col : getStateTable().getRows()) 
    {
      State colState = col.getUState();
      sb.append("      <td class=\"state-entry\">");

      if(stateStateCells.containsKey(colState)) 
      {
        sb.append(stateStateCells.get(colState).htmlString());
      }
      else 
      {
        sb.append("&nbsp;");
      }
      sb.append("</td>\n");
    }
    return(sb);
  }

  //Loops through the transitions in a state and adds them to a list
  private void extractTransitions(State curState, boolean isDerived) 
  {
    Event event;
    Action action;
    String transitionLabel = "?";
    String eventLabel = "??";
    String guardString, actionCode, transitionAction;
    Guard guard;

    // Add cells for each transition
    for (Transition t : curState.getTransitions()) 
    {
      event = t.getEvent();
      action = t.getAction();

      if(event.isAutoTransition()) 
      {
        transitionLabel = "";
        eventLabel = "(auto)";
      }
      else 
      {
        if (event.getIsTimer()) 
        {
          transitionLabel = "after(" + event.getTimerInSeconds() + ")";
          eventLabel=transitionLabel;
        }
        else 
        {
          eventLabel = event.getName();
          if(event.getArgs() == null || event.getArgs() == "") 
          {
            transitionLabel = eventLabel;
          }
          else 
          {
            transitionLabel = eventLabel + "(" + event.getArgs() + ")";
          }
        }
      }

      if (action == null || action.getActionCode() == "") 
      {
        transitionAction = "";
      }
      else 
      {
        actionCode = action.getActionCode();
        transitionAction = "/ " + actionCode.replaceAll("\"","&quot;");
      }

      guard = t.getGuard();
      if (guard == null) guardString = "";
      else 
      {
        guardString = extractGuardString(guard, curState, event, this);
      }

      // Add state to the state event list in hash table
      addStateEventCell(eventLabel, t, guardString, transitionAction, isDerived);

      // Add event to the state state list in hash table
      addStateStateCell(eventLabel, t, guardString, transitionAction, isDerived);

    } // End of loop through each transition
  }

  private void addStateEventCell(String label, Transition t, String guard, 
    String action, boolean isDerived) {

    if(stateEventCells.get(label) == null) 
    {
      stateEventCells.put(label, new StateTableCell());
    }

    stateEventCells.get(label).addStateTableEntry(
      new StateEventEntry(t.getNextState(), guard, action, isDerived));
  }

  private void addStateStateCell(String label, Transition t, String guard, 
    String action, boolean isDerived) {

    if(stateStateCells.get(t.getNextState()) == null) 
    {
      stateStateCells.put(t.getNextState(), new StateTableCell());
    }

    stateStateCells.get(t.getNextState()).addStateTableEntry(
      new StateStateEntry(label, guard, action, isDerived));
  }

  // Output the first cell in the row of the table, i.e. the state name with indentation
  private StringBuilder firstCellInRow(StringBuilder sb) 
  {
    sb.append("      <td class=\"state-header\" data-parent=\"");

    if(this.parent != null) 
    {
      sb.append(String.valueOf(this.parent.getTableRowId()));
    }

    sb.append("\">");

    for(int i=0; i<nestingLevel; i++) 
    {
      sb.append("- ");
    }
    sb.append(sLabel);
    sb.append("</td>\n");
    return(sb);
  }

  private String extractGuardString(Guard guard, 
                                    State curState, 
                                    Event event, 
                                    StateTableRow curRow)
  {
    JavaGenerator gen = new JavaGenerator();
    UmpleClass umpClass = curState.getStateMachine().getUmpleClass();
    
    if(umpClass == null) 
    {
      return extractGuardString(
        guard, curRow.getParent().getUState(), event, curRow.getParent());
    }
    else 
    {
      gen.setModel(umpClass.getSourceModel());
      return guard.getCondition(gen).replaceAll("\"","&quot;");
    }
  }
}

// Cell in a state table containing the resulting state or the event that results in transition
class StateTableCell 
{
  1 -> * StateTableEntry;
  
  public StringBuilder htmlString()
  {
    StringBuilder sb = new StringBuilder();
    boolean isFirst = true;
    for(StateTableEntry entry : getStateTableEntries())
    {
      if(isFirst)
      {
        isFirst = false;
        sb.append(entry.htmlString());
      } 
      else
      {
        sb.append("<br>");
        sb.append(entry.htmlString());
      }
    }

    return sb;
  }
}

//Interface for each individual entry within a cell
interface StateTableEntry
{
  public StringBuilder htmlString();
}

//Cell entries for state-event tables
class StateEventEntry
{
  isA StateTableEntry;
  State uState;
  String guard;
  String action;
  boolean isDerived;

  // Output this state cell as html - appears in state-event table
  public StringBuilder htmlString() 
  {
    StringBuilder sb = new StringBuilder();
    sb.append("<span");
    if(isDerived) sb.append(" class=\"derived\"");

    if(action != null && !action.equals("")) {
      sb.append(" data-action=\"");
      sb.append(action);
      sb.append("\"");
    }

    sb.append(">");

    if(guard != null && !guard.equals(""))
    {
      sb.append("[");
      sb.append(guard);
      sb.append("] ");
    }

    sb.append(uState.getName());
    sb.append("</span>");
    return(sb);
  }
}

//Cell entries for state-state tables
class StateStateEntry
{
  isA StateTableEntry;
  String label;
  String guard;
  String action;
  boolean isDerived;

  // Output this state cell as html - appears in state-state table
  public StringBuilder htmlString() 
  {
    StringBuilder sb = new StringBuilder();
    sb.append("<span");
    if(isDerived) sb.append(" class=\"derived\"");
    sb.append(">");
    sb.append(label);

    if(guard != null && !guard.equals(""))
    {
      sb.append(" [");
      sb.append(guard);
      sb.append("]");
    }

    sb.append("</span>");
    return(sb);
  }
}

class StateTable 
{
  UmpleClass uClass;
  StateMachine sm;
  List<String> allEvents = null; // will be populated by call to buildAllEvents
  1 -- * StateTableRow rows;  // Rows to be output for each state

  // Outputs the Event State table - with states as cells
  public StringBuilder stateEventTableHtml(StringBuilder sb) 
  {
    sb.append("<div class=\"statetable-container\">\n");
    sb.append("  <table class=\"statetable event-statetable\">\n");

    // Output row headers - blank cell + list of events
    sb.append("    <tr>\n      <td class=\"event-header\">&nbsp;</td>\n");
    for(String e : allEvents) 
    {
      sb.append("      <td class=\"event-header\">");
      sb.append(e);
      sb.append("</td>\n");
    }
    sb.append("    </tr>\n\n");

    // Output each row
    for(StateTableRow row : rows) 
    {
      sb.append("    <tr>\n");
      sb.append(row.stateEventTableRowHtml());
      sb.append("    </tr>\n\n");
    }

    sb.append("  </table>\n");
    sb.append("</div>\n\n");
    return(sb);
  }

  // Outputs the State State table - with events as cells
  public StringBuilder stateStateTableHtml(StringBuilder sb) 
  {
    sb.append("<div class=\"statetable-container\">\n");
    sb.append("  <table class=\"statetable state-statetable\">\n");

    // Output row headers - blank cell + list of states (same as rows)
    sb.append("    <tr>\n      <td class=\"state-header\">&nbsp;</td>\n");
    for(StateTableRow col : rows) {
      String stateName = col.getSLabel();
      sb.append("      <td class=\"state-header\">");
      sb.append(stateName);
      sb.append("</td>\n");
    }
    sb.append("    </tr>\n\n");

    // Output each row
    for(StateTableRow row : rows) 
    {
      sb.append("    <tr>\n");
      sb.append(row.stateStateTableRowHtml());
      sb.append("    </tr>\n\n");
    }

    sb.append("  </table>\n");
    sb.append("</div>\n\n");
    return(sb);
  }

  // Builds the columns after the rest of the tables are made
  public void buildAllEvents() 
  {
    HashSet<String> eventSet = new HashSet<String>();
    for (StateTableRow row : rows) 
    {
      eventSet.addAll(row.getStateEventCells().keySet());
    }
    allEvents = new ArrayList<String>(eventSet);

    Collections.sort(allEvents);
  }

  // The first call to the recursive state machine walking
  public void buildRecursivelyEntry(StateMachine theSm) {
    int nestingLevel = 0;
    int currentId = 0;
    buildRecursively(theSm, nestingLevel, currentId, null);
  }

  // Walks the state machine adding rows as needed
  public int buildRecursively(StateMachine theSm, 
                              int nestingLevel, 
                              int currentId,
                              StateTableRow parent) 
  {
    String sLabel;
    StateTableRow stateRow = null;
    String smName, clSmName;
    boolean isPseudo = false;

    // We haven't processed any states yet in this statemachine
    Boolean isFirstState = true;

    // Iterate (recursively) through the states of this state machine
    for (State s : theSm.getStates())
    {
      sLabel=s.getName();  // This is what is displayed
      if(sLabel.equals("HStar")) sLabel="H*";
      isPseudo = sLabel.equals("H") || sLabel.equals("H*");

      // Add a row for this state  - automatically adds to 'rows' as there is an association
      stateRow = new StateTableRow(s, sLabel, nestingLevel, parent, currentId, this);
      stateRow.build();
      currentId++;

      for (StateMachine nestedSm : s.getNestedStateMachines())
      {
      	currentId = buildRecursively(nestedSm, nestingLevel + 1, currentId, stateRow);
      }

    }  // End iteration through the states, adding rows at this level of nesting

    return currentId;
  }
}


class StateTablesGenerator
{
  StringBuilder code = new StringBuilder();

  // Basic templates
  topHeader <<!
  <style>
    .statetable { border-collapse: collapse; }
    .statetable td { border: 1px solid black; padding: 2px 10px 2px 10px; white-space: nowrap; }
    .statetable .state-header, .statetable .event-header { font-weight: bold; background-color: #ecf0f1; border: 2px solid black; }
    .statetable .derived { font-style: italic; }
    .statetable-container { overflow-x: auto; }
  </style>
  
  <h1>State tables generated by Umple from <<=fn>>.ump</h1>
  !>>


  emit genTopHeader(String fn)(topHeader);

  cr <<!
  !>>

  td <<!<td><<=content>></td>!>>
  emit genCell(String content)(td,cr);

  public StringBuilder genCellString(StringBuilder code, String s) {
    return _genCell(0, code, s);
  }

  // CENTRAL GENERATE METHOD

  public void generate()
  {
    // Output basic file header
    _genTopHeader(0, code, model.getUmpleFile().getSimpleFileName());

    String className;

    // Determine if there are multiple classes with state machines
    // or multiple state machines in any class
    // If so, we will need to put boxes around the state machines
    int smCount = 0;
    for (UmpleClass uClass : model.getUmpleClasses()) {
      for (StateMachine sm : uClass.getStateMachines()) {
        smCount++;
      }
    }
    if(smCount == 0) {
      // Special case. No state machine.

      code.append("<p>No State machines found in this model</p>\n");

      terminateCode(code);
      return;
    }

    // We now know we have to output one or more state machines
    // Iterate through each class.
    for (UmpleClass uClass : model.getUmpleClasses())
    {
      className = uClass.getName();

      // Process the top level state machines in a class
      for (StateMachine sm : uClass.getStateMachines())
      {
        code.append("<h2>Class ");
        code.append(className);
        code.append(" state machine ");
        code.append(sm.getName());
        code.append("</h2>\n\n");

        // Set up the state table
        StateTable st = new StateTable(uClass, sm);

        // Build the contents of the state tables
        st.buildRecursivelyEntry(sm);
        // Now figure out the headers
        st.buildAllEvents();

        // Output the headers of the State Event table
        code.append("<h3>State-event table</h3>\n");

        // Output the body of the state event table
        st.stateEventTableHtml(code);

        // Output the headers of the State State table
        code.append("<h3>State-state table</h3>\n");

        // Output the body of the state state table
        st.stateStateTableHtml(code);

      } // End iteration through state machines of a class
    } // End iteration through classes

    terminateCode(code);
    return;
  }

  private void terminateCode(StringBuilder code) {
    model.setCode(code.toString());
    writeModel();
    return;
  }

  // Output the graphviz file to a file with the .gv suffix
  private void writeModel()
  {
    try
    {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName() + ".html";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating State Tables." + e, e);
    }
    return;
  }
}

