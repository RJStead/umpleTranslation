/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

Code for generating documentation such as the Umple user manual
*/

namespace cruise.umple.docs;

class DocumenterMain 
{
  private static String console = "";
  
  public static void main(String[] args) 
  {
    console = "";
     
    if (args.length < 2)
    {
      println("Usage: java -jar umpledocs.jar <data_dir> <output_dir>" + System.lineSeparator() 
              + "Example: java -jar umple-docs.jar docs output");
      return;
    }
     
    String dataDirectory = args[0];
    String outputDirectory = args[1];
    Documenter doc = new Documenter(dataDirectory,outputDirectory);
    boolean didGenerate = doc.generate();
    
    if (didGenerate)
    {
      println("Success generating user manual!");
    }
    for (String message : doc.getMessages())
    {
      println(message);
    }
    System.exit(doc.isSeriousProblem() ? -1 : 0);
  }
   
  private static void println(String output)
  {
    console += output + System.lineSeparator();
    System.out.println(output);
  }
}


class Documenter
{
  
  public boolean generate()
  {
    File inputDirectory = new File(getInputPath());
    if (!inputDirectory.exists())
    {
      addMessage("Unknown directory: " + getInputPath());
      setSeriousProblem(true);
      return false;
    }

    setParser(new ContentParser("content"));

    parseGroupOrder(inputDirectory);
    parseContent(inputDirectory);
    
    if (getParser().analyze().getWasSuccess())
    {
      String message = "Created Groups:";
      for (Group g : getParser().getGroups())
      {
        message += " [" + g.getName() + "]";
      }
      addMessage(message);
      publish(getOutputPath());
      return true;
    }
    else
    {
      addMessage("Error: Unable to analyze user manual files in " + getInputPath());
      setSeriousProblem(true);
      return false;
    }
  }

  public boolean publish(String path)
  {
    File file = new File(path);
    file.mkdirs();
    String navigationOutput = "";
    String sectionsToHide = "";
    String prevNextOutput = "";
    Group group = null;
    Content content = null;
    int numGroups = getParser().numberOfGroups();
    int numContents = 0;
    
    // NEW
    StringBuilder combinedHtmlOutput = new StringBuilder();
    combinedHtmlOutput.append(
        "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">" + "\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">" + "\n" +
        "<head>" + "\n" +
        "  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />" + "\n" +
        "  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />" + "\n" +        
        "  <link rel=\"stylesheet\" type=\"text/css\" href=\"files/layout.css\" />" + "\n" +
        "  <script type=\"text/javascript\" src=\"files/script.js\"></script>" + "\n" +
        "  <title>Umple Combined User Manual</title>" + "\n" +
        "  <style> h1 {page-break-before: always; font-size: 200%;}</style>\n"+
        "  <style> .largeCentered {text-align: center; font-size: 200%  }</style>\n" +  
        "  <style> .regCentered {text-align: center; font-size: 110%  }</style>\n" +  
        "  <meta name='viewport' content='width=device-width, initial-scale=1'>\n  " +
        "</head>\n<body>\n" +
        "<div class='largeCentered'>Umple Combined User Manual<br><a href='http://www.umple.org'>http://www.umple.org</a></div><div class='regCentered'>This version is one large page and is intended to allow searching through the entire manual, or easy printing to pdf for offline reading. For most purposes you will want to work with the individual manual pages at <a href='http://manual.umple.org'>http://manual.umple.org</a>. A published 526-page <a href='https://doi.org/10393/42044'>pdf version of the Umple User Manual</a> is also available for download. </div>&nbsp;<br/>"
        );

    Hashtable<String,String> referenceLookup = createReferenceLookup();
    String filename="";
    int totPages=0;
    for (int gi=0; gi<numGroups; gi++)
    {
      group = getParser().getGroup(gi);
      sectionsToHide = toSectionsToHideHtml(group);
      numContents = group.numberOfContents();
      for (int ci=0; ci<numContents; ci++)
      {
        content = group.getContent(ci);
        
        if(content.getDescription().contains("@@syntax") || content.getDescription().contains("@@example")) {
          addMessage("Error: Parsing of description failed for: " + content.getTitle()+ " because @@syntax or @@example found. Look for bad characters or non-matching brackets. Ensure html symbols are used for slashes, quotes and apostrophes." );
         setSeriousProblem(true);    
        }
        
        navigationOutput = toNavigationHtml(group, content);
        if (content.getShouldIncludeReferences())
        {
          updateReferences(content,referenceLookup);
        }
        
        prevNextOutput="&nbsp; &nbsp;";
        Content theContent=null;

        // Add file link to previous page if there is one
        if(ci>0) {
          theContent=group.getContent(ci-1);
          prevNextOutput+=genPrevNext("Previous",theContent);
        }
        else if(gi > 0&&getParser().getGroup(gi-1).numberOfContents()>=1) {
          theContent=getParser().getGroup(gi-1)
            .getContent(getParser().getGroup(gi-1).numberOfContents()-1);
          prevNextOutput+=genPrevNext("Previous",theContent);
        }

        // Add file link to next page if there is one
        if(ci<(numContents -1)) {
          theContent=group.getContent(ci+1);
          prevNextOutput+=genPrevNext("Next",theContent);
        }
        else if(gi<(numGroups -1)&&getParser().getGroup(gi+1).numberOfContents()>0) {
          theContent=getParser().getGroup(gi+1).getContent(0);
          prevNextOutput+=genPrevNext("Next",theContent);
        }
        String htmlOutput = toHtml(content, navigationOutput, sectionsToHide, prevNextOutput, content.getFilename());

        // NEW FOR COMBINED
        String tempCombined = Template.HtmlCoreTemplate;
        tempCombined = substituteCoreElements(tempCombined, content);
        combinedHtmlOutput.append(tempCombined);
        
        if (htmlOutput.length() == 0)
        {
          addMessage("Error: User manual processing failed on: " + content.getTitle());
          setSeriousProblem(true);
          return false;
        }
        
        filename = path + File.separator + content.getTitleFilename();
        SampleFileWriter.createFile(filename,htmlOutput);
      }
      totPages+=numContents;
    }
    
    // NEW FOR COMBINED
    combinedHtmlOutput.append(Template.HtmlHighlighterTemplate);
    combinedHtmlOutput.append("\n</body>\n</html>");
    filename = path + File.separator + "UmpleUserManualCombined.html";
    SampleFileWriter.createFile(filename,combinedHtmlOutput.toString());
    
    addMessage("Created "+totPages+" manual pages, in "+numGroups+" groups, including "+filename);
    return true;
  }
  
  public String genPrevNext(String direction, Content theContent) {
    String tooltip="title=\""+theContent.getTitle();
    if(theContent.getTooltip()==null) {
      tooltip+="\" ";
    }
    else {
      tooltip+="\n\n"+theContent.getTooltip()+"\" "; 
    }
  
    return("<a "+tooltip+"href=\"" + theContent.getTitleFilename() + "\">["+direction+"]</a>&nbsp &nbsp;");
  }

  
  public String toHtml(String title)
  {
    Content selectedContent = null;
    Group selectedGroup = null;
    
    for (Group group : getParser().getGroups())
    {
      for (Content content : group.getContents())
      {
        if (content.getTitle().equals(title))
        {
          selectedContent = content;
          selectedGroup = group;
          break;
        }
      }
    }
    
    return toHtml(selectedContent, toNavigationHtml(selectedGroup, selectedContent),  toSectionsToHideHtml(selectedGroup), "", selectedContent.getTitleFilename());
  }

  private Hashtable<String, String> createReferenceLookup()
  {
    Hashtable<String, String> referenceLookup = new Hashtable<String, String>();
    for (Group group : getParser().getGroups())
    {
      for (Content content : group.getContents())
      {
        referenceLookup.put(content.getTitle(), content.getTitleFilename());
      }
    }
    return referenceLookup;
  }

  private void updateReferences(Content content, Hashtable<String,String> referenceLookup)
  {
    String newSyntax = content.getSyntax();
    String newDescription = content.getDescription();
    
    for(Iterator<String> iTitle = referenceLookup.keySet().iterator(); iTitle.hasNext();)
    {
      String title = iTitle.next();
      String titleFilename = referenceLookup.get(title);
      
      if (title.equals(content.getTitle()))
      {
        continue;
      }
      
      if (newSyntax != null)
      {
        newSyntax = newSyntax.replaceAll(title, StringFormatter.format("<a href=\"{1}\">{0}</a>",title,titleFilename));
      }
      if (newDescription != null)
      {
        newDescription = newDescription.replaceAll(title, StringFormatter.format("<a href=\"{1}\">{0}</a>",title,titleFilename));
      }
    }
    content.setSyntax(newSyntax);
    content.setDescription(newDescription);
  }

  private void parseContent(File inputDirectory)
  {
    File[] allFiles = SampleFileWriter.getAllFiles(inputDirectory);
    for (File aFile : allFiles)
    {
      if (aFile.getName().endsWith(".txt"))
      {
        if (!getParser().parse("content", SampleFileWriter.readContent(aFile)+" @@Filename "+aFile.getName()).getWasSuccess())
        {
          addMessage("Error: Unable to parse manual source page at line "+ getParser().getParseResult().getPosition() +": " + aFile.getName() );
          setSeriousProblem(true);
        }
      }
    }
  }
  
  private void parseGroupOrder(File inputDirectory)
  {
    File[] allFiles = SampleFileWriter.getAllFiles(inputDirectory);
    for (File aFile : allFiles)
    {
      if ("order.group".equals(aFile.getName()))
      {
        getParser().parse("groupOrder", SampleFileWriter.readContent(aFile));
      }
    }
  }
  
  private String toHtml(Content selectedContent, String navigationOutput, String toHideOutput, String prevNextOutput, String srcFileOutput)
  {
    if (selectedContent == null)
    {
      return "";
    }

    String htmlOutput = Template.HtmlTemplate;
    htmlOutput = htmlOutput.replace("@@PREVNEXT@@", prevNextOutput);
    htmlOutput = htmlOutput.replace("@@NAVIGATION@@", navigationOutput);
    htmlOutput = htmlOutput.replace("@@SECTIONSTOHIDE@@", toHideOutput);
    htmlOutput = htmlOutput.replace("@@SRCFILENAME@@", srcFileOutput);
        
    htmlOutput = substituteCoreElements(htmlOutput, selectedContent);

    return htmlOutput;
  }
  
  private String substituteCoreElements(String htmlOutput, Content selectedContent) {
    int endOfExampleBeforePosition=0;
    
    if (selectedContent == null)
    {
      return "";
    }
    
    UmpleInternalParser grammarparser = new UmpleInternalParser();
    for(String file:grammarparser.getParser().getGrammarFiles()){
      grammarparser.addRulesInFile(file);
    }  
  
    htmlOutput = htmlOutput.replace("@@TITLE@@", selectedContent.getTitle());

    htmlOutput = htmlOutput.replace("@@DESCRIPTION@@", selectedContent.getDescription());
    
    if (selectedContent.getSyntax() == null)
    {
      htmlOutput = htmlOutput.replace("@@SYNTAX@@", "");
    }
    else
    {
      String syntaxHtml = Template.SyntaxTemplate.replace("@@SYNTAX_CODE@@",grammarparser.toGrammarParts(selectedContent.getSyntax()));
      htmlOutput = htmlOutput.replace("@@SYNTAX@@", 
        "<span class=\"notranslate\" translate=\"no\">" +
        syntaxHtml+ "</span>");
    }

    if (selectedContent.getVideoURL() == null)
    {
      htmlOutput = htmlOutput.replace("@@VIDEOURL@@", "");
    }
    else
    {
      String videoURLHtml = Template.VideoURLTemplate.replace("@@VIDEO_URL@@",selectedContent.getVideoURL());
      htmlOutput = htmlOutput.replace("@@VIDEOURL@@", 
        "<span class=\"notranslate\" translate=\"no\">" +
        videoURLHtml+ "</span>");
    }
    
    String exampleOutput = "";
    for (ManualExample manualExample : selectedContent.getExamples())
    {
      String example = manualExample.getText();
      String url = manualExample.getUrl();
      String nextExample = Template.ExampleTemplate;
      String caption = manualExample.getCaption();
      String exampleHeader = "";
      if(caption != null && !caption.equals("")) {
        exampleHeader = caption;
      }
      else {
        exampleHeader = exampleOutput.length() == 0 ? "Example" : "Another Example";
      }
      nextExample = nextExample.replace("@@EXAMPLE_NUMBER@@",exampleHeader);
      
      endOfExampleBeforePosition = example.indexOf("//$?[End_of_model]$?");
      if(endOfExampleBeforePosition == -1) {endOfExampleBeforePosition = example.length();}
      nextExample = nextExample.replace("@@EXAMPLE_CODE@@", example.substring(0,endOfExampleBeforePosition));
      
      if(url.isEmpty()) {
        // Encode it, as the code is embedded
        try {
          nextExample = nextExample.replace("@@EXAMPLE_CODE_URL@@","?text="+
            URLEncoder.encode(example,"UTF-8").replaceAll("\\+","%20").replaceAll("%2B","%252B"));
        }
        catch (java.io.UnsupportedEncodingException e) {
        }
      }
      else {
        // Use the actual filename in the URL but trim off the trailing .ump
        // And add back any separate command line arguments
        int spaceIndex=url.indexOf(' ');
        String urlArguments="";
        String urlMain=url;
        if (spaceIndex != -1) {
          urlArguments=url.substring(spaceIndex+1);
          urlMain=url.substring(0,spaceIndex);
        }
        nextExample = nextExample.replace("@@EXAMPLE_CODE_URL@@",
          url.substring(0, urlMain.lastIndexOf('.'))+urlArguments);
      }
      exampleOutput += nextExample;
    }
    
    htmlOutput = htmlOutput.replace("@@EXAMPLE@@", exampleOutput);
    htmlOutput = htmlOutput.replace("@@UMPLE_GRAMMAR@@", 
      "<span class=\"notranslate\" translate=\"no\">" +
      grammarparser.toGrammar()) + "</span>";
    return htmlOutput;
  }
  
  private String toNavigationHtml(Group groupToAlwaysShow, Content contentToNotHighlight)
  {
    String navigationOutput = "";
    String theFileName = "";
    String nextGroupItem = "";
    for (Group group : getParser().getGroups())
    {
      String nextGroupHeader = Template.NavigationHeaderTemplate;
      nextGroupHeader = nextGroupHeader
        .replace("@@NAVIGATION_HEADER_NAME@@",group.getName())
        .replace("@@NAVIGATION_HEADER_ID@@",group.getGroupIdName())
        .replace("@@NAVIGATION_HEADER_ID@@",group.getGroupIdName());
      if(group.getTooltip() == null || group.getTooltip().equals("")) {
        nextGroupHeader = nextGroupHeader.replace("@@TOOLTIP@@ ","");
      }
      else {
        nextGroupHeader = nextGroupHeader.replace("@@TOOLTIP@@ ","title=\""+group.getTooltip()+"\"");
      }
      navigationOutput += nextGroupHeader;

      for (Content content : group.getContents())
      {
        if(content == contentToNotHighlight) {
          nextGroupItem = Template.NavigationItemTemplateNoAnchor;
        }
        else {
          nextGroupItem = Template.NavigationItemTemplate;
        }
        nextGroupItem = nextGroupItem.replace("@@NAVIGATION_ITEM_NAME@@",content.getTitle());
        if(content.getTooltip() != null) {
          nextGroupItem = nextGroupItem.replace("@@TOOLTIP@@",Template.tooltipTemplate().replace("@@TOOLTIP@@",content.getTooltip()));
        }
        else {
          nextGroupItem = nextGroupItem.replace("@@TOOLTIP@@ ","");
        }
        
        if(content != contentToNotHighlight) {
          nextGroupItem = nextGroupItem.replace("@@NAVIGATION_ITEM_FILENAME@@",content.getTitleFilename());
        }
        navigationOutput += nextGroupItem;
      }
      navigationOutput +="        </div>";
    }
    return navigationOutput;
  }
  
  private String toSectionsToHideHtml(Group groupToAlwaysShow)
  {
    String sectionsToHideOutput = "";
    for (Group group : getParser().getGroups())
    {
      if(group != groupToAlwaysShow) {
        sectionsToHideOutput +="showHide(\"" + group.getGroupIdName() + "\");\n";
      }
    }
    return sectionsToHideOutput;
  }
}

class Content
{
  
  public String getTitleFilename()
  {
    return title.replace(" ","") + ".html";
  }
}

class Group
{
  public String getGroupIdName()
  {
    return name.replace(" ","");
  }
}

class ContentParser
{
  depend java.nio.file.Paths;
  depend java.nio.file.Path;
  depend java.nio.file.Files;
  depend java.io.IOException;
  
  internal Integer init = init();

  private int init()
  {
    addRule("groupOrder : ( [**group] ; )*");
    addRule("content : [*title] [*group] [=noreferences]? (@@tooltip [**tooltip])?  @@description [**description] (@@videoURL [**videoURL])? (@@syntax [**syntax])? [[example]]* @@Filename [*filename]");
    addRule("example- : @@example ( @@caption [**caption] @@endcaption )? [**example] @@endexample");
    init += 1;
    return init;
  }

  public Group getGroup(String name)
  {
    for (Group g : getGroups())
    {
      if (g.getName().equals(name))
      {
        return g;
      }
    }
    Group newGroup = new Group(name);
    addGroup(newGroup);
    return newGroup;
  }
  
  public ParseResult analyze()
  {
    for (Token t : getRootToken().getSubTokens())
    {
      if (t.is("content"))
      {
        Group g = getGroup(t.getValue("group"));
        Content content = new Content(t.getValue("title"), t.getValue("description"), t.getValue("syntax"), t.getValue("filename"));

        if(t.getValue("tooltip") != null) {
          content.setTooltip(t.getValue("tooltip"));
        }
        
        if(t.getValue("videoURL") != null) {
          content.setVideoURL(t.getValue("videoURL"));
        }
        
        if (t.getValue("noreferences") != null)
        {
          content.setShouldIncludeReferences(false);
        }
        ManualExample newEx = null;
        for (Token exampleToken : t.getSubTokens())
        {
          if (exampleToken.is("example"))
          {
            String exampleText = exampleToken.getValue();
            String exampleURL="";
            if(exampleText. startsWith("@@source")) {
              // obtain the example text from the ump directory in umpleonline
              try {
                String exampleTextWithArguments=exampleText.substring(9).trim();
                int spaceLocation = exampleTextWithArguments.indexOf(' ');
                String exampleName = exampleTextWithArguments;
                if (spaceLocation != -1) exampleName=exampleTextWithArguments.substring(
                  0,spaceLocation);
                Path thePath = Paths.get("umpleonline/umplibrary/"+exampleName);
                if(Files.exists(thePath)) {
                  exampleText = new String(Files.readAllBytes(thePath));
                }
                else {
                  // Fall back to the old location of the manual examples
                  thePath = Paths.get("umpleonline/ump/"+exampleName);                
                  exampleText = new String(Files.readAllBytes(thePath));
                }
                exampleText = exampleText.replaceAll("<", "&lt;");
                exampleText = exampleText.replaceAll(">", "&gt;");
                exampleURL="?example="+exampleTextWithArguments;
              }
              catch (IOException e) {
                exampleText = "Could not open example file "
                  +exampleText.substring(9).trim();
              }
            }
            // If we have an example without finding a caption first, then create a plain example
            if(newEx == null) {
              newEx = new ManualExample(exampleText);
            }
            else {
              newEx.setText(exampleText);
            }
            newEx.setUrl(exampleURL);
            content.addExample(newEx);
            newEx = null; // any subsequent caption or example starts a new example
          }
          else if (exampleToken.is("caption")) {
            newEx = new ManualExample(""); // Empty for now pending finding example token
            newEx.setCaption(exampleToken.getValue());
          }
        }
        g.addContent(content);
      }
      else if (t.is("groupOrder"))
      {
        for (Token groupToken : t.getSubTokens())
        {
          if (!groupToken.isStatic())
          {
            String [] groupInfo=groupToken.getValue().split("%");
            Group newGroup = new Group(groupInfo[0]);
            String newTooltip="";
            if(groupInfo.length==2) {
              newTooltip=groupInfo[1];
            }
            newGroup.setTooltip(newTooltip);
            addGroup(newGroup);
          }
        }
      }
    }
    return getParseResult();
  }
}

class Template
{
  
  private static String navigationHeaderTemplate()
  {
    return "        <div class=\"level1\"><a @@TOOLTIP@@ href=\"javascript:showHide('@@NAVIGATION_HEADER_ID@@');\">@@NAVIGATION_HEADER_NAME@@</a></div>" + "\n" +
           "        <div id=\"@@NAVIGATION_HEADER_ID@@\">";
  }
  
  private static String navigationItemTemplate()
  {
    return "          <div class=\"level2\"><a @@TOOLTIP@@ href=\"@@NAVIGATION_ITEM_FILENAME@@\" >@@NAVIGATION_ITEM_NAME@@</a></div>" + "\n";
  }
 
  private static String navigationItemTemplateNoAnchor()
  {
    return "          <div class=\"level2\"><b>@@NAVIGATION_ITEM_NAME@@</b></div>" + "\n";
  }
    
  private static String exampleTemplate()
  {
    String template = "" + 
      "      <h3>@@EXAMPLE_NUMBER@@</h3>" + "\n" +
      "<span class=\"notranslate\" translate=\"no\">" +
      "      <pre name=\"code\" class=\"c-sharp\">" + "\n" +
      "@@EXAMPLE_CODE@@" + "\n" +
      "      </pre>" + "\n" +
      "</span>" +
      "<p class=\"description\">" +
      "<a target=\"uol\" href=\"https://cruise.umple.org/umpleonline@@EXAMPLE_CODE_URL@@\">" +
        "Load the above code into UmpleOnline</a></p>" + "\n" +
      "&nbsp; <br/>" + "\n";
    return template;
  }
  
  private static String syntaxTemplate()
  {
    String template = "" + 
      "      <h3>Syntax</h3>" + "\n" +
      "      \n" +
      "@@SYNTAX_CODE@@" + "\n" +
       "     <br/>\n" +
        "" + "\n";
    return template;
  }
  
  static String tooltipTemplate()
  {
    String template = "" +
      "title=\"@@TOOLTIP@@\"";
    return template;
  }  
  
  
  private static String videoURLTemplate()
  {
    String template = "" +
 "      <h3>YouTube Video with Additional Explanation</h3>" + "\n" +     
      "  <iframe width=\"560\" height=\"315\"\n"+
      "     src=\"@@VIDEO_URL@@?rel=0\" frameborder=\"0\"\n"+
      "     allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n" +
      "&nbsp; <br/> &nbsp; <br/>" + "\n";
    return template;
  }  
  

  private static String htmlTemplate()
  {
    String template = "" + 
        "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">" + "\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">" + "\n" +
        "<head>" + "\n" +
        "  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />" + "\n" +
        "  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />" + "\n" +
        "  <link rel=\"stylesheet\" type=\"text/css\" href=\"files/layout.css\" />" + "\n" +
        "  <script type=\"text/javascript\" src=\"files/script.js\"></script>" + "\n" +
        "  <title>Umple User Manual: @@TITLE@@</title>" + "\n" +
        "  <script type=\"text/javascript\">" + "\n" +
        "    function showHide(section)" + "\n" +
        "    {" + "\n" +
        "      var sectionDivStyle = document.getElementById(section).style;" + "\n" +
        "      if(sectionDivStyle.display==\"none\") {" + "\n" +
        "        sectionDivStyle.display=\"inherit\";" + "\n" +
        "      }" + "\n" +
        "      else {" + "\n" +
        "        sectionDivStyle.display=\"none\";" + "\n" +
        "      }" + "\n" +
        "    }" + "\n" +
        "  </script>" + "\n" +
        "  <meta name='viewport' content='width=device-width, initial-scale=1'>\n  " +
        "</head>" + "\n" +
        "" + "\n" +
        "<body>" + "\n" +
        "" + "\n" +
        "  " + "\n" +
        "  <table class=\"body\" >" + "\n" +
        "  <tbody>" + "\n" +
        "  <tr>" + "\n" +
        "    <td class=\"menu\">" + "\n" +
        "      <div class=\"title\"><a href=\"https://cruise.umple.org/umple\">" +
        "<img height=\"25\" src=\"files/indicator_blocks.gif\" alt=\"Umple Logo\" />&nbsp;" +
        "Umple </a></div>" + "\n" +
        
// Code from Google for translation

"<div id=\"google_translate_element\"></div><script type=\"text/javascript\">" +
"function googleTranslateElementInit() {" +
"  new google.translate.TranslateElement({pageLanguage: 'en', layout:" +
"google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');" +
"}" +
"</script><script type=\"text/javascript\"" +
"src=\"//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\"></script>" +

        "@@NAVIGATION@@" + "\n" +
        "<div class=\"level1\"><a href=\"UmpleUserManualCombined.html\">Combined Version</a></div>\n" +  
        "<div class=\"level1\"><a title=\"Click here to open an editor in Github on the original source for this manual page.\nYou can submit a pull request after making your changes\" href=\"https://github.com/umple/umple/tree/master/build/reference/@@SRCFILENAME@@\">Edit on Github</a></div>\n" +                
        "<div class=\"level1\">@@PREVNEXT@@</div>\n" +
        "    </td>" + "\n" +
        "" + "\n" +
        "    <td class=\"dotSeparator\"><img src=\"files/dots.gif\" alt=\"list of dots\" /></td>" + "\n" +
        "" + "\n" +
        "      <td class=\"content\">" + "\n" +
        "" + "\n" +
        
        "<span style=\"float: right\">"+
        "  <a title=\"Umple is led by Timothy Lethbridge, professor at the University of Ottawa. Much of the development has been by graduate students at uOttawa.\" href=\"https://www.uottawa.ca\" target=\"uottawatab\"><img height=\"20px\" src=\"files/uottawa_ver_black.png\" alt=\"University of Ottawa logo / Université d'Ottawa\" /></a>"+
        "</span>"+
        
        "      <h2><i>User Manual @@PREVNEXT@@</i></h2>"  + "\n" +
        
// Code from Google for custom search

"<script>" + "\n" +
"  (function() {" + "\n" +
"    var cx = '014719661006816508785:azyvserhylq';" + "\n" +
"    var gcse = document.createElement('script');" + "\n" +
"    gcse.type = 'text/javascript';" + "\n" +
"    gcse.async = true;" + "\n" +
"    gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;" + "\n" +
"    var s = document.getElementsByTagName('script')[0];" + "\n" +
"    s.parentNode.insertBefore(gcse, s);" + "\n" +
"  })();" + "\n" +
"</script>" + "\n" +
"<gcse:search></gcse:search>" + "\n" +

/*
"<div style=\"border:1px solid black\" id=\"cse\" style=\"width: 100%;\">Loading</div>" + "\n" +
"<script src=\"http://www.google.com/jsapi\" type=\"text/javascript\"></script>" + "\n" +
"<script type=\"text/javascript\"> " + "\n" +
"  google.load('search', '1', {language : 'en', style : google.loader.themes.V2_DEFAULT});" + "\n" +
"  google.setOnLoadCallback(function() {" + "\n" +
"    var customSearchOptions = {};  var customSearchControl = new google.search.CustomSearchControl(" + "\n" +
"      '014719661006816508785:azyvserhylq', customSearchOptions);" + "\n" +
"    customSearchControl.setResultSetSize(google.search.Search.FILTERED_CSE_RESULTSET);" + "\n" +
"    var options = new google.search.DrawOptions();" + "\n" +
"    options.setAutoComplete(true);" + "\n" +
"    customSearchControl.draw('cse', options);" + "\n" +
"  }, true);" + "\n" +
"</script>" + "\n" +
*/
        
/// End code from Google
        Template.HtmlCoreTemplate +
        "      </td>" + "\n" +
        "    </tr>" + "\n" +
        "  </tbody></table>" + 
        Template.HtmlHighlighterTemplate +
        "<script language=\"javascript\">" + "\n" +
        "@@SECTIONSTOHIDE@@" + "\n" +        
        "</script>" + "\n" +
        "</body>" + "\n" +
        "</html>";
    return template; 
  }
  
  // NEW
  private static String htmlHighlighterTemplate() {
    String template = "" +
        "<link type=\"text/css\" rel=\"stylesheet\" href=\"syntaxhighlighter/SyntaxHighlighter.css\"></link>" + "\n" +      
        "<script language=\"javascript\" src=\"syntaxhighlighter/shCore.js\"></script>" + "\n" +
        "<script language=\"javascript\" src=\"syntaxhighlighter/shBrushCSharp.js\"></script>" + "\n" +
        "<script language=\"javascript\" src=\"syntaxhighlighter/shBrushXml.js\"></script>" + "\n" +
        "<script language=\"javascript\">" + "\n" +
        "dp.SyntaxHighlighter.ClipboardSwf = 'syntaxhighlighter/clipboard.swf';" + "\n" +
        "dp.SyntaxHighlighter.HighlightAll('code');" + "\n" +
        "</script>" + "\n";
    return template;
  }
  
  // NEW
  private static String htmlCoreTemplate()
  {
    String template = "" + 
        "      <h1><font size=\"+1\">@@TITLE@@</font></h1>" + "\n" +
        "      <p class=\"description\">@@DESCRIPTION@@</p>" + "\n" +
        "" + "\n" +
        "@@EXAMPLE@@" + "\n" +
        "@@VIDEOURL@@" + "\n" +
        "@@SYNTAX@@" + "\n";
    return template;
  }
}
