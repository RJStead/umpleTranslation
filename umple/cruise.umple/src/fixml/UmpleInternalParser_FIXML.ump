
//This is a mixin feature of Umple. The Content of following class will be added automatically to core parse.
class UmpleInternalParser {
   Map<Attribute,Token> fixmlLastIntilialization = new HashMap<Attribute, Token>();
   Map<Attribute,Integer> fixmlAttributeCount = new HashMap<Attribute, Integer>();
   mixset Association {
     Map<Association,List<Token>> afixmlLastIntilialization = new HashMap<Association, List<Token>>();
     Map<Association,Integer> afixmlAttributeCount = new HashMap<Association, Integer>();
   }
//----------------------------------------------------------------------------  
//---------------------------------Start--------------------------------------
//----------------------------------------------------------------------------  

  after init {
    parser.addGrammarFile("/fixml/umple_fixml.grammar");
  } 
  
   private void analyzeFIXML(Token t, int analysisStep){
    if (analysisStep != 2)
	    {
	      shouldProcessAgain = shouldProcessAgain || (analysisStep == 1);
	      return;
	    }
	    if (t.is("fixml"))
	    {
	      analyzeFIXML(t);
	    }
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private void analyzeFIXML(Token t){
    for (Token subToken : t.getSubTokens()) {
			if (subToken.getName().equals("fixmlDefinition")) {
				analyzeFIXMLDefinition(subToken);
			}
		}
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private void analyzeFIXMLDefinition(Token t){
    for (Token subToken : t.getSubTokens()) {
			if (subToken.getName().equals("fixmlContent")) {
				analyzeFIXMLContetnt(subToken);
				//assignInitialValues(); // based-on-single-attributes
				mixset Association {
				  assignAssociationInitialValues(); // based-on-single-associations
				}
			}
		}
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private void analyzeFIXMLContetnt(Token t){
    for (Token subToken : t.getSubTokens()) {
			if (subToken.getName().equals("endContent")) {
			//	analyzeFIXMLEndContetnt(subToken);
			} else if (subToken.getName().equals("extendContent")) {
				analyzeFIXMLextendedContentContetnt(subToken);
			}
		}
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private UmpleClass analyzeFIXMLEndContetnt(UmpleClass inClass, Token t){
    UmpleClass uClass;
	  boolean available = getModel().getUmpleClass(t.getSubToken("name").getValue()) != null ? true : false;
	  if (available) {
		  uClass  = getModel().getUmpleClass(t.getSubToken("name").getValue());
	  } else {
		  uClass = new UmpleClass(t.getSubToken("name").getValue());
	  }
		for (Token subToken : t.getSubTokens()) {
			if (subToken.getName().equals("tagDefinition")) {
				analyzeFIXMLAttributes (subToken,uClass);
			}
		}
		if (! available)	getModel().addUmpleClass(uClass);
		//addAttributes(inClass, uClass,t);
		return uClass;
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private UmpleClass analyzeFIXMLextendedContentContetnt(Token t){
    String sName = t.getSubToken(1).getValue();
	  String eName = t.getSubToken(t.numberOfSubTokens()-2).getValue();  
	  if (!(sName.equals(eName))) {
		  getParseResult().addErrorMessage(new ErrorMessage(4500,t.getPosition(),t.getSubToken(1).getValue()));
	      return null;
	  }
      UmpleClass uClass;
	  boolean available = getModel().getUmpleClass(t.getSubToken("name").getValue()) != null ? true : false;
	  if (available) {
		  uClass  = getModel().getUmpleClass(t.getSubToken("name").getValue());
	  } else {
		  uClass = new UmpleClass(t.getSubToken("name").getValue());
	  }
		for (Token subToken : t.getSubTokens()) {
			if (subToken.getName().equals("tagDefinition")) {
				analyzeFIXMLAttributes (subToken,uClass);
			} else if (subToken.getName().equals("attContent")){// based-on-single-associations
				analyzeFixmlTagAttributes(subToken,uClass); 
			} else if (subToken.getName().equals("endContent")){
				UmpleClass rUClass = analyzeFIXMLEndContetnt(uClass,subToken);
				//addAttributes(uClass, rUClass,subToken); //based-on-single-attributes
				mixset addAssociation {
				  addAssociation(uClass, rUClass,subToken); // based-on-single-associations
				}
			} else if (subToken.getName().equals("extendContent")) {
				UmpleClass rUClass = analyzeFIXMLextendedContentContetnt(subToken);
				mixset Association {
				  addAssociation(uClass, rUClass,subToken); // based-on-single-associations
				}
				//addAttributes(uClass, rUClass,subToken); //based-on-single-attributes
			}
		}
		if (! available)	getModel().addUmpleClass(uClass);
	  return uClass;
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private void addAttributes(UmpleClass uClass, UmpleClass rUClass, Token mainToken){
    String type = rUClass.getName();
	  Integer index = findValidName(uClass, type,0);
	  String postLable = "";
	  if (index>0) { 
		  postLable=index.toString();
	  }
	  String name = rUClass.getName()+"_Object"+postLable;	  
	  Attribute aAttribute = new Attribute(name, type, "fixml", "", false,uClass);
	  fixmlLastIntilialization.put(aAttribute, mainToken);
	  if(index>0){	
		  if (index==1) { 
			  fixmlAttributeCount.remove(uClass.getAttribute(rUClass.getName()+"_Object"));
			  fixmlAttributeCount.put(uClass.getAttribute(rUClass.getName()+"_Object"),1);
		  }
		  fixmlAttributeCount.put(aAttribute,1);
	  } else{
		  fixmlAttributeCount.put(aAttribute,0);  
	  }
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------  
   private void assignInitialValues(){
    Map<String,String> db = new HashMap<String,String>();
	for (Attribute	aa : fixmlLastIntilialization.keySet()) {
		String value = "new "+aa.getType()+"("; //t.getSubToken(3).getValue();	
		if (fixmlAttributeCount.get(aa)==0) {
			  value = value + ")";	
			  aa.setValue(value);
		} else {
		Token rootToken = fixmlLastIntilialization.get(aa);
		for (Token subToken : rootToken.getSubTokens()) {
			if (subToken.is("tagDefinition")) {
				   String attname = subToken.getSubToken(0).getValue();
				   //String attType = "String";
				   String attValue = subToken.getSubToken(3).getValue();	
				   db.put(attname, attValue);  	
			}
		}  
	for (Attribute aAttribute : getModel().getUmpleClass(aa.getType()).getAttributes()) {
		if (db.containsKey(aAttribute.getName())){
			String attValue = db.get(aAttribute.getName());
			   if  ( isStringInteger(attValue) && aAttribute.getType().equals("Integer")) {
				  //attType="Integer";
			   } else if (isStringDuble(attValue) && aAttribute.getType().equals("Double")) {
				  //attType = "Double";
			   } else if (aAttribute.getType().equals("String")) {
				   attValue = "\""+attValue+"\"";
			   } else {
				   attValue = "\""+attValue+"\"";
			   }
			value = value + attValue+", ";
		} else {
		   if  ( aAttribute.getType().equals("Integer") ) {
			   value = value+"0"+", ";
		   } else if (aAttribute.getType().equals("Double")) {
			   value = value+"0.0"+", ";
		   } else if (aAttribute.getType().equals("String")){
			   value = value+"\"\""+", ";
		   } else {
			   if (rootToken.is("endContent")){
				   value = value+"null"+", ";   
			   } else if (!hasThisObject(rootToken,aAttribute.getType())){
				   value = value+"null"+", ";
			   } else {
				   value = value+getConstructorInConstructor(aAttribute)+", ";
			   }   
		   }
		}
		
	}		  
	  value = value.subSequence(0, value.length()-2) + ")";	
	  aa.setValue(value);
	}
	}
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private boolean hasThisObject(Token mainToken, String name){
    for (Token subToken : mainToken.getSubTokens()) {
		if (subToken.is("endContent")) {
			if (subToken.getSubToken(1).getValue().equals(name)) {
					return true;
				} else {
					return false;
				}
		} else if (subToken.is("extendContent")){
			return hasThisObject(subToken,name);
		}
	}
	return false;
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private String getConstructorInConstructor(Attribute inAttribute){
    Map<String,String> db = new HashMap<String,String>();
		String value = "new "+inAttribute.getType()+"("; //t.getSubToken(3).getValue();	
		for (Token subToken : fixmlLastIntilialization.get(inAttribute).getSubTokens()) {
			if (subToken.getName().equals("tagDefinition")) {
				   String attname = subToken.getSubToken(0).getValue();
				   //String attType = "String";
				   String attValue = subToken.getSubToken(3).getValue();
				   db.put(attname, attValue);  	
				 }
			}  
	for (Attribute aAttribute : getModel().getUmpleClass(inAttribute.getType()).getAttributes()) {
		if (db.containsKey(aAttribute.getName())){
			String attValue = db.get(aAttribute.getName());
			   if  ( isStringInteger(attValue) && aAttribute.getType().equals("Integer")) {
				  // attType="Integer";
			   } else if (isStringDuble(attValue) && aAttribute.getType().equals("Double")) {
				   //attType = "Double";
			   } else if (aAttribute.getType().equals("String")) {
				   attValue = "\""+attValue+"\"";
			   } else {
				   attValue = "\""+attValue+"\"";
			   }
			value = value + attValue+", ";
		} else {
		   if  ( aAttribute.getType().equals("Integer") ) {
			   value = value+"0"+", ";
		   } else if (aAttribute.getType().equals("Double")) {
			   value = value+"0.0"+", ";
		   } else if (aAttribute.getType().equals("String")){
			   value = value+"\"\""+", ";
		   } else if (aAttribute.getType()!="") {
			   value = value+getConstructorInConstructor(aAttribute)+", ";
		   } else {
			   
		   }
		}
		
	}		  
	  value = value.subSequence(0, value.length()-2) + ")";	
	  return value;
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private Integer findValidName(UmpleClass uClass, String type, Integer index){
    String name= type + "_Object";
	if ( index == 0 ) {
	} else {
		name = name + index.toString();
	}
	for (Attribute attribute : uClass.getAttributes()) {
		if (attribute.getType().equals(type)) {
			if (attribute.getName().equals(name)){
				return findValidName (uClass,type,index+1);
			}
		}
	}
	return index;
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private void analyzeFIXMLAttributes(Token t, UmpleClass uClass){
    String name = t.getSubToken(0).getValue();
    boolean available = uClass.getAttribute(name) != null ? true : false;
    if (!available) {
        String type = "String";
        String value = t.getSubToken(3).getValue();
	    if  ( isStringInteger(value) ) {
	    	type="Integer";
	    } else if (isStringDuble(value)) {
	    	type = "Double";
	    } else {
	    	value = "\""+value+"\"";
	    }		
		uClass.addAttribute(name, type, "fixml", value, false);    	
    }
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
  private void analyzeFixmlTagAttributes(Token t, UmpleClass uClass) {
	    String name = t.getSubToken(1).getValue();
	    boolean available = uClass.getAttribute(name) != null ? true : false;
	    if (!available) {
	        String type = "String";
	        String value = t.getSubToken(3).getValue();
		    if  ( isStringInteger(value) ) {
		    	type="Integer";
		    } else if (isStringDuble(value)) {
		    	type = "Double";
		    } else {
		    	value = "\""+value+"\"";
		    }		
			uClass.addAttribute(name, type, "fixml", value, false);    	
	    }
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
mixset Association {
   private void addAssociation(UmpleClass uClass, UmpleClass rUClass, Token mainToken){
    Multiplicity m = new Multiplicity();
		Association aAss = getModel().getAssociation(rUClass.getName()+"_Object");
		if ( aAss != null) {			
			Integer bound = Integer.parseInt(getModel().getAssociation(rUClass.getName()+"_Object").getEnd(1).getMultiplicity().getBound());
			bound++;
			m.setBound( bound.toString());
			getModel().getAssociation(rUClass.getName()+"_Object").getEnd(1).setMultiplicity(m);
			for (AssociationVariable yourAs : uClass.getAssociationVariables()) {
				if (yourAs.getName().equals(rUClass.getName()+"_Object")) {
					yourAs.setMultiplicity(m);
				}
			}
		    List <Token> listOfToken = afixmlLastIntilialization.get(aAss);
		    listOfToken.add(mainToken);
		    afixmlLastIntilialization.put(aAss, listOfToken);
			
		} else {
			m.setBound("1");
			AssociationEnd leftEnd = new AssociationEnd(uClass.getName()+"_Object",uClass.getName(), "",uClass.getName(), m);
			AssociationEnd rightEnd = new AssociationEnd(rUClass.getName()+"_Object",rUClass.getName(), "",rUClass.getName(), m);		
			Association aAssociation = new Association(false, true,false,false,leftEnd,rightEnd);
			aAssociation.setName(rUClass.getName()+"_Object");
			getModel().addAssociation(aAssociation);	    
			AssociationEnd myEnd = aAssociation.getEnd(0);
		    AssociationEnd yourEnd = aAssociation.getEnd(1);
		    AssociationVariable myAs = new AssociationVariable(myEnd.getRoleName(),myEnd.getClassName(),myEnd.getModifier(),null,myEnd.getMultiplicity(),aAssociation.getIsLeftNavigable());
                    myAs.setIsComposition(aAssociation.getIsLeftComposition());
		    AssociationVariable yourAs = new AssociationVariable(yourEnd.getRoleName(),yourEnd.getClassName(),yourEnd.getModifier(),null,yourEnd.getMultiplicity(),aAssociation.getIsRightNavigable());
                    yourAs.setIsComposition(aAssociation.getIsRightComposition());

		    myAs.setRelatedAssociation(yourAs);
		    boolean added = uClass.addAssociationVariable(yourAs);
		    if (added)
		    {
		      unlinkedAssociationVariables.add(yourAs);
		      uClass.addAssociation(aAssociation);
		    }
		    List <Token> listOfToken = new ArrayList<>();
		    listOfToken.add(mainToken);
		    afixmlLastIntilialization.put(aAssociation, listOfToken);
		}
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private void assignAssociationInitialValues(){
    String value = "";
	for (Association	aa : getModel().getAssociations()) {
		UmpleClass mainClass = getModel().getUmpleClass(aa.getEnd(0).getClassName());
		UmpleClass uClass = getModel().getUmpleClass(aa.getEnd(1).getClassName());
		if (Integer.parseInt(aa.getEnd(1).getMultiplicity().getBound()) >1) {
			for (Token rootToken : afixmlLastIntilialization.get(aa)) {
				value = "new "+uClass.getName()+"(";
				Map<String,String> db = new HashMap<String,String>();
				for (Token subToken : rootToken.getSubTokens()) {
					if (subToken.is("tagDefinition")) {
						   String attname = subToken.getSubToken(0).getValue();
						   //   String attType = "String";
						   String attValue = subToken.getSubToken(3).getValue();	
						   db.put(attname, attValue);  	
					}
				}			
				for (Attribute aAttribute : uClass.getAttributes()) {
					if (db.containsKey(aAttribute.getName())){
						String attValue = db.get(aAttribute.getName());
						   if  ( isStringInteger(attValue) && aAttribute.getType().equals("Integer")) {
							  // attType="Integer";
						   } else if (isStringDuble(attValue) && aAttribute.getType().equals("Double")) {
							   //attType = "Double";
						   } else if (aAttribute.getType().equals("String")) {
							   attValue = "\""+attValue+"\"";
						   } else {
							   attValue = "\""+attValue+"\"";
						   }
						value = value + attValue +", ";
					} else {
					   if  ( aAttribute.getType().equals("Integer") ) {
						   value = value+"0"+", ";
					   } else if (aAttribute.getType().equals("Double")) {
						   value = value+"0.0"+", ";
					   } else if (aAttribute.getType().equals("String")){
						   value = value+"\"\""+", ";
					   }
					}	
				}
				
				for (Association aAssociation : uClass.getAssociations()) {
					List<Token> aToken = afixmlLastIntilialization.get(aAssociation);
					if (aToken.size() >1) {

					} else {
						if (!hasThisObject(rootToken,aAssociation.getEnd(1).getClassName())) {
							 value = value+"null"+", ";
						} else {
							value = value+getAssociationConstructorInConstructor(aAssociation.getEnd(1).getClassName(),aToken.get(0))+", ";
						}
					}
				}
				
				value = value.subSequence(0, value.length()-2) + ")";
				String valueG = aa.getEnd(1).getRoleName()+".add("+value+");";	
				String valuep= "$this->"+aa.getEnd(1).getRoleName()+"[] = "+value+";";
				CodeBlock cb1 = new CodeBlock();
				cb1.setCode("", valueG);
				cb1.setCode("Php", valuep);
				CodeInjection injection = new CodeInjection("after","emptyConstructor",cb1,mainClass);
				mainClass.addCodeInjection(injection);
			}
		} else {
			value = "new "+uClass.getName()+"(";
			value = value+")"; //t.getSubToken(3).getValue();
			value = "set"+aa.getEnd(1).getRoleName()+"("+value+");";
			CodeInjection injection = new CodeInjection("after","emptyConstructor",value,mainClass);
			mainClass.addCodeInjection(injection);
		}

	}
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private String getAssociationConstructorInConstructor(String inName, Token inToken){	  
    Map<String,String> db = new HashMap<String,String>();
		String value = "new "+inName+"("; //t.getSubToken(3).getValue();	
		for (Token subToken : inToken.getSubTokens()) {
			if (subToken.getName().equals("tagDefinition")) {
				   String attname = subToken.getSubToken(0).getValue();
				   //String attType = "String";
				   String attValue = subToken.getSubToken(3).getValue();
				   db.put(attname, attValue);  	
				 }
			}  
	for (Attribute aAttribute : getModel().getUmpleClass(inName).getAttributes()) {
		if (db.containsKey(aAttribute.getName())){
			String attValue = db.get(aAttribute.getName());
			   if  ( isStringInteger(attValue) && aAttribute.getType().equals("Integer")) {
				  // attType="Integer";
			   } else if (isStringDuble(attValue) && aAttribute.getType().equals("Double")) {
				   //attType = "Double";
			   } else if (aAttribute.getType().equals("String")) {
				   attValue = "\""+attValue+"\"";
			   } else {
				   attValue = "\""+attValue+"\"";
			   }
			value = value + attValue+", ";
		} else {
		   if  ( aAttribute.getType().equals("Integer") ) {
			   value = value+"0"+", ";
		   } else if (aAttribute.getType().equals("Double")) {
			   value = value+"0.0"+", ";
		   } else if (aAttribute.getType().equals("String")){
			   value = value+"\"\""+", ";
		   }
		}
		
	}		  
	for (Association aAssociation : getModel().getUmpleClass(inName).getAssociations()) {
		List<Token> aToken = afixmlLastIntilialization.get(aAssociation);
		if (aToken.size() >1) {

		} else {
			if (!hasThisObject(inToken,aAssociation.getEnd(1).getClassName())) {
				 value = value+"null"+", ";
			} else {
				value = value+getAssociationConstructorInConstructor(aAssociation.getEnd(1).getClassName(),aToken.get(0));
			}
		}
	}
	  value = value.subSequence(0, value.length()-2) + ")";	
	  return value;
   }
}
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private boolean isStringInteger(String s){
    try { 
	    	Integer.parseInt(s); 
	    } catch(NumberFormatException e) { 
	        return false; 
	    }
	    return true;
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private boolean isStringDuble(String s){
    try { 
	    	Double.parseDouble(s);
	    } catch(NumberFormatException e) { 
	        return false; 
	    }
	    return true;
   }
}
