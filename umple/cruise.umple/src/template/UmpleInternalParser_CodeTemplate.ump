/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

Please refer to UmpleInternalParser.ump for more details.

*/

//@author Ahmed M.Orabi {@link ahmedvc@hotmail.com}
//@author Mahmoud M.Orabi {@link mahmoud_3rabi@hotmail.com}
namespace cruise.umple.compiler;

//log analysis errors
interface AnalysisErrorStub {
	void logError();
}

//Analyze call
interface AnalysisStub {
	isA AnalysisErrorStub;
	Boolean analyze();
}

//The stubs for the tokens to be analyzed
interface TokenAnalysisStub {
	isA AnalysisStub;
	String getValue();
	void setValue(String str);
}

//Abstraction for task parser to be analyzed.
class AnalysisParserTask {
	isA AnalysisStub;
	abstract;
  
  depend cruise.umple.compiler.Parser;
  depend cruise.umple.parser.Token;
  depend cruise.umple.parser.ErrorMessage;
  
	Parser parser;
	Token token; 
	Integer errorCode;
	String errMsg;
	void logError() {
    	parser.getParseResult().setPosition(token.getPosition());
    	parser.getParseResult().addErrorMessage(new ErrorMessage(errorCode,token.getPosition(),errMsg));
	}
}

external Exception
{
  message;
  Exception parent;
}

/*
 class TemplateException {
	isA Exception;
	Token token;
	Integer errorCode;
	String errMsg;
	
	public TemplateException(Token aToken, int aErrorCode, String aErrMsg, Exception ex) {
    	super(aErrMsg, ex);
    	token = aToken;
    	errorCode = aErrorCode;
    	errMsg = aErrMsg;
  	}
  	public TemplateException(Token aToken, int aErrorCode, String aErrMsg) {
    	super(aErrMsg, null);
    	token = aToken;
    	errorCode = aErrorCode;
    	errMsg = aErrMsg;
  	}
}
 * */


class TemplateException {
  depend cruise.umple.parser.Token;
  depend cruise.umple.parser.Position;
  depend cruise.umple.parser.ErrorMessage;
	isA Exception;
	Position position;
	ErrorMessage errorMessage;
	
	public TemplateException(Position aPosition, ErrorMessage aErrorMessage) {
	    super("", null);
	    position = aPosition;
	    errorMessage = aErrorMessage;
	 }
}

//Parse existing attributes in a template
class TemplateAttributeParser {
	depend java.io.InputStream;
	depend java.util.ArrayList;
	depend java.util.List;
	depend java.io.IOException;
  depend cruise.umple.parser.Position;
  depend cruise.umple.parser.Token;
  depend cruise.umple.parser.ErrorMessage;
	
	UmpleInternalParser parser;
	String className;
	String templateName;	
	Token rootToken;
	0..1 -- * TemplateElement elements;
	0..1 -- * TemplateField fields;
	
	String[] parameterNames;
	
	const String TEMPLATE_END_TAG="endTag";
	const String TEMPLATE_COMMENT="templateComment";
	const String TEMPLATE_EXPRESSION="templateExpression";
	const String TEMPLATE_TEXT="templateText";
	const String TEMPLATE_CODEBLOCK="templateCodeBlock";
	const String TEMPLATE_INCLUDE="templateInclude";
	const String IDENT = "indent";
	const String TEXT="Text";
	
	lazy EmitResponse emisionContent; 
	
	TemplateElement analyzeExpression(Token token)
	{
	  ExpressionElement element = new ExpressionElement(token.getPosition(), "");
	  for(Token subToken: token.getSubTokens())
	  {
		if(subToken.is("templateExpressionContent"))
		{
		  String expression = subToken.getValue().trim();
		  if(parameterNames.contains(expression))
		  {
		    element.addSubElement(new VariableElement(token.getPosition(), "",indexOfParameterName(expression)));
		  }
		  else
		  {
		    element.addSubElement(new ExpressionElement(token.getPosition(), expression));
		  }		      
		}
		else if(subToken.is("templateExpression"))
		{
		  element.addSubElement(analyzeExpression(subToken));
		}
	  }		  
	  return element;
	}
	
	public boolean parse() {
	  elements.clear();
      emisionContent = new EmitResponse();
	  int tokenIdx = 0;
	  TemplateElement lastElement = null;
	  for(Token token:rootToken.getSubTokens()){	    
		if(token.is(TEMPLATE_EXPRESSION))
		{
		  lastElement= analyzeExpression(token);
		  addElement(lastElement);
		  tokenIdx++;
		} 
		else if(token.is(TEMPLATE_CODEBLOCK))
		{
		  CodeBlockElement element = new CodeBlockElement(token.getPosition(), "");
		  if(lastElement != null && !(lastElement instanceof CodeBlockElement)) {
		  		String text = lastElement.getContent();
		  		text = Utils.trimTemplateBlockEndNewLine(text);
		  		lastElement.setContent(text);
		  }
		  for(Token subToken: token.getSubTokens())
		  {
		    if(subToken.is("templateLanguageCode"))
		    {
		      element.addSubElement(new TextElement(subToken.getPosition(), subToken.getValue()));		      
		    }
		    else if(subToken.is("templateExpression"))
		    {
		      element.addSubElement(analyzeExpression(subToken));
		    }
		  }
		  lastElement= element;
		  addElement(element);
		  tokenIdx++;
		}
		else if(token.is(TEMPLATE_INCLUDE)) 
		{
			Token templateRefToken = token.getSubToken(TEMPLATE_INCLUDE).getSubToken("templateName");
			if(templateRefToken != null) {
			    String className = getClassName();
				String key = templateName;
				String refClassname = templateRefToken.getValue("classname");
				if(refClassname == null || refClassname.length() ==0) {
					refClassname = getClassName();
				}
				String refKey = templateRefToken.getValue("name");
				TemplateName refTemplateName = new TemplateName(refKey,refClassname);
				String refTemplateFullName = refKey;
				if(refClassname != null && refClassname.length() > 0) {
					refTemplateFullName = refClassname + "." + refTemplateFullName;
				}
				String templateFullName = key;
				if(className != null && className.length() > 0) {
					templateFullName = className + "." + templateFullName;
				}
				if(templateFullName.equals(refTemplateFullName)) {
					parser.getParseResult().setPosition(templateRefToken.getPosition());
					parser.getParseResult().addErrorMessage(new ErrorMessage(3503,templateRefToken.getPosition(),templateName));
				} else {
				    lastElement= new IncludeTemplateElement(token.getPosition(), "", refTemplateName);
					addElement(lastElement);
				}
			}
			tokenIdx++;
		} 
		else if(token.is(TEMPLATE_COMMENT)) 
		{
		  lastElement= new CommentElement(token.getPosition(), token.getSubToken(TEMPLATE_COMMENT).getValue("templateCommentContent")); 
		  addElement(lastElement);
		  tokenIdx++;
		} 
		else if(token.is(TEMPLATE_TEXT)) 
		{
		  String text = token.getSubToken(TEMPLATE_TEXT).getValue("templateTextContent");		    
		  if(!"".equals(text)){
		    /*if(tokenIdx == 0) {
		    	text = Utils.trimTemplateBlockBeginigNewLine(text);
		    }
		    if(numberOfElements() > 0) {
		  		TemplateElement lastElement = getElement(numberOfElements() - 1);
		  		if(lastElement instanceof CodeBlockElement) {
		  			text = Utils.trimTemplateBlockBeginigNewLine(text);		  		
		  		}
		  	}*/
		  	lastElement= new TextElement(token.getPosition(),text);
		    addElement(lastElement);
		    tokenIdx++;
		  }
		}
	  }
	  if(numberOfElements() > 0) {
		  if(lastElement instanceof TextElement) {
			  String text = lastElement.getContent();
			  //text = Utils.trimTemplateBlockEndNewLine(text);
			  lastElement.setContent(text);
		  }	  
	  }
	  return true;
	}
	
	void setVariableElements(TemplateElement parent, TemplateMethodBlock methodBlock)
	{
	  if(parent instanceof VariableElement && methodBlock!=null)
	  {
	    VariableElement element = ((VariableElement)parent);
	    int index = element.getIndex();
	    element.setContent(methodBlock.getParameter(index));       
	  }
	  for(TemplateElement element: parent.getSubElements())
	  {
	    setVariableElements(element,methodBlock);
	  }
	} 
    
    EmitResponse getEmissionResponse(UmpleClass currentTemplate, TemplateMethodBlock methodBlock)
    {	  
      emisionContent = new EmitResponse();
	  for (TemplateElement templateElement : elements)
	  {	  
	    setVariableElements(templateElement,methodBlock);  
	    try {
			templateElement.emit(emisionContent,currentTemplate);
		} catch (TemplateException e) {
			parser.getParseResult().setPosition(e.getPosition());
			parser.getParseResult().addErrorMessage(e.getErrorMessage());
		}
	    
	  }
	  return emisionContent;
	}
}


//Used as a helper class to analyze tokens in a given template
class TemplateTokenAnalyzer {
	depend java.io.ByteArrayInputStream;
	depend java.io.IOException;
	depend java.io.InputStream;
	depend java.util.HashMap;
	depend java.util.Map;
	depend java.util.regex.Pattern;
  depend cruise.umple.parser.Position;
  depend cruise.umple.parser.Token;
  depend cruise.umple.parser.ErrorMessage;

	UmpleInternalParser parser;
	lazy UmpleClass currentTemplate;
	0..1 -- * UmpleClass templates;
	
	HashMap<String,Boolean> templateAttributes = new HashMap<String,Boolean>();
	HashMap<String,Boolean> emitMethods = new HashMap<String,Boolean>();
	
	void prepare(final Token token) {
		String templateName = token.getValue("name");
		/*
		AnalysisTaskExecuter.run(new AnalysisParserTask(parser,token,3500, templateName ) {
    		public Boolean analyze() {
    			if(!Token.isValidIdentifier(token.getValue("name"))){
    				return false;
    			}
    			return true;
    		}    		
    	});
    	*/
		templateAttributes.clear();
		emitMethods.clear();
    	currentTemplate = parser.getModel().getUmpleClass(templateName);
    	if(currentTemplate != null) {
    		addTemplate(currentTemplate);
    	} 
	}
	
	EmitResponse getEmisionString(UmpleClass template, TemplateMethodBlock [] templates) {
	  EmitResponse em = new EmitResponse();
	  if(templates.length == 0 || templates[0].getTemplate().getName().equalsIgnoreCase("*"))
	  {
		for(String key : template.getTemplateEmitStringMap().keySet())
		{
		  EmitResponse val = template.getTemplateEmitStringMap().get(key).getEmissionResponse(template, null);
		  em.getJavaCode().append(val.getJavaCode());
		  em.getCppCode().append(val.getCppCode());	
	    }
	  }
	  else
	  {
		for(TemplateMethodBlock fld : templates)
		{
		  String key = fld.getTemplate().getName();
		  UmpleClass referenceTemplate = fld.getTemplate().getClassName()==null?template:template.getSourceModel().getUmpleClass(fld.getTemplate().getClassName());
		  TemplateAttributeParser val = null;
		  if(referenceTemplate!=null)
		  {
		    val = referenceTemplate.getTemplateEmitStringMap().get(key);
		  }
		  
		  if(val != null && referenceTemplate !=null)
		  {
		    EmitResponse response = val.getEmissionResponse(template,fld);
		    em.getJavaCode().append(response.getJavaCode());
		  	em.getCppCode().append(response.getCppCode());	
		  } 
		  else
		  { 
			String classname = fld.getTemplate().getClassName();
			if(classname == null || classname.length() ==0 ) {
				classname = template.getName();
			}
			parser.getParseResult().setPosition(fld.getPosition());
			parser.getParseResult().addErrorMessage(new ErrorMessage(3502,fld.getPosition(),classname+"."+key));
		  }
		}
	  }
	  return em;
    }
    
    TemplateName analyzeTemplateName(Token token)
    {
      if(token!=null)
      {        
        String classname = token.getValue("classname");
		String key = token.getValue("name");
		if(classname == null || classname.length() ==0) {
			classname = currentTemplate.getName();
		}
        TemplateName templateName = new TemplateName(key,classname);
        
        if(!Token.isValidIdentifier(templateName.getName())) {
			parser.getParseResult().setPosition(token.getPosition());
			parser.getParseResult().addErrorMessage(new ErrorMessage(3500,token.getPosition(),templateName.getName()));
		}
        
	  	Token templateParameters = token.getSubToken("templateParameters");
	  	if(templateParameters!=null)
		{
          for(Token parameterNameToken: templateParameters.getSubTokens())
		  {
		    if(parameterNameToken.is("parameter"))
		    {
		      templateName.addParameter(parameterNameToken.getValue());
		    }
		  }
		}
        return templateName;
      }
      else
      {
        return null;
      }
    }
	
	void analyzeEmission(final Token token) {
		Token nameToken = token.getSubToken("templateName");
        TemplateName templateNameObject = analyzeTemplateName(nameToken);
	  	String templateName = templateNameObject.getName();
	  	Token templateContent = token.getSubToken("templateAttribute");
	  	if(templateAttributes.containsKey(templateName)) {
	  		parser.getParseResult().setPosition(nameToken.getPosition());
			parser.getParseResult().addErrorMessage(new ErrorMessage(3506,nameToken.getPosition(),currentTemplate.getName(),templateName));
	  	}
	  	templateAttributes.put(templateName, true);
		TemplateAttributeParser emitter = new TemplateAttributeParser(parser, currentTemplate.getName(), templateName, templateContent);
		for(String parameter: templateNameObject.getParameters())
		{
		  emitter.addParameterName(parameter);			  		  
		}
		emitter.parse();
		currentTemplate.getTemplateEmitStringMap().put(templateNameObject.getName(), emitter);  		
	  	
	}
	
	void analyzeEmitMethodDeclarator(Token token) {
		Method aMethod = new Method("","","",false);
		TemplateMethod tMethod = new TemplateMethod(aMethod);
    	aMethod.setPosition(token.getPosition());
    	aMethod.setEndPosition(token.getEndPosition());
		
    	for(Token emitToken : token.getSubTokens()) {
    		if (emitToken.is("modifier")) {
    			aMethod.setModifier(emitToken.getValue());
    		}
    		if (emitToken.is("templateName")) {
    	      TemplateName templateNameObject = analyzeTemplateName(emitToken);
			  if(templateNameObject != null) {
				String templateNameValue = templateNameObject.getName(); 
				TemplateMethodBlock templateMethodBlock = new TemplateMethodBlock(emitToken.getSubToken("name").getPosition(),templateNameObject);
				for(String parameter:templateNameObject.getParameters())
				{
				  templateMethodBlock.addParameter(parameter);
				}
				tMethod.addTemplate(templateMethodBlock);
			  }
			}
    		if (emitToken.is("methodDeclarator")) {
    			for(Token methodToken : emitToken.getSubTokens())
    			{
    				if (methodToken.is("methodName"))
    				{
    					String mName = methodToken.getValue();
    					aMethod.setName(mName);
    					aMethod.setType("String");
    					
    					if(emitMethods.containsKey(mName)) {
    				  		parser.getParseResult().setPosition(methodToken.getPosition());
    						parser.getParseResult().addErrorMessage(new ErrorMessage(3507,methodToken.getPosition(),currentTemplate.getName(),mName));
    				  	}
    					emitMethods.put(mName, true);
    				  	
    					if (methodToken.getValue().equals("main"))
    					{
    						parser.getParseResult().setPosition(methodToken.getPosition());
    						parser.getParseResult().addErrorMessage(new ErrorMessage(3501,token.getPosition()));
    					}
    				}
    				if (methodToken.is("parameterList"))
    				{
    					for(Token parameterToken : methodToken.getSubTokens())
    					{
    						boolean isList = false;
    						if (parameterToken.is("parameter"))
    						{
    							String paramType="";
    							if (parameterToken.getSubToken("type") != null)
    							{
    								paramType = parameterToken.getSubToken("type").getValue();
    							}
    							if (parameterToken.getSubToken("list") != null)
    							{
    								isList = parameterToken.getSubToken("list").getValue() != null;        
    							}	

    							String paramName = parameterToken.getSubToken("name").getValue();
    							MethodParameter aParameter  = new MethodParameter(paramName,paramType,null,null, false);
    							aParameter.setIsList(isList);
    							aMethod.addMethodParameter(aParameter);
    						}
    					}
    				}
    			}
    		}
    	}
    	currentTemplate.addEmitMethod(tMethod);
  	}
	
	
	void analyze(final Token token) {
		// Validated in other class analysis passes 
		/*
		template.addPosition(token.getPosition());
    	template.addEndPosition(token.getEndPosition());
    	
    	AnalysisTaskExecuter.run(new AnalysisParserTask(parser,token,0, "Unable to make template abstract!") {  
    		public Boolean analyze() {
    			if(token.getValue("abstract") != null) {
    				return template.setIsAbstract(true);
    			}
    			return true;
    		}    		
    	});
    	AnalysisTaskExecuter.run(new AnalysisParserTask(parser,token,0, "Unable to make template singleton!") { 
    		public Boolean analyze() {
    			if(token.getValue("singleton") != null) {
    				return template.setIsSingleton(true);
    			}
    			return true;
    		}    		
    	});
    	AnalysisTaskExecuter.run(new AnalysisParserTask(parser, token,14, token.getName()) { 
    		public Boolean analyze() {
    			if(token.getValue("immutable") != null) {
    				return template.setImmutable();
    			}
    			return true;
    		}    		
    	});
      	*/
    	
	}
	
	String emit createSpaceStringMethodBody(String lang)(createSpaces);
	createSpaces <<!<<#if(lang.equalsIgnoreCase("Java")) {#>>
	StringBuilder spaces =  new StringBuilder();
    	for(int i=0; i <numSpaces; i++) {
      		spaces.append(" ");
    	}
    	return spaces.toString();
    <<#} else if(lang.equalsIgnoreCase("Cpp")) {#>>
	string spaces = "";
    	for(int i=0; i <numSpaces; i++) {
      		spaces+= " ";
    	}
    	return spaces;
    <<#}#>>!>>
	
	void initializeCreateSpaceMethod(UmpleClass template, Method placeHolderMth) {	  
	  Method aMethod = new Method("","","",false);
      aMethod.setModifier("private");    	 
      aMethod.setName("_createSpacesString");
      aMethod.setType("String");
      
      aMethod.setPosition(placeHolderMth.getPosition());
      aMethod.setEndPosition(placeHolderMth.getEndPosition());
      
      MethodParameter spacesParameter = new MethodParameter("numSpaces","int",null,null, false);
      spacesParameter.setIsList(false);
      aMethod.addMethodParameter(spacesParameter);
      CodeBlock cb = new CodeBlock();
      cb.setCode("Java", createSpaceStringMethodBody("Java"));
	  cb.setCode("Cpp", createSpaceStringMethodBody("Cpp"));
	  MethodBody methBody = new MethodBody(cb);
	  aMethod.setMethodBody(methBody);
      template.addMethod(aMethod);
	}
		
	void initializeNL(UmpleClass template) {
	  if(template.getAttribute(Utils.getLineSeparator()) == null) {
		  CodeBlock cb = new CodeBlock();
		  cb.setCode("Java", Utils.getLineSeparatorValue("Java"));
		  cb.setCode("Cpp", Utils.getLineSeparatorValue("Cpp"));
		  Attribute aField = new Attribute(Utils.getLineSeparator(),"String","const","",false,template);
		  aField.setCodeblock(cb);
		  template.addAttribute(aField);
	  }
	}
	
	String createSecondaryMethod(UmpleClass template,Method mth, EmitResponse emitResp) {
		String methodName = "_"+mth.getName();
		StringBuilder paramSignature = new StringBuilder("0,sb");
		Method aMethod = new Method("","","",false);
    	aMethod.setPosition(mth.getPosition());
    	aMethod.setEndPosition(mth.getEndPosition());
    	aMethod.setModifier(mth.getModifier());
    	 
    	aMethod.setName(methodName);
    	aMethod.setType("StringBuilder");
    	
    	MethodParameter numSpaceParameter = new MethodParameter("numSpaces","Integer",null,null, false);
    	numSpaceParameter.setIsList(false);
    	
    	aMethod.addMethodParameter(numSpaceParameter);
    	
    	MethodParameter stringBuilderParameter  = new MethodParameter("sb","StringBuilder",null,null, false);
    	stringBuilderParameter.setIsList(false);
    	
    	aMethod.addMethodParameter(stringBuilderParameter);
    	
    	for( MethodParameter aParameter : mth.getMethodParameters()) {
    		MethodParameter param  = new MethodParameter(aParameter.getName(),aParameter.getType(),null,null, false);
    		param.setIsList(aParameter.getIsList());
    		aMethod.addMethodParameter(param);
    		paramSignature.append(",");
    		paramSignature.append(aParameter.getName());
    	}
    	

		CodeBlock cb = new CodeBlock();
		cb.setCode("Java", Utils.getMethodTemplateFormatter("Java").getSecondaryEmitMethodBody(emitResp));
        cb.setCode("Cpp", Utils.getMethodTemplateFormatter("Cpp").getSecondaryEmitMethodBody(emitResp));
            
		MethodBody methBody = new MethodBody(cb);
		aMethod.setMethodBody(methBody);
		template.addMethod(aMethod);
		return paramSignature.toString(); 
	}

	private boolean recursiveIncludeTemplateElementCycleCheck(UmpleClass template, TemplateAttributeParser ref, HashMap<String, Boolean> map){
		boolean ret = true;
		if(map == null) {
			map = new HashMap<String,Boolean>();
		}
		for (TemplateElement templateElement : ref.getElements()) {
			if(templateElement instanceof IncludeTemplateElement) {
				IncludeTemplateElement incElm = (IncludeTemplateElement) templateElement; 
				String classname = incElm.getTemplateName().getClassName();
				String refName = incElm.getTemplateName().getName();
				if(classname == null || classname.length() == 0) {
					classname = template.getName();
				}
				String key = classname + "." + refName;
				UmpleClass referenceTemplate = incElm.getTemplateName().getClassName()==null?template:template.getSourceModel().getUmpleClass(classname);
				if(referenceTemplate != null) {

					TemplateAttributeParser refValue = null;
					if(referenceTemplate!=null)
					{
						refValue = referenceTemplate.getTemplateEmitStringMap().get(refName);
					}
					if(refValue == null) {
						parser.getParseResult().setPosition(incElm.getPosition());
						parser.getParseResult().addErrorMessage(new ErrorMessage(3504, incElm.getPosition(),key));
					} else {
						if(map.containsKey(key))
							return false;
						map.put(key, true);
						ret = recursiveIncludeTemplateElementCycleCheck(referenceTemplate, refValue, map);
						if(!ret)
							break;
						map.remove(key);
					}
				}
			}

		}	
		return ret;
	}


	private boolean recursiveCycleCheck(UmpleClass template){
		boolean ret = true;
		for(TemplateMethod tMth : template.getEmitMethods()) {
			for(TemplateMethodBlock fld : tMth.getTemplates())
			{
				String name = fld.getTemplate().getName();
				UmpleClass parentTemplate = fld.getTemplate().getClassName()==null?template:template.getSourceModel().getUmpleClass(fld.getTemplate().getClassName());
				String key = parentTemplate.getName() + "." + name;
				TemplateAttributeParser val = null;
				if(parentTemplate!=null)
				{
					val = parentTemplate.getTemplateEmitStringMap().get(name);
				}
				if(val != null && parentTemplate !=null)
				{
					for (TemplateElement templateElement : val.getElements()) {
						if(templateElement instanceof IncludeTemplateElement) {
							IncludeTemplateElement incElm = (IncludeTemplateElement) templateElement; 
							String classname = incElm.getTemplateName().getClassName();
							String refName = incElm.getTemplateName().getName();
							UmpleClass referenceTemplate = incElm.getTemplateName().getClassName()==null?parentTemplate:parentTemplate.getSourceModel().getUmpleClass(classname);
							String refKey = referenceTemplate.getName() + "." + refName;

							TemplateAttributeParser refValue = null;
							if(referenceTemplate!=null)
							{
								refValue = referenceTemplate.getTemplateEmitStringMap().get(refName);
							}

							HashMap<String, Boolean> map = new HashMap<String,Boolean>();
							map.put(key, true);
							
							if (refValue != null)
							{
								boolean check = recursiveIncludeTemplateElementCycleCheck(referenceTemplate, refValue, map);
								
								if(!check) {
									parser.getParseResult().setPosition(incElm.getPosition());
									parser.getParseResult().addErrorMessage(new ErrorMessage(3505,incElm.getPosition(),name,refKey));
									ret = false;
								}
							}
						}
					}	
				} 			  
			}
		}
		return ret;
	}

	// Analyzer Events
	void done() {
	
		for(UmpleClass template : getTemplates()) {
			if(!recursiveCycleCheck(template))
				continue;
			String defaultGenerate = this.getParser().getModel().getDefaultGenerate();
			if(template.numberOfEmitMethods() > 0) {
				TemplateMethod tMth = template.getEmitMethod(0);
				Method mth = tMth.getMethod();
				initializeCreateSpaceMethod(template, mth);
				if(defaultGenerate == null 
					|| "Java".equalsIgnoreCase(defaultGenerate)) {
					template.addDepend(new Depend("java.util.regex.Pattern"));
				}
			}
			
			for(TemplateMethod tMth : template.getEmitMethods()) {
				Method mth = tMth.getMethod();
				EmitResponse emitResp = getEmisionString(template, tMth.getTemplates());
			
				String params = createSecondaryMethod(template, mth, emitResp);
				String primaryMethodName = "_"+mth.getName();
				        	    
        	    CodeBlock cb = new CodeBlock();
        	    
				cb.setCode("Java", Utils.getMethodTemplateFormatter("Java").getPrimaryEmitMethodBody(primaryMethodName, params));
        	    cb.setCode("Cpp", Utils.getMethodTemplateFormatter("Cpp").getPrimaryEmitMethodBody(primaryMethodName, params));            
				MethodBody methBody = new MethodBody(cb);
				mth.setMethodBody(methBody);
				template.addMethod(mth);
			}
			if(template.numberOfTemplateFields() > 0) {
				initializeNL(template);
			}
			for(TemplateField fld : template.getTemplateFields()) {
				CodeBlock cb = new CodeBlock();
    			cb.setCode("Java", fld.getValue().getJavaCode().toString());
	    		cb.setCode("Cpp", fld.getValue().getCppCode().toString());
				Attribute aField = new Attribute(fld.getName(),"String","const","",false,template);
				aField.setCodeblock(cb);
				template.addAttribute(aField);
			}
		}
	}
}

//Walk through template tree while analyzing template tokens
interface IAnalysisWalker {
    void accept(TemplateTokenAnalyzer analyzer);
}

//Walk through definition tree while analyzing template tokens
class TemplateDefinitionWalker {
	depend java.util.List;
  depend cruise.umple.parser.Token;
	isA IWalker;
	UmpleInternalParser parser;
	
	lazy Token rootToken;
	lazy int rootAnalysisStep;
	lazy internal TemplateTokenAnalyzer templateAnalyzer;
	Boolean reAnalyze = false;
	after constructor {
		templateAnalyzer = new TemplateTokenAnalyzer(parser);
	}
	
    void accept(TemplateTokenAnalyzer analyzer) {
    	if (rootToken.is("classDefinition")) {  // aka "templateDefinition"
    		analyzer.prepare(rootToken);
    		analyzer.analyze(rootToken);
    	}
    	analyzeSubTokens(rootToken, analyzer);
    }
    
    void done() {
    	templateAnalyzer.done();
    }
    
    private void analyzeToken(Token aToken, TemplateTokenAnalyzer analyzer, int analysisStep){
    	if (analysisStep != 2) {
    		parser.reAnalyze(parser.reAnalyze() || (analysisStep == 1));
	      	return;
	  	}
    	if (aToken.is("templateAttributeDefinition")) {
        mixset Mixset {
          processInlineMixset(aToken);
        }
    		analyzer.analyzeEmission(aToken);
    	} else if (aToken.is("emitMethod")) {
        	analyzer.analyzeEmitMethodDeclarator(aToken);
      	}
    }
    
    private void analyzeSubTokens(Token aToken, TemplateTokenAnalyzer analyzer) {
//    	reAnalyze = true;
//    	parser.reAnalyze(true);
//    	do {
//    		analysisStep+= 1;
//      		reAnalyze = false;
//      		parser.reAnalyze(false);
      		for(Token subToken : aToken.getSubTokens()) {
      			analyzeToken(subToken,analyzer,rootAnalysisStep);
      			if (!parser.getParseResult().getWasSuccess()) {
      				return;
      			}
      		}
//    	} while (reAnalyze);
    }
    
    void analyze(Token mainToken, int rootAnalysisStep) {
    	setRootToken(mainToken);
    	setRootAnalysisStep(rootAnalysisStep);
    	accept(templateAnalyzer);
    }
}

//Internal invocation for internal umple parser in order to invoke walkers calls which 
//can instantiate the analysis if required
class UmpleInternalParser
{
  internal TemplateDefinitionWalker walker = new TemplateDefinitionWalker(this);

  after init {
    parser.addGrammarFile("/template/umple_template.grammar");
  }
  
  private void analyzeTemplateToken(Token token, int analysisStep) {  	
  	walker.analyze(token, analysisStep);
  }
  
  private void postTokenTemplateAnalysis(){
    walker.done();
  }
} 
