/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

*/

namespace cruise.umple.compiler;

class VioletGenerator
{
  public void generate()
  {
    UmpleFile umpleFile = model.getUmpleFile();
    String filename = umpleFile.getPath() + File.separator + umpleFile.getFileName() + ".violet";
    draw(model);
    SampleFileWriter.createFile(filename, toXml());
  }
  
  public VioletClass newClass(String name)
  {
  
    int elementOffset = numberOfVioletClasses();
  
    double width = 100.0;
    double height = 60.0;
    double widthSpacing = 110.0;
    double heightSpacing = 50.0;
    
    double startX = 40.0;
    double startY = 40.0;
    
    Point position = Point.create(elementOffset);
    double myX = startX + (position.getY()-1)*(widthSpacing+width);
    double myY = startY + (position.getX()-1)*(heightSpacing+height);
  
    VioletClass vClass = new VioletClass(name,myX,myY);
    addVioletClass(vClass);
    return vClass;
  }
  
  public VioletAssociation newAssociation(String startLabel, String endLabel, VioletClass startClass, VioletClass endClass)
  {
    VioletAssociation vAss = new VioletAssociation(startLabel,endLabel,startClass,endClass);
    addVioletAssociation(vAss);
    return vAss;
  }

  public void draw(UmpleModel model)
  {
    Map<UmpleClass,VioletClass> classToVioletMap = new HashMap<UmpleClass,VioletClass>();
    
    for (UmpleClass aClass : model.getUmpleClasses())
    {
      VioletClass vClass = newClass(aClass.getName());
      classToVioletMap.put(aClass, vClass);
    }

    for (UmpleClass child : model.getUmpleClasses())
    {
      UmpleClass parent = child.getExtendsClass();

      if (parent != null)
      {
        VioletClass violetChild = classToVioletMap.get(child);
        VioletClass violetParent = classToVioletMap.get(parent);
        violetChild.setParentClass(violetParent);
      }
    }
    
    for (Association association : model.getAssociations())
    {
      UmpleClass class1 = model.getUmpleClass(association.getEnd(0).getClassName());
      UmpleClass class2 = model.getUmpleClass(association.getEnd(1).getClassName());

      VioletClass startClass = classToVioletMap.get(class1);
      VioletClass endClass = classToVioletMap.get(class2);
      String startLabel = association.getEnd(0).toGenericString();
      String endLabel = association.getEnd(1).toGenericString();
      //String role1 = association.getEnd(0).getRoleName();
      //String role2 = association.getEnd(1).getRoleName();

      newAssociation(startLabel, endLabel, startClass, endClass);
    }
  }


  public String toXml()
  {
    VioletDiagram diagram = new VioletDiagram();
    
    for(VioletClass v : violetClasses)
    {
      diagram.addVioletClass(v);
    }
    
    for(VioletAssociation v : violetAssociations)
    {
      diagram.addVioletAssociation(v);
    }
    return diagram.toXml();
  } 

}



class VioletDiagram
{

  public String toXml()
  {
    StringBuffer answer = new StringBuffer();
    answer.append("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>");
    answer.append("<java version=\"1.6.0_04\" class=\"java.beans.XMLDecoder\">");
    answer.append("<object class=\"com.horstmann.violet.ClassDiagramGraph\">");
    
    for (VioletClass vClass : getVioletClasses())
    {
      answer.append("<void method=\"addNode\">");
      answer.append("<object id=\"ClassNode"+ vClass.getName() +"\" class=\"com.horstmann.violet.ClassNode\"><void property=\"name\"><void property=\"text\"><string>"+ vClass.getName() +"</string></void></void></object>");
      answer.append("<object class=\"java.awt.geom.Point2D$Double\"><void method=\"setLocation\"><double>"+ vClass.getX() +"</double><double>"+ vClass.getY() +"</double></void></object>");
      answer.append("</void>");
    }
    
    for (VioletClass child : getVioletClasses())
    {
      VioletClass parent = child.getParentClass();
      if (parent != null)
      {
        answer.append("<void method=\"connect\">");
        answer.append("<object class=\"com.horstmann.violet.ClassRelationshipEdge\"><void property=\"bentStyle\"><object class=\"com.horstmann.violet.BentStyle\" field=\"VHV\"/></void><void property=\"endArrowHead\"><object class=\"com.horstmann.violet.ArrowHead\" field=\"TRIANGLE\"/></void></object>");
        answer.append("<object idref=\"ClassNode"+ child.getName() +"\"/>");
        answer.append("<object idref=\"ClassNode"+ parent.getName() +"\"/>");
        answer.append("</void>");
      }
    }    
    
    for(VioletAssociation vAss : getVioletAssociations())
    {
      answer.append("<void method=\"connect\">"); 
      answer.append("<object class=\"com.horstmann.violet.ClassRelationshipEdge\">"); 
      answer.append("<void property=\"bentStyle\"><object class=\"com.horstmann.violet.BentStyle\" field=\"HVH\"/></void>"); 
      answer.append("<void property=\"startLabel\"><string>"+ vAss.getStartLabel() +"</string></void>");
      answer.append("<void property=\"endLabel\"><string>"+ vAss.getEndLabel() +"</string></void>");
      answer.append("</object>");
      answer.append("<object idref=\"ClassNode"+ vAss.getVioletClass(0).getName() +"\"/>");
      answer.append("<object idref=\"ClassNode"+ vAss.getVioletClass(1).getName() +"\"/>");
      answer.append("</void>");
    }
    
    answer.append("</object>");
    answer.append("</java>");
    return answer.toString();
  }
}
