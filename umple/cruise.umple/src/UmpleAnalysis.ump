/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

*/
namespace cruise.umple.analysis;


external Analyzer{}
mixset StateMachine {
  class GuardAnalyzer
  {
    isA Analyzer;
    depend cruise.umple.parser.analysis.Analyzer;
    depend cruise.umple.parser.Token;
    depend cruise.umple.compiler.*;
    depend java.util.*;
    ConstraintTree rawLine = new ConstraintTree();
    lazy UmpleClassifier uClassifier;
    lazy Transition t;
    
    void analyze(Token token)
    {
      Guard constraint = new Guard();
      constraint.addElementAll(rawLine.getRoot());
      constraint.setPosition(token.getPosition());
      constraint.setEndPosition(token.getEndPosition());

      t.setGuard(constraint);
      rawLine = new ConstraintTree();
    }
  }
}



class PreconditionAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  ConstraintTree rawLine = null;
  lazy UmpleClassifier uClassifier;
  lazy Method method;

  void prepare(Token token)
  {
    rawLine = new Precondition(method);
  }

  void analyze(Token token)
  {
    if (uClassifier instanceof UmpleClass)
    {
      ((UmpleClass)(uClassifier)).addPreCond((Precondition)rawLine);
    }
    mixset Trait {
    else if (uClassifier instanceof UmpleTrait)
    {
      ((UmpleTrait)(uClassifier)).addPreCond((Precondition)rawLine);  
    }  
    }

    rawLine = new ConstraintTree();
  }
}

class PostconditionAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  ConstraintTree rawLine = null;
  lazy UmpleClassifier uClassifier;
  lazy Method method;
  
  void prepare(Token token)
  {
    rawLine = new Postcondition(method);
  }

  void analyze(Token token)
  {
    ((Postcondition)rawLine).setPosition(token.getPosition());
    if (uClassifier instanceof UmpleClass)
    {
      ((UmpleClass)(uClassifier)).addPostCond((Postcondition)rawLine);
    } 
    mixset Trait {
      else if (uClassifier instanceof UmpleTrait)
      {
        ((UmpleTrait)(uClassifier)).addPostCond((Postcondition)rawLine);  
      }
    }
    rawLine = new ConstraintTree();
  }
}

class ConstraintTokenAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  ConstraintTree rawLine = new ConstraintTree();
  lazy UmpleClassifier uClassifier;
  ConstraintTree constraint = null;
  public void analyze(Token token)
  {
    constraint = new ConstraintTree();   
    constraint.addElementAll(rawLine.getRoot());
    rawLine = new ConstraintTree();
  }
}

class InvariantAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  ConstraintTree rawLine = new ConstraintTree();
  lazy UmpleClassifier uClassifier;
  lazy Method method;
  public void analyze(Token token)
  {
    if (uClassifier instanceof UmpleClass)
    {
      ((UmpleClass)uClassifier).addConstraintTree(rawLine);
    } 
    mixset Trait {
      else if (uClassifier instanceof UmpleTrait)
      {
        ((UmpleTrait)uClassifier).addConstraintTree(rawLine);  
      }
    }
    rawLine = new ConstraintTree();
  }
}

class GenExprAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy UmpleClassifier uClassifier;
  lazy ConstraintTree rawLine;
  boolean mustBeInClass = false;
  List<String> type = new ArrayList<String>();

  public void analyze(Token token)
  {
    
  }
}

class StringExprAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy UmpleClassifier uClassifier;
  lazy ConstraintTree rawLine;
}

class LoneBooleanAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy UmpleClassifier uClassifier;
  lazy ConstraintTree rawLine;
}

class BoolExprAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy UmpleClassifier uClassifier;
  lazy ConstraintTree rawLine;
  boolean mustBeInClass = false;
  List<String> type = new ArrayList<String>();
}

class NumExprAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy UmpleClassifier uClassifier;
  lazy ConstraintTree rawLine;
  boolean mustBeInClass = false;
  List<String> type = new ArrayList<String>();
}

class ConstraintBodyAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy UmpleClassifier uClassifier;
  lazy ConstraintTree rawLine;
  ConstraintTree savedRawLine = null;
  public void prepare(Token token){
    savedRawLine = rawLine;
    rawLine = rawLine.createNew();
  }
  public void analyze(Token token){
    rawLine.setShouldDisplayBrackets(true);
    savedRawLine.addElement(rawLine);
  }
}

class NegativeConstraintAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy UmpleClassifier uClassifier;
  lazy ConstraintTree rawLine;

  ConstraintTree strawLine = null;
  public void prepare(Token token){
    strawLine = rawLine;
    rawLine = rawLine.createNew();
  }
  public void analyze(Token token){
    rawLine.negate();
    strawLine.addElement(rawLine);
  }
}

class LinkingOpBodyAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy UmpleClassifier uClassifier;
  lazy ConstraintTree rawLine;

  ConstraintTree sRawLine = null;
  public void prepare(Token token){
    sRawLine = rawLine;
    rawLine = rawLine.createNew();
  }
  public void analyze(Token token){
    sRawLine.addElement(rawLine);
  }
}

class AndOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintOperator("&&"));
  }
}

class OrOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintOperator("||"));
  }
}

class ArithmeticCallOperatorAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintOperator(token.getValue()));
  }
}

class ArithmeticCallAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy UmpleClassifier uClassifier;
  lazy ConstraintTree rawLine;
   
  lazy ConstraintTree personalRawLine;
  
  public void prepare(Token token)
  {
    personalRawLine = rawLine;
    rawLine = rawLine.createNew();
  }
  
  public void analyze(Token token)
  {
    ConstraintTree cv = rawLine.createNew();
    cv.setShouldDisplayBrackets(true);
    cv.addElementAll(rawLine.getRoot());
    personalRawLine.addElement(cv);
  }
}

class NumExprNumberAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintNumberLiteral(token.getValue()));
  }
}

class ConstraintParameterNumberAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;

  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintNumberLiteral(token.getValue()));
  }
}


class BoolLiteralAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintLiteral(token.getValue("literal")));
  }
}
mixset StateMachine {
class StatemachineExprAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  lazy UmpleClassifier uClassifier;
  ConstraintTree cv = null;
  boolean isStateMachine = true;
  public void prepare(Token token)
  {
    cv = rawLine.createNew();
  }
}
}

class AssociationExprAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  lazy UmpleClassifier uClassifier;
  
  ConstraintTree cv = null;
  ConstraintOperator operator = new ConstraintOperator("NOT SET");

  public void prepare(Token token)
  {
    cv = rawLine.createNew();
  }
}

class AssociationExprFirstOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintOperator operator;
  public void analyze(Token token)
  {
    if(token.getValue().equals("cardinality"))
    {
      operator.setValue("cardinality==");
    }
    else
    {
      operator.setValue(token.getValue());
    }
  }
}

class AssociationExprMoreOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintOperator operator;
  public void analyze(Token token)
  {
    operator.setValue("cardinality>");
  }
}

class AssociationExprSmallerOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintOperator operator;
  public void analyze(Token token)
  {
    operator.setValue("cardinality<");
  }
}

class AssociationExprEqualsOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintOperator operator;
  public void analyze(Token token)
  {
    operator.setValue("cardinality==");
  }
}

class AssociationExprNotequalsOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintOperator operator;
  public void analyze(Token token)
  {
    operator.setValue("cardinality!=");
  }
}

class AssociationExprLessOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintOperator operator;
  public void analyze(Token token)
  {
    operator.setValue("cardinality<=");
  }
}

class AssociationExprGreaterOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintOperator operator;
  public void analyze(Token token)
  {
    operator.setValue("cardinality>=");
  }
}

class AssociationExprAllAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintOperator operator;
  public void analyze(Token token)
  {
    operator.setValue("hasAll");
  }
}

class AssociationLiteralAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  lazy UmpleClassifier uClassifier;
  
  lazy ConstraintTree cv;
  lazy ConstraintOperator operator;
  boolean firstName = true;
  ConstraintTree subject = null;
  boolean asIs = true;
  public void prepare(Token token)
  {
    if(subject == null)
    {
      subject = cv;
      cv = null;
    }
    if(!firstName)
    {
      if("hasAll".equals(operator.getValue()))
      {
        rawLine.addElement(new ConstraintOperator("&&"));
      }
      else 
      {
        rawLine.addElement(new ConstraintOperator("||"));
      }
      rawLine.addElement(subject);
    }
    else firstName = false;    
    rawLine.addElement(operator);
  }
  public void analyze(Token token)
  {
  }
}


class IsNotInOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintOperator("in!="));   
  }
}

class IsInOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintOperator("in=="));
  }
}

class ConstraintParameterListAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy UmpleClassifier uClassifier;
  lazy ConstraintTree cv;

  lazy ConstraintTree mcv;
  public void prepare(Token nameToken)
  {
    cv.addElement(new ConstraintOperator(""));
    mcv = cv;
    cv = cv.createNew();
    cv.addElement(new ConstraintUnassignedName(""));
  }
  public void analyze(Token nameToken)
  {
    cv.setShouldDisplayBrackets(true);
    mcv.addElement(cv);
  }
}

class ConstraintParameterAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy UmpleClassifier uClassifier;  
  lazy ConstraintTree cv;
  
  ConstraintTree rawLine = null;
  boolean mustBeInClass = false;
  boolean asIs = false;

  public void prepare(Token token)
  {
    if(cv!=null)
    {
      rawLine = cv.createNew();
    }
    else if(rawLine!=null)
    {
      cv = rawLine;
      rawLine = rawLine.createNew();
    }
  }

  void analyze(Token token)
  {
    cv.addElement(rawLine);
  }
}

class ConstraintParameterListCommaAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;

  lazy ConstraintTree cv;
  public void analyze(Token token)
  {
    cv.addElement(new ConstraintOperator(","));
  }
}

class ConstraintNameAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy UmpleClassifier uClassifier;
  lazy ConstraintTree rawLine;
  lazy boolean mustBeInClass;
  lazy List<String> type;

  boolean mustWarn = true;
  Token grandparentToken = null;
  ConstraintTree cv = null;

  lazy ConstraintTree personalRawLine;
  public void prepare(Token nameToken)
  {
    Token grandparentToken = nameToken.getParentToken().getParentToken();
    if(cv==null)
    {
      cv = rawLine.createNew();
    }
    personalRawLine = rawLine;
    rawLine = rawLine.createNew();
  }
  public void analyze(Token nameToken)
  {
    personalRawLine.addElement(cv);
  }
}
mixset StateMachine {
class StatemachineExprStateNameAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy UmpleClassifier uClassifier;  
  lazy ConstraintTree cv;
  ConstraintTree rawLine = null;

  public void prepare(Token token)
  {
    rawLine = cv.createNew();
  }
  mixset StateMachine {
  public void analyze(Token token)
  {
    StateMachine stateMachine = null;
    while(!(cv.getRoot() instanceof ConstraintStateMachine))
    {
      if(cv.getRoot()!=null&&(cv.getRoot() instanceof ConstraintOperator))
      {
        ConstraintOperator operator = (ConstraintOperator)cv.getRoot();
        if(operator.getLeft()!=null&&(operator.getLeft() instanceof ConstraintTree))
        {
          cv = (ConstraintTree)operator.getLeft();
        }
        else break;
      }
      else break;
    }
    if(cv.getRoot() instanceof ConstraintStateMachine)
    {
      State state = ((ConstraintStateMachine)cv.getRoot()).getStateMachine().findState(token.getValue());
      ConstraintState var = new ConstraintState(state);
      rawLine.addElement(var);
    }
    else
    {
      //TODO: add error
    }
  }
}
}
}

class ConstraintNameNameAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree cv;
  lazy UmpleClassifier uClassifier;
  
  public void analyze(Token token)
  {
    cv.addElement(analyzeName(cv,uClassifier,token.getValue(), token.getParentToken().getSubToken("constraintParameterList")!=null ));
  }

  public static ConstraintVariable analyzeName(ConstraintTree cv, UmpleClassifier uClassifier, String value, Boolean hasParameter)
  {
    return generateConstraintName(retrieveClass(cv,uClassifier),value,hasParameter);
  }

  private static UmpleClassifier retrieveClass(ConstraintTree cv, UmpleClassifier defaultClass)
  {
    UmpleClassifier uClass = null;
    if(cv.getRoot() instanceof ConstraintOperator)
    {
      ConstraintOperator operator = ((ConstraintOperator)cv.getRoot());
      for(int i=operator.numberOfSubConstraints()-1;i>=0;--i)
      {
        ConstraintVariable left = operator.getSubConstraint(i);
        if(left != null)
        {
          if(left instanceof ConstraintAttribute )
          {
            ConstraintAttribute previouslyFoundAttribute = (ConstraintAttribute)left;
            uClass = previouslyFoundAttribute.getAttribute().getUmpleClass();
            if(uClass==null)
            {
              mixset Trait {
              uClass = previouslyFoundAttribute.getAttribute().getUmpleTrait();
              UmpleModel model = ((UmpleTrait)uClass).getSourceModel();
              uClass = model.getUmpleClass(previouslyFoundAttribute.getAttribute().getType());
              }
            }
            else
            {
              UmpleModel model = ((UmpleClass)uClass).getSourceModel();
              uClass = model.getUmpleClass(previouslyFoundAttribute.getAttribute().getType());
            }
          }
          else if(left instanceof ConstraintAssociation )
          {
            ConstraintAssociation previouslyFoundAssociation = (ConstraintAssociation)left;
            uClass = previouslyFoundAssociation.getAssociation().getUmpleClass();
            if(uClass==null)
            {
              mixset Trait {
              uClass = previouslyFoundAssociation.getAssociation().getUmpleTrait();
              UmpleModel model = ((UmpleTrait)uClass).getSourceModel();
              uClass = model.getUmpleClass(previouslyFoundAssociation.getAssociation().getType());
              }
            }
            else
            {
              UmpleModel model = ((UmpleClass)uClass).getSourceModel();
              uClass = model.getUmpleClass(previouslyFoundAssociation.getAssociation().getType());
            }
          }
        }
      }
    }
    if(uClass==null)
    {
      uClass = defaultClass;
    }
    return uClass;
  }

  private static ConstraintVariable generateConstraintName(UmpleClassifier uClassifier, String value, Boolean hasParameter)
  {
    Attribute attribute = null;
    if (uClassifier instanceof UmpleClass)
    {
      attribute = ((UmpleClass)(uClassifier)).getAttribute(value);
    }
    else
    {
      mixset Trait {
        attribute = ((UmpleTrait)(uClassifier)).getAttribute(value);
      }
    }
    if(attribute!=null)
    {
      if (hasParameter) return new ConstraintUnassignedName(value);
      ConstraintAttribute name = new ConstraintAttribute(attribute);
      return name;
    }
    else
    {
      AssociationVariable association = null;
      if (uClassifier instanceof UmpleClass)
      {
        association = ((UmpleClass)(uClassifier)).getAssociationVariable(value);
      }
      else
      {
        mixset Trait {
          association = ((UmpleTrait)(uClassifier)).getAssociationVariable(value);
        }
      }
      if(association!=null)
      {
        ConstraintAssociation name = new ConstraintAssociation(association);
        return name;
      }
      else
      {
        mixset StateMachine {
        StateMachine stateMachine = null;
        if(uClassifier instanceof UmpleClass)
        {
          stateMachine = ((UmpleClass)uClassifier).getStateMachine(value);
        }
        }
        mixset Trait {
          mixset StateMachine {
            else if(uClassifier instanceof UmpleTrait)
            {
              stateMachine = ((UmpleTrait)uClassifier).getStateMachine(value);
            }
          }
        }
        mixset StateMachine {
        if(stateMachine!=null)
        {
          ConstraintStateMachine name = new ConstraintStateMachine(stateMachine);
          return name;
        }
        } 
        mixset Structure {
            Port port = null;
            if (uClassifier instanceof UmpleClass)
            {
              port = ((UmpleClass)(uClassifier)).getPort(value);
            }
            if(port!=null)
            {
              ConstraintPort name = new ConstraintPort(port);
              return name;
            }
        }
        
      }
    }
    if(uClassifier instanceof UmpleClass)
    {
      UmpleClass uClass = ((UmpleClass)uClassifier).getExtendsClass();
      if(uClass!=null)
      {
        return generateConstraintName(uClass,value,hasParameter);
      }
    }
    mixset Trait {
    else if(uClassifier instanceof UmpleTrait)
    {
      for(UmpleTrait uTrait:((UmpleTrait)uClassifier).getExtendsTraits())
      {
        ConstraintVariable var = generateConstraintName(uTrait,value,hasParameter);
        if(!(var instanceof ConstraintUnassignedName))
        {
          return var;
        }
      }
    }      
    }

    return new ConstraintUnassignedName(value);
  }
}

class ConstraintNameNewAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree cv;
  public void analyze(Token token)
  {
    ConstraintOperator newCV = new ConstraintOperator("initialise");
    cv.addElement(newCV);
  }
}

class ConstraintNameIndexAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree cv;
  public void analyze(Token token)
  {
    ConstraintVariable var = cv.getRoot();
    if(var==null)return;
    try
    {
      int i = Integer.parseInt(token.getValue());
      if(var instanceof ConstraintAssociation )
      {
        ((ConstraintAssociation)var).setIndex(i);
      }
      else if(var instanceof ConstraintAttribute)
      {
        ((ConstraintAttribute)var).setIndex(i);
      }
      else
      {
        //setFailedPosition(token.getPosition(), 29, var.getValue(), "association or list");
      }
    } 
    catch (NumberFormatException e)
    {
      //setFailedPosition(token.getPosition(), 29, token.getValue(), "integer");
    }
  }
}

class ConstraintScopeOperatorAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy UmpleClassifier uClassifier;
  lazy ConstraintTree cv;

  lazy ConstraintTree rawLine;
  lazy boolean mustBeInClass;
  lazy List<String> type;
  
  public void prepare(Token token)
  {
    ConstraintOperator dot = new ConstraintOperator(".");
    cv.addElement(dot);
  }
  
  public void analyze(Token token)
  {
  }
}

class StringExprQuoteAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintLiteral("\""+token.getValue()+"\""));
  }
}

class StringComplexExpressionAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  lazy UmpleClassifier uClassifier;
  ConstraintTree myRawLine = null;
  public void prepare(Token token)
  {
    if(token.numberOfSubTokens()>1)
    {
      if(token.numberOfSubTokens()!=3||!token.getSubToken(0).getName().equals("\""))
      {
        myRawLine = rawLine;
        rawLine = rawLine.createNew();
      }
    }
  }
  public void analyze(Token token)
  {
    if(token.numberOfSubTokens()>1)
    {
      if(token.numberOfSubTokens()!=3||!token.getSubToken(0).getName().equals("\""))
      {
        ConstraintTree cv = rawLine.createNew();
        cv.addElementAll(rawLine.getRoot());
        myRawLine.addElement(cv);
      }
    }
  }
}

class StringComplexExpressionConcatAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintOperator("concatenate"));
  }
}

class NumExprEqualsOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintOperator("=="));
  }
}

class NumExprNotequalsOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintOperator("!="));
  }
}


class EqualsOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintOperator("object=="));
  }
}

class NotequalsOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintOperator("object!="));
  }
}

class GreaterOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintOperator(">="));
  }
}

class SmallerOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintOperator("<"));
  }
}

class MoreOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintOperator(">"));
  }
}

class LessOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ConstraintTree rawLine;
  public void analyze(Token token)
  {
    rawLine.addElement(new ConstraintOperator("<="));
  }
}

class ModelConstraintBodyAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ModelConstraint modelConstraint;
  public void prepare(Token token)
  {
    ModelConstraint parent = modelConstraint;
    modelConstraint = new ModelConstraint(token.getPosition());
    if(parent!=null)
    {
      parent.addModelConstraint(modelConstraint);
    }
  }
  public void analyze(Token token)
  {
  }

  public void reset()
  {
    modelConstraint = null;
  }
}

class ModelLinkingOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token; 
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ModelConstraint modelConstraint;
  public void prepare(Token token)
  {
    if(token.getSubToken(0).is("and"))
    {
      modelConstraint.setLinkNext("and");
    }
    else if(token.getSubToken(0).is("or"))
    {
      modelConstraint.setLinkNext("or");
    }
  }
}

class ModelExprAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ModelConstraint modelConstraint;

  public void analyze(Token token)
  {
    String source = token.getValue("source");
    String target = token.getValue("target");
    if(source!=null)
    {
      modelConstraint.getMostRecent().setSource(source);
    }
    modelConstraint.getMostRecent().setTarget(target);
  }
}

class ModelRelationOpInheritanceAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ModelConstraint modelConstraint;
}

class ModelRelationOpInheritanceSubclassAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ModelConstraint modelConstraint;
  public void analyze(Token token)
  {
    modelConstraint.addModelConstraint(new ModelConstraintSubClass(token.getPosition()));
  }
}

class ModelRelationOpInheritanceSuperclassAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ModelConstraint modelConstraint;
  public void analyze(Token token)
  {
    modelConstraint.addModelConstraint(new ModelConstraintSuperClass(token.getPosition()));
  }
}

class ModelRelationOpAttributeAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ModelConstraint modelConstraint;

  public void analyze(Token token)
  {
    if(token.getValue("classification")==null)
    {
      modelConstraint.addModelConstraint(new ModelConstraintAttributeFromName(token.getPosition()));
    }
  }
}

class ModelRelationOpAttributeClassificationAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ModelConstraint modelConstraint;

  public void analyze(Token token)
  {
    if("named".equals(token.getValue()))
    {
      modelConstraint.addModelConstraint(new ModelConstraintAttributeFromName(token.getPosition()));
    }
    else if("of".equals(token.getValue()))
    {
      modelConstraint.addModelConstraint(new ModelConstraintAttributeFromClass(token.getPosition()));
    }
  }
}

class ModelRelationOpAssociationAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ModelConstraint modelConstraint;

  public void prepare(Token token)
  {
    modelConstraint.addModelConstraint(new ModelConstraintAssociation(token.getPosition()));
  }
}

class ModelRelationOpAssociationOpAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  depend java.util.*;
  lazy ModelConstraint modelConstraint;

  public void analyze(Token token)
  {
    modelConstraint.setAssociationType(token.getValue());
  }
}

class ModelRelationAssociationEndAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;
  lazy ModelConstraint modelConstraint;

  Multiplicity multiplicity = new Multiplicity();
  public void analyze(Token token)
  {
    if(multiplicity.getMaximum() == null)
    {
      multiplicity.setBound(multiplicity.getMinimum());
      multiplicity.setMinimum(null);
    }
    modelConstraint.addAssociationEnd(multiplicity);
  }
}

class ModelRelationAssociationEndBoundAnalyzer
{
  isA Analyzer;
  depend cruise.umple.parser.analysis.Analyzer;
  depend cruise.umple.parser.Token;
  depend cruise.umple.compiler.*;

  lazy Multiplicity multiplicity;
  public void analyze(Token token)
  {
    if(multiplicity.getMinimum()==null)
    {
      multiplicity.setMinimum(token.getValue());
    }
    else
    {
      multiplicity.setMaximum(token.getValue());
    }
  }
}



namespace cruise.umple.compiler;
