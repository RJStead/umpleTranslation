// The master of this second part of the Umple grammar is available at
// [*https://github.com/umple/umple/blob/master/cruise.umple/src/umple_patterns.grammar*]

// Copyright: All contributors to the Umple Project
// This file is made available subject to the open source license found at:
// [*http://umple.org/license*]

softwarePattern- : [[isA]] | [[singleton]] | [[immutable]] | [[keyDefinition]] | [[codeInjection]]

// Generalization and inheritance [*isAclause*]
isA- : [[singleIsA]] | [[multipleIsA]]
singleIsA- : isA [[isAName]] ( , isA [[isAName]] )*  ;
multipleIsA- : isA [[isAName]] ( , [[isAName]] )* ;
isAName- : " [**extendsNames] " [[gTemplateParameter]]? | [extendsName] [[gTemplateParameter]]?

gTemplateParameter : < [[AllInclusionExclusionAlias]] >

// A class that can have only one instance [*SingletonPattern*]
singleton- : [=singleton] ;

// A class that can't be modified when created [*ImmutablePattern*]
immutable- : [=immutable] ;

// For equality and hashing [*KeysforEqualityandHashing*]
keyDefinition- : [[defaultKey]] | [[key]]

// Aspect oriented code injection: [*BeforeandAfterStatements*]
codeInjection- : [[beforeCode]] | [[afterCode]]

toplevelCodeInjection- : [[toplevelBeforeCode]] | [[toplevelAfterCode]]

parameterTypes : [parameterType] (, [parameterType])*
parameterListing : OPEN_ROUND_BRACKET ([[parameterTypes]])? CLOSE_ROUND_BRACKET

injectionOperation : [operationName] ([[parameterListing]])?

beforeCode : ( before | [=around] ) [[aspectBody]]
afterCode : after [[aspectBody]]

toplevelBeforeCode : ( before | [=around] ) {([className])(, [className])*} [[aspectBody]]
toplevelAfterCode : after  {([className])(, [className])*} [[aspectBody]]

aspectBody- : ([=operationSource:custom|generated|all])? ([!codeLabel:\S+:])? [[injectionOperation]] ( , [[injectionOperation]] )* ([[codeLang]] [[codeLangs]])? { [**code] } ( [[moreCode]] )*