/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This file analyzses trace related tokens to populate the Umple meta model for
traces.

Please refer to UmpleInternalParser.ump for more details.

 */

namespace cruise.umple.compiler;

class UmpleInternalParser
{
  /**
   * Analyzes trace case token and its subtokens (i.e. trace directive tokens)
   */
  public void analyzeTraceCaseToken(UmpleClass aClass, Token token){
    TraceCase tca = new TraceCase();

    for( Token traceToken : token.getSubTokens() )
    {
      if( traceToken.is("tracecase_name") )
      {
        tca.setName(token.getValue("tracecase_name"));
        aClass.addTraceCase(tca);
      }
      if( traceToken.is("traceDirective") )
      {
        analyzeTraceStatement( aClass , traceToken );
        traceDirective.setUmpleClass(null);
        tca.addTraceDirective(traceDirective);
      }
      if( traceToken.is("tracecase_act_name") || traceToken.is("tracecase_deact_name") )
      {
        analyzeTraceCaseActivationToken( aClass , token );
      }
    }
  }

  public void analyzeTraceCaseActivationToken(UmpleClass aClass, Token token){

    for( Token traceToken : token.getSubTokens() )
    {
      for( TraceCase tc : aClass.getTraceCases() )
        if( tc.getName().equals(traceToken.getValue()))
        {
          if( traceToken.is("tracecase_act_name"))
          {
            tc.setActivation(true);
          }
          else if( traceToken.is("tracecase_deact_name"))
          {
            tc.setActivation(false);
          }
        }
    }
  }

} 
