/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This file analyzses trace related tokens to populate the Umple meta model for
traces.

Please refer to UmpleInternalParser.ump for more details.

 */

namespace cruise.umple.compiler;

class UmpleInternalParser
{
	private void analyzeAssociationTraceItem(Token traceToken){

		for( AssociationVariable aVar : traceDirective.getUmpleClass().getAssociationVariables() )
		{
			if( traceToken.getValue("traceEntity").equals(aVar.getName()))
				tracedAssoc.addAssociationVariable(aVar);
		}

		for( Association assoc : traceDirective.getUmpleClass().getAssociations() )
		{
			if( assoc.getName().contains(traceToken.getValue("traceEntity") ))
				tracedAssoc.addAssociation(assoc);
		}

		for(Token sub: traceToken.getParentToken().getSubTokens())
		{
			if(sub.is("Prefix"))
			{
				for(Token sub2: sub.getSubTokens())
				{
					if( "cardinality".equals(sub2.getValue("option")) )
					{
						tracedAssoc.setTraceCardinality(true);
					}
					if( "add".equals(sub2.getValue("option")) )
					{
						tracedAssoc.setTraceAdd(true);
						tracedAssoc.setTraceCardinality(false);
					}
					if( "remove".equals(sub2.getValue("option")) )
					{
						tracedAssoc.setTraceRemove(true);
						tracedAssoc.setTraceCardinality(false);
					}
				}
			}
		}
		tracedAssoc.setPosition(traceToken.getPosition());
		traceDirective.addAssociationTraceItem(tracedAssoc);
	}

} 
