/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

*/

namespace cruise.umple.compiler;

class UmpleFile
{

  public UmpleFile(String aPath, String aFilename)
  {
    this(new File(aPath,aFilename));
  }
  
  public UmpleFile(String aFullFilename)
  {
    this(new File(aFullFilename));
  }

  fileName = { file.getName() }
  path = { file.getAbsoluteFile().getParentFile().getAbsolutePath() }
  parent = { new File(getPath()).getParent().toString() }

  public String getSimpleFileName()
  {
    String name = getFileName();
    int lastIndex = name.lastIndexOf(".");
    if (lastIndex == -1)
    {
      return name;
    }
    else
    {
      return name.substring(0, lastIndex);
    }
  }
  public InputStream getFileStream() throws FileNotFoundException
  {
    return new FileInputStream(file);
  }

  public boolean doesFileExist()
  {
    return file.exists();
  }

  // this is used to add command-based linked Umple files to the proper list.
  public void addLinkedFiles(String filename) {
  	linkedFiles = linkedFiles+"use "+filename+";\n";
  }
  
  // this is used to get list of command-based linked Umple files.
  public String getLinkedFiles() {
 	 return "\n"+linkedFiles;
  }
  
}


class UmpleParserFactory
{

  public static UmpleParser create(String className) 
  {
    
    //FAST THAN REFLECTION, LOAD THE KNOWN IMPLEMENTORS
    if ("cruise.umple.compiler.UmpleInternalParser".equals(className) || "UmpleInternalParser".equals(className))
    {
      return new UmpleInternalParser();
    }
    else if ("cruise.umple.compiler.UmpleXtextParser".equals(className) || "UmpleXtextParser".equals(className))
    {
      return new UmpleXtextParser();
    }
  
    Object object = null;
    try 
    {
      Class<?> classDefinition = Class.forName(className);
      object = classDefinition.newInstance();
      return (UmpleParser)object;
    } 
    catch (Exception e) 
    { 
      return null;
    }
  }
  
  public static UmpleParser create(String umpleParserName, UmpleModel model)
  {
    return create(umpleParserName,model,false);
  }
  
  public static UmpleParser create(String umpleParserName, boolean failHardIfInvalid)
  {
    return create(umpleParserName,null,failHardIfInvalid);
  }
  
  public static UmpleParser create(String umpleParserName, UmpleModel model, boolean failHardIfInvalid)
  {
    UmpleParser p = create(umpleParserName);
    if (p == null && failHardIfInvalid)
    {
      org.junit.Assert.fail("Unknown parser " + umpleParserName);
    }
    if (model != null)
    {
      p.setModel(model);
    }
    return p;
  }

}
