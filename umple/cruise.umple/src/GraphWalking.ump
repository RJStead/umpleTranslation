/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

Wiki documenting the classes: 
https://github.com/umple/umple/wiki/Graph-Analysis-API-Overview

Graph Walking API for analysis of the many kinds of graphs, such as 
StateMachines, Inheritance Hierarchy, Association Hierarchy etc. 

Contains the interface Node, which will be converted to a trait later, 
as functionality improves.

Abstract class Graph outlines the necessary structure for concrete
graph classes, such as StateMachineGraphs, InheritanceHierarchy etc.

StateMachineGraph is used to walk both flat, and nested state machines.

 */
namespace cruise.umple.compiler;


/*trait Node 
{
  boolean visited = false;
  public void visit()
  {
    this.visited = true;
  }

  public void clear()
  {
    this.visited = false;
  }
}*/

interface Node 
{
  public void visit();
  public void clear();
}


class Graph 
{
  depend cruise.umple.util.*;
  depend java.util.*;

  abstract;
  protected Node startNode;
  protected Boolean isDepthFirst = true;
  protected Stack<Node> stack;        // for dfs
  protected LinkedList<Node> queue;   // for bfs
  //public abstract Node next();
  //public abstract void clearNodes();
}
mixset StateMachine {

  class StateMachineGraph 
  {
    depend cruise.umple.util.*;
    depend java.util.*;
    isA Graph;
    smName;
    boolean isNested;
  }
}

use Umple.ump;
use GraphWalking_Code.ump;

