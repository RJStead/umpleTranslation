/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This file analyze core umple meta model tokens such as which language to generate,
the current namespace, etc and populates the umple meta model.

Please refer to UmpleInternalParser.ump for more details.

*/

namespace cruise.umple.compiler;

class UmpleInternalParser
{
  
  private void analyzeUSE(Token t, int analysisStep)
  {
    if(t.is("useProgram")) {
      for(Token sub : t.getSubTokens()) {
        if(sub.is("useClassDefinition")) {
          analyzeUSEClass(sub, analysisStep);
        }
        if(sub.is("useAssociation")) {
          analyzeUSEAssociation(sub, analysisStep);
        }
      }
    }
  }
  
  private UmpleClass analyzeUSEClass(Token t, int analysisStep)
  {
    UmpleClass generatedClass = model.addUmpleClass(t.getValue("id"));
    if(analysisStep != 1) {
      Token attributes = t.getSubToken("useAttributes");
      if(attributes != null) {
        analyzeUSEAttributes(attributes, generatedClass);
      }
    }
    return generatedClass;
  }
  
  private void analyzeUSEAttributes(Token allAttributesToken, UmpleClass myClass)
  {
    for(Token attributeToken : allAttributesToken.getSubTokens()) {
      if(attributeToken.is("useAttributeDefinition")) {
        String name = attributeToken.getValue("id");
        
        for(Attribute aAttribute : myClass.getAttributes()){
          if (aAttribute.getName().equals(name)){
            setFailedPosition(attributeToken.getPosition(), 22, myClass.getName(), name);
          }
        }
        
        Token simpleType = attributeToken.getSubToken("useSimpleType");
        if(simpleType != null) {
          String type = simpleType.getValue("id");
          
          Attribute attribute = new Attribute(name, type, null, null, false, myClass);
          attribute.setPosition(attributeToken.getPosition());
          
        } else {
          System.err.println("Internal error: attribute has no recognized type");
        }
      }
    }
  }
  
  private Association analyzeUSEAssociation(Token associations, int analysisStep)
  {
    if(analysisStep == 1) {
      return null;
    }
    if(!associations.is("useAssociation")) {
      System.out.println("failed at analyze use association");
      return null;
    }
    
    AssociationEnd firstEnd = analyzeUSEAssociationEnd(associations.getSubToken("useAssociationEnd", 0));
    AssociationEnd secondEnd = analyzeUSEAssociationEnd(associations.getSubToken("useAssociationEnd", 1));
    
    firstEnd.setRoleName(associations.getValue("name"));
    secondEnd.setRoleName(associations.getValue("name"));
    
    Association ret = new Association(true, true, false,false,firstEnd, secondEnd);
    model.addAssociation(ret);
    
    unlinkedAssociations.add(ret);
    
    return ret;
  }
  
  private AssociationEnd analyzeUSEAssociationEnd(Token associationEnd)
  {
    if(!associationEnd.is("useAssociationEnd")) {
      System.out.println("failed at analyze association end");
      return null;
    }
    
    String name = associationEnd.getValue("name");
    Multiplicity multiplicity = analyzeUSEMultiplicity(associationEnd.getSubToken("useMultiplicityRange"));
    
    return new AssociationEnd(null, name, null, null, multiplicity);
  }
  
  private Multiplicity analyzeUSEMultiplicity(Token multiplicity) {
    if(!multiplicity.is("useMultiplicityRange")) {
      System.out.println("failed at analyze use multiplicity");
      return null;
    }
    
    Multiplicity ret = new Multiplicity();
    
    if(multiplicity.numberOfSubTokens() == 1) {
      ret.setRange(null, null);
      ret.setBound(multiplicity.getSubToken("useMultiplicitySpec").getValue("integerSpec"));
    } else {
      Token firstSpec = multiplicity.getSubToken("useMultiplicitySpec", 0);
      Token secondSpec = multiplicity.getSubToken("useMultiplicitySpec", 1);
      ret.setRange(firstSpec.getValue("integerSpec"), secondSpec.getValue("integerSpec"));
    }
    
    return ret;
  }
}
