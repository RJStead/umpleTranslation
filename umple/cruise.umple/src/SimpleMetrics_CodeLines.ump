/***************************************************************************************************
*
*  C R E D I T S
*  Implementation Of Code Line Metrics by Antonio Maria Pereira de Resende during his visit at
*  University of Ottawa as a Visit Researh (March-2013 to March-2014) and under supervision 
*  of Timothy Lethbridge.
*  This research is supported by CNPQ-BRAZIL and Universidade Federal de Lavras-UFLA (Brazil)
*  
*  A B O U T   T H I S    F I L E
*  File..........: SimpleMetrics_CodeLines.ump 
*  Description...: It contains the class and routines to calculate Code Line Metrics.
*                  Code Line Metrics involved are: 
*                  Comment Lines, Blank Lines, Code Lines, Total of Lines per File
*  Dependencies..: None
*  Changes affect: Generator_CodeSimpleMetrics.ump
*  Compilation...: It's library, compile it by compiling Generator_CodeSimpleMetrics.ump        
*  Execution.....: It's library. Not Executable
*  Initiated.....: Jun-2013
***************************************************************************************************/

/***************************************************************************************************
* 
* CLASS USED TO COUNT MEASURE LINES IN A FILE
* 
* D E F I N I T I O N S   U S E D:
*       BLANK LINES - Lines without any caracter or containing only spaces.
*                   - So, blank lines inside block comments are counted twice. Once like Blank Lines 
*                     and once like Comment Lines.
*
*     COMMENT LINES - Lines after double slash (one comment line) at any place of a line OR
*                   - Lines started by slash followed by asterisk and ended by asterisk followed by 
*                     slash (block comments).
*                   
*        CODE LINES - Lines not classified like Blank or Comment.
* 
*   TOTAL OF LINES  - The amount of lines in a file including blanks, comments, and code lines.
*                     The amount are NOT NOT NOT the same of BLANKS+COMMENTS+CODE lines. There is 
*                     comment line in the same line of a code line. There is blank line inside block
*                     comments. So, Total of Lines will get a value not greater than 
*                     BLANKS+COMMENTS+CODE lines. In the most cases, probably, will be less than 
*                     those sum.
*
* K N O W N   B U G S  (If this considerations are accepted, write it down on google code bugs controlling):        
*
*          QUOTED   - Quoted is not identified correctly yet due to use of regex and sum of strings
*                     using special characters. So strings containing double slash or slash+asterisk 
*                     could provoke errors during classification and wrong values could be generated.
*
*                     Examples:
*                     Mistakes got in file which double slash is used with another meaning like:
*                     (1) "[protocol]://", where protocol means http, ftp, file, and so on. Other
*                     (2) Double slash when first slash indicate that there is a special character 
*                     after it, and the special character is the slash. This is commonly found in
*                     compilers with regex like UMPLE TOOL.                   
*
**************************************************************************************************/
use SimpleMetrics_Util.ump;

class CodeMetrics {
  isA SimpleMetricsGenerator;
  
  depend cruise.umple.parser.Position;

  StringBuilder resultCode = new StringBuilder();
  UmpleModel model = null;
    
  void calculate() {
    int totalLineCount = 0; //count lines per file
    int totalLoc = 0;
    int totalComments = 0;
    int totalBlanks = 0;
    CountLines cl = new CountLines();
  
    java.util.Set<String> allUmpFiles = new java.util.HashSet<String>();
    String fn = null;
  
    // Iterate through all the classes in the system, gathering statistics
    for (UmpleClass uClass : model.getUmpleClasses()) {
      // Loop through all the places where parts of this class were
      // found in the code, gathering all the files
      for (Position p : uClass.getPositions()) {
        fn=p.getFilename();
        allUmpFiles.add(fn); // allUmpFiles is a set, so duplicates are removed
      }
    }

    resultCode.append( "\n\n\n");
    resultCode.append("<h1>Code Line Measures</h1>\n");      
    
    java.util.List<String>title  = new java.util.ArrayList<String>();
    title.add(" file                                                     ");
    title.add("    LOC    ");
    title.add(" Comment Lines ");
    title.add(" Blank Lines ");
    title.add(" Total of Lines ");
      
    resultCode.append("<table border=\"1\"><tbody>\n");
      
    resultCode.append("<tr>");
    for (int i=0;i<title.size();i++) {
      resultCode.append("<td>"+title.get(i)+"</td>");
    }
    resultCode.append("</tr>");
      
    
    for( String fn1 : allUmpFiles) {
      int fileLineCount = 0;
      resultCode.append("<tr>");
      
      try {
        cl = countLinesInFile(fn1);
            
        resultCode.append( "<td>"+fn1+"</td>");
        resultCode.append( "<td>"+cl.getCountCode()+"</td>");
        resultCode.append( "<td>"+cl.getCountComments()+"</td>");
        resultCode.append( "<td>"+cl.getCountBlanks()+"</td>");
        resultCode.append( "<td>"+cl.getCountLines()+"</td>");
      } catch (java.io.IOException e) {
        try {
          cl = countLinesInFile(model.getUmpleFile().getPath()+java.io.File.separator+fn1);
        
          resultCode.append( "<td>"+fn1+"</td>");
          resultCode.append( "<td>"+cl.getCountCode()+"</td>");
          resultCode.append( "<td>"+cl.getCountComments()+"</td>");
          resultCode.append( "<td>"+cl.getCountBlanks()+"</td>");
          resultCode.append( "<td>"+cl.getCountLines()+"</td>");
          
        } catch (java.io.IOException e2) {  
          fileLineCount = 0;
          cl.setCountLines(0);
          resultCode.append("Unreadable\n");
        } 
      }
      totalLoc += cl.getCountCode();
      totalComments += cl.getCountComments();
      totalBlanks += cl.getCountBlanks();
      totalLineCount += cl.getCountLines();  
            
      resultCode.append("</tr>");
    }
    resultCode.append("</tbody></table>");
    resultCode.append("\n\n<ul>");
    resultCode.append("\n  <li>Total Line of Code = "+totalLoc);
    resultCode.append("\n  <li>Total Comment Lines  = "+totalComments );
    resultCode.append("\n  <li>Total Blank Lines  = "+totalBlanks);
    resultCode.append("\n  <li>Total of Lines = "+totalLineCount + "\n");
    resultCode.append("</ul>\n\n");
    
    return;
  }
  
  CountLines countLinesInFile(String filename)throws java.io.IOException{
     CountLines cl = new CountLines();
     cl.setCountLines(0);
     cl.setCountComments(0);
     cl.setCountBlanks(0);
     cl.setCountCode(0);
  
      boolean insideblock=false;
          int ind1,ind2,ind3;
          java.io.FileReader arq = new java.io.FileReader(filename);
          java.io.BufferedReader lerArq = new java.io.BufferedReader(arq);
          String orgline;
          String line = lerArq.readLine(); // Read first line of a file
          
          while (line != null) {
          ind1=-1;
          ind2=-1;
          ind3=-1;
          
          cl.incCountLines();
          line = line.replaceAll(" ",""); // Eliminate all spaces
          line = line.replaceAll("\t",""); // Eliminate all tabs \t
           
          // destroy quoted/string          
          int pos1, pos2 = -1;
          if ( (pos1 = line.indexOf("\"")) >= 0 ){
            if ( ( (pos2= line.indexOf("\"",pos1+1)) > 0 ) && (pos2 > pos1) ){
             line = line.substring( 0, pos1+1 ) + line.substring( pos1 + (pos2-pos1), line.length() ) ;
            }
          }

          if ( line.length() == 0){
            cl.incCountBlanks();

          }else{    
      
            //comment in one line
            if ( ((ind1 = line.indexOf("//")) != -1) && (!insideblock) ) {
              cl.incCountComments();
              line = line.substring(0,2); // consume the line to avoid parsing mistakes

            }
      
            // block of comments
            if (insideblock){
              cl.incCountComments();
              if ( (ind3 = line.indexOf("*/")) != -1 ) {
                insideblock=false;
              }
            } 
            else if ( ((ind2 = line.indexOf("/*")) != -1) && (!insideblock) )
            {
              cl.incCountComments();
              if ( (ind3 = line.indexOf("*/")) == -1 ) {
                insideblock = true;
              }
            }
      
            // line of code
            if  ( ( (!insideblock) && (  (ind1 > 0) || (ind2 > 0) ) )|| // ind1 check "//"  and ind 2 check "/*"
                   ( (ind3 > 0) && (ind3 < line.length()-2) ) || // close braces before code line 
                     ( (ind1==-1) && (ind2==-1) && (ind3==-1) && (!insideblock)  ) //
                 )  {
                cl.incCountCode();     
            }
          }
            line = lerArq.readLine(); // get next line or value null if doesn't have another one
          } // close while (line != null)
          arq.close();
       return cl;
   } // End method  
}


// This class is used like a structure to help keep values about lines
class CountLines{
  int countLines = 0;    // total of lines
  int countComments = 0; // total of comment lines
  int countBlanks = 0;   // total of blank lines
  int countCode = 0;     // total of code line
  void incCountLines(){
    ++this.countLines;
  }
  void incCountComments(){
    ++this.countComments;
  }
  void incCountBlanks(){
    ++this.countBlanks;
  }
  void incCountCode(){
    ++this.countCode;
  }
} 

