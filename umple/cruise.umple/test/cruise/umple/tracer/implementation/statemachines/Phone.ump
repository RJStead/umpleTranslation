// Umple/UML system representing simulation of telephone calls between several parties
// This system actually runs and contains a state machine of a phone call.
// It runs best on a Mac since it calls a Mac system function for simulated voices
// Compile it using Umple and then run it using java
namespace example;

class PhoneSystemSimulation {
  singleton;
  // lazy PhoneLine[] lines;
  1 -- * PhoneLine lines;
  after constructor {
    addLine(new PhoneLine("line1","Bruce",this));
    addLine(new PhoneLine("line2","Ralph",this));
    addLine(new PhoneLine("line3","Victoria",this));
    addLine(new PhoneLine("line4","Vicki",this));
    addLine(new PhoneLine("line5","Agnes",this));
  }

  static PhoneSystemSimulation s;
  
}  

class PhoneLine {
  depend java.io.IOException;

  id;
  voice;
  0..1 self otherParty;
  
  trace waitForHook, ringing record id;
  const String Click="click";
  const String Dial="dial";
  const String Beep="beep";
  const String Hello="hello";
  const String RingRing="ring ring";
  state {
    onHook {
      entry / {
        if(getOtherParty() != null) {
          getOtherParty().otherPartyHangUp();
        } 
        setOtherParty(null); p();
      }
      startDialing -> dialing;
      incomingCall -> ringing;
    }
    ringing {
      entry / {say(RingRing);} 
      pickUp -> / {getOtherParty().otherPartyPickUp();} communicating;
      otherPartyHangUp -> onHook;
      autoPickup -> / {getOtherParty().otherPartyPickUp();} communicating;
    }
    communicating {
      entry / {say(Hello+getOtherParty().getId());}
      hangUp -> / {say(Click);} onHook;
      otherPartyHangUp -> waitForHook;
      putOnHold -> onHold;
    }
    onHold {
      hangUp -> / {say(Click);} onHook;
      otherPartyHangUp -> waitForHook;
      takeOffHold -> communicating;
    }
    dialing {
      entry / {say(Dial);} 
      completeNumber -> waitingForConnection;
      hangUp -> / {say(Click);} onHook;
    }
    waitingForConnection {
      entry / {getOtherParty().incomingCall();}
      otherPartyPickUp -> communicating;
      hangUp -> / {say(Click);} onHook;
      timeOut -> onHook;
    }
    waitForHook {
      entry / {say(Beep);}
      hangUp -> / {say(Click);} onHook;
    }
  }
  
  String toString() {
    return getId();
  }
  
  void p() {
    // System.out.println("  other party of "+getId()+"="+getOtherParty());
  }
  
  void say(String s) {
    try {
      Runtime.getRuntime().exec("say "+getId()+" "+s+" -v "+getVoice());
    }
    catch (IOException e) {}
    pause(2000);
  }
  
  void pause(long ms) {
    try {
      Thread.currentThread().sleep(ms);//sleep for 1000 ms
    }
    catch(InterruptedException ie){
    }
  }
}

strictness ignore 1007;

