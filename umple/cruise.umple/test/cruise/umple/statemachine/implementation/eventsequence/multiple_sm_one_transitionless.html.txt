<style>
  /* Shared Styles */
  .event-sequence-grid, .event-sequence-list 
  { 
    font-family: sans-serif;
  }

  .event-sequence-grid table, table.event-sequence-list
  {
    border-collapse: collapse;
  }

  .event-sequence-list td, .event-sequence-grid td
  { 
    line-height: 1;
    padding: 2px 10px 2px 10px; 
    white-space: nowrap;
    text-align: center; 
  }

  /* Grid-only styles */
  .event-sequence-grid .content-cell {
    border: 1px solid black;
  }

  .event-sequence-grid .row-header {
    text-align: left;
  }

  .event-sequence-grid .column-header > div {
    width: 10px;

    -moz-transform:
      perspective(999px) /* Helps with the font distortion */
      translate(20px, 0px)
      rotate(-45deg);
    -moz-transform-origin: left bottom;
    -ms-transform:
      translate(21px, 0px)
      rotate(-45deg);
    -ms-transform-origin: left bottom;
    -webkit-transform:
      translate(21px, 2px) 
      rotate(-45deg);
    -webkit-transform-origin: left bottom;
    -o-transform:
      translate(21px, 0px)
      rotate(-45deg);
    -o-transform-origin: left bottom;
  }

  .event-sequence-grid .column-header span {
    border-bottom: 1px solid black;
  }

  /* Floating column styles */
  .event-sequence-grid .wrapper {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .event-sequence-grid .floating-col {
    display: inline-block;
    position: absolute;
    overflow: hidden;
    border-right: 1px solid black;
    z-index: 1;
  }

  .event-sequence-grid .inner-wrapper {
    position: relative;
  }

  .event-sequence-grid .hidden-spacer {
    position: relative;
    display: inline-block;
  }

  .event-sequence-grid .table-body {
    overflow-x: scroll;
  }

  .event-sequence-grid .table-body table {
    position: relative;
    display: inline-block;
  }

  .event-sequence-grid .floating-col td {
    background-color: white;
    border: 1px solid black;
  }

  .event-sequence-grid .floating-col td.first {
  }

  /* List-only styles */
  table.event-sequence-list
  {
    margin-top: 20px;
  }

  .event-sequence-list td
  {
    border: 1px solid black;
  }
</style>

<h1>Event sequence generated by Umple from multiple_sm_one_transitionless.ump</h1>
<p>Note that the sequence of events is randomly generated. Subsequential event generation will likely yield different results.</p>


<h2>Class MultipleSmOneTransitionless state machine sm1</h2>

<div id="wrapper0" class="wrapper"></div><p>No transitions found in state machine</p>


<h2>Class MultipleSmOneTransitionless state machine sm2</h2>

<div class="event-sequence-grid">
  <div id="wrapper1" class="wrapper">
    <div class="floating-col">
      <table>
        <tr>
          <td class="row-header first">States</td>
        </tr>
        <tr>
          <td class="row-header" data-parent="">s2</td>
        </tr>
        <tr>
          <td class="row-header" data-parent="">s3</td>
        </tr>
      </table>
    </div>
    <div class="table-body">
      <div class="inner-wrapper">
        <table>
          <tr>
            <td class="column-header"><div><span>START</span></div></td>
            <td class="column-header"><div><span>1. ev1</span></div></td>
          </tr>
          <tr>
            <td class="content-cell" data-parent="">X</td>
            <td class="content-cell">&nbsp;</td>
          </tr>
          <tr>
            <td class="content-cell" data-parent="">&nbsp;</td>
            <td class="content-cell">X</td>
          </tr>
        </table>
      </div>
    </div>
  </div>
</div>

<table class="event-sequence-list">
  <tr>
    <td class="column-header">Event<br>Number</td>
    <td class="column-header">Event</td>
    <td class="column-header">Next State</td>
  </tr>
  <tr>
    <td class="">START</td>
    <td class="">-</td>
    <td class="">s2</td>
  </tr>
  <tr>
    <td class="">1</td>
    <td class="">ev1</td>
    <td class="">s3</td>
  </tr>
</table>

<p>Event sequence ending reason: Visited all states</p>

<script>
  function formatEventSequence(wrapper) 
  {
    if(wrapper === undefined || wrapper.innerHTML === "") 
    {
      return;
    }

    // Calculate spacer height due to slanted names
    var longest = 0;
    var last = 0;
    var columnHeaders = wrapper
        .getElementsByClassName("column-header");

    for(var i = 0; i < columnHeaders.length; i++) 
    {
      var innerSpan = columnHeaders[i].firstChild.firstChild;
      if(longest < innerSpan.offsetWidth)
        longest = innerSpan.offsetWidth;

      if(i == columnHeaders.length - 1)
        last = innerSpan.offsetWidth;
    }

    var spacerHeight = longest * Math.cos(45 * (Math.PI / 180));
    var lastLabelWidth = last *  Math.sin(45 * (Math.PI / 180));

    // Get the various elements
    var tableBody = wrapper.getElementsByClassName("table-body")[0];
    var floatingCol = wrapper.getElementsByClassName('floating-col')[0];
    var innerWrapper = wrapper.getElementsByClassName("inner-wrapper")[0];
    var actualTable = innerWrapper.getElementsByTagName('table')[0]

    // give the inner elements the header space for the slanted headers
    tableBody.style.height = tableBody.offsetHeight + spacerHeight +'px';

    // Make the inner wrapper long enough to hold the scrollable contents
    innerWrapper.style.width = floatingCol.offsetWidth 
                             + actualTable.offsetWidth 
                             + lastLabelWidth 
                             + 'px';

    // Move the elements down so the headers show
    actualTable.style.top = spacerHeight + 'px';
    floatingCol.style.top = spacerHeight - 1 + 'px';

    // Move the table body over to accommodate the floating header column
    innerWrapper.getElementsByTagName('table')[0].style.left 
      = floatingCol.offsetWidth - 6 + 'px';
  };

  var wrapperIndex = 0;

  while(true)
  {
    var wrapper = document.getElementById("wrapper" + wrapperIndex);

    if(wrapper === null)
    {
      break;
    }

    wrapperIndex++;
    formatEventSequence(wrapper);
  }
</script>
