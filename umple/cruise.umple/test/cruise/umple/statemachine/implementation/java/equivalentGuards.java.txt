/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



public class A
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //A State Machines
  public enum Status { s1, s2 }
  private Status status;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public A()
  {
    setStatus(Status.s1);
  }

  //------------------------
  // INTERFACE
  //------------------------

  public String getStatusFullName()
  {
    String answer = status.toString();
    return answer;
  }

  public Status getStatus()
  {
    return status;
  }

  public boolean test()
  {
    boolean wasEventProcessed = false;
    
    Status aStatus = status;
    switch (aStatus)
    {
      case s1:
        if (y>z)
        {
          setStatus(Status.s2);
          wasEventProcessed = true;
          break;
        }
        if ((x+y)>z)
        {
          setStatus(Status.s2);
          wasEventProcessed = true;
          break;
        }
        if ((5*2)<11)
        {
          setStatus(Status.s2);
          wasEventProcessed = true;
          break;
        }
        if ((x+y)==z)
        {
          setStatus(Status.s2);
          wasEventProcessed = true;
          break;
        }
        if (x.equals(y))
        {
          setStatus(Status.s2);
          wasEventProcessed = true;
          break;
        }
        if ("test".equals(x))
        {
          setStatus(Status.s2);
          wasEventProcessed = true;
          break;
        }
        if (x.equals("test"+"hello"))
        {
          setStatus(Status.s2);
          wasEventProcessed = true;
          break;
        }
        if (((5*2)<=11))
        {
          setStatus(Status.s2);
          wasEventProcessed = true;
          break;
        }
        if (((a>b)||(variable&&((b<a)||(c>=b)))))
        {
          setStatus(Status.s2);
          wasEventProcessed = true;
          break;
        }
        if (((a-c)>(b*2))!=((a-c)>(b^2)))
        {
          setStatus(Status.s2);
          wasEventProcessed = true;
          break;
        }
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  private void setStatus(Status aStatus)
  {
    status = aStatus;
  }

  public void delete()
  {}

}