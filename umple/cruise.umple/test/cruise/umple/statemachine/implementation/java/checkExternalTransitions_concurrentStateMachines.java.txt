/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/



public class X
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //X State Machines
  public enum Sm { s1, s2 }
  public enum SmS1A { Null, a }
  public enum SmS1AA { Null, t1, t2 }
  public enum SmS1B { Null, b }
  public enum SmS1BB { Null, t3, t4 }
  private Sm sm;
  private SmS1A smS1A;
  private SmS1AA smS1AA;
  private SmS1B smS1B;
  private SmS1BB smS1BB;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public X()
  {
    setSmS1A(SmS1A.Null);
    setSmS1AA(SmS1AA.Null);
    setSmS1B(SmS1B.Null);
    setSmS1BB(SmS1BB.Null);
    setSm(Sm.s1);
  }

  //------------------------
  // INTERFACE
  //------------------------

  public String getSmFullName()
  {
    String answer = sm.toString();
    if (smS1A != SmS1A.Null) { answer += "." + smS1A.toString(); }
    if (smS1AA != SmS1AA.Null) { answer += "." + smS1AA.toString(); }
    if (smS1B != SmS1B.Null) { answer += "." + smS1B.toString(); }
    if (smS1BB != SmS1BB.Null) { answer += "." + smS1BB.toString(); }
    return answer;
  }

  public Sm getSm()
  {
    return sm;
  }

  public SmS1A getSmS1A()
  {
    return smS1A;
  }

  public SmS1AA getSmS1AA()
  {
    return smS1AA;
  }

  public SmS1B getSmS1B()
  {
    return smS1B;
  }

  public SmS1BB getSmS1BB()
  {
    return smS1BB;
  }

  public boolean goToT2()
  {
    boolean wasEventProcessed = false;
    
    SmS1AA aSmS1AA = smS1AA;
    switch (aSmS1AA)
    {
      case t1:
        exitSmS1AA();
        setSmS1AA(SmS1AA.t2);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  public boolean goToT4()
  {
    boolean wasEventProcessed = false;
    
    SmS1AA aSmS1AA = smS1AA;
    switch (aSmS1AA)
    {
      case t2:
        exitSmS1A();
        setSmS1BB(SmS1BB.t4);
        setSmS1A(SmS1A.a);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  public boolean goToS2()
  {
    boolean wasEventProcessed = false;
    
    SmS1BB aSmS1BB = smS1BB;
    switch (aSmS1BB)
    {
      case t4:
        exitSm();
        setSm(Sm.s2);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  private void exitSm()
  {
    switch(sm)
    {
      case s1:
        exitSmS1A();
        exitSmS1B();
        break;
    }
  }

  private void setSm(Sm aSm)
  {
    sm = aSm;

    // entry actions and do activities
    switch(sm)
    {
      case s1:
        if (smS1A == SmS1A.Null) { setSmS1A(SmS1A.a); }
        if (smS1B == SmS1B.Null) { setSmS1B(SmS1B.b); }
        break;
    }
  }

  private void exitSmS1A()
  {
    switch(smS1A)
    {
      case a:
        exitSmS1AA();
        exit_a_action();
        setSmS1A(SmS1A.Null);
        break;
    }
  }

  private void setSmS1A(SmS1A aSmS1A)
  {
    smS1A = aSmS1A;
    if (sm != Sm.s1 && aSmS1A != SmS1A.Null) { setSm(Sm.s1); }

    // entry actions and do activities
    switch(smS1A)
    {
      case a:
        if (smS1AA == SmS1AA.Null) { setSmS1AA(SmS1AA.t1); }
        break;
    }
  }

  private void exitSmS1AA()
  {
    switch(smS1AA)
    {
      case t1:
        setSmS1AA(SmS1AA.Null);
        break;
      case t2:
        setSmS1AA(SmS1AA.Null);
        break;
    }
  }

  private void setSmS1AA(SmS1AA aSmS1AA)
  {
    smS1AA = aSmS1AA;
    if (smS1A != SmS1A.a && aSmS1AA != SmS1AA.Null) { setSmS1A(SmS1A.a); }
  }

  private void exitSmS1B()
  {
    switch(smS1B)
    {
      case b:
        exitSmS1BB();
        exit_b_action();
        setSmS1B(SmS1B.Null);
        break;
    }
  }

  private void setSmS1B(SmS1B aSmS1B)
  {
    smS1B = aSmS1B;
    if (sm != Sm.s1 && aSmS1B != SmS1B.Null) { setSm(Sm.s1); }

    // entry actions and do activities
    switch(smS1B)
    {
      case b:
        if (smS1BB == SmS1BB.Null) { setSmS1BB(SmS1BB.t3); }
        break;
    }
  }

  private void exitSmS1BB()
  {
    switch(smS1BB)
    {
      case t3:
        setSmS1BB(SmS1BB.Null);
        break;
      case t4:
        setSmS1BB(SmS1BB.Null);
        break;
    }
  }

  private void setSmS1BB(SmS1BB aSmS1BB)
  {
    smS1BB = aSmS1BB;
    if (smS1B != SmS1B.b && aSmS1BB != SmS1BB.Null) { setSmS1B(SmS1B.b); }
  }

  public void delete()
  {}

}