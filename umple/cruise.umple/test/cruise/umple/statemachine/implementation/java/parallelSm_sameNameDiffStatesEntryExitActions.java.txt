/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/



public class X
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //X State Machines
  public enum Sm { s0, s1 }
  public enum SmS0T1 { Null, t1 }
  public enum SmS0T2 { Null, t2, t3 }
  public enum SmS1T1 { Null, t1, t4 }
  public enum SmS1T2 { Null, t2, t5 }
  private Sm sm;
  private SmS0T1 smS0T1;
  private SmS0T2 smS0T2;
  private SmS1T1 smS1T1;
  private SmS1T2 smS1T2;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public X()
  {
    setSmS0T1(SmS0T1.Null);
    setSmS0T2(SmS0T2.Null);
    setSmS1T1(SmS1T1.Null);
    setSmS1T2(SmS1T2.Null);
    setSm(Sm.s0);
  }

  //------------------------
  // INTERFACE
  //------------------------

  public String getSmFullName()
  {
    String answer = sm.toString();
    if (smS0T1 != SmS0T1.Null) { answer += "." + smS0T1.toString(); }
    if (smS0T2 != SmS0T2.Null) { answer += "." + smS0T2.toString(); }
    if (smS1T1 != SmS1T1.Null) { answer += "." + smS1T1.toString(); }
    if (smS1T2 != SmS1T2.Null) { answer += "." + smS1T2.toString(); }
    return answer;
  }

  public Sm getSm()
  {
    return sm;
  }

  public SmS0T1 getSmS0T1()
  {
    return smS0T1;
  }

  public SmS0T2 getSmS0T2()
  {
    return smS0T2;
  }

  public SmS1T1 getSmS1T1()
  {
    return smS1T1;
  }

  public SmS1T2 getSmS1T2()
  {
    return smS1T2;
  }

  public boolean goS1()
  {
    boolean wasEventProcessed = false;
    
    SmS0T1 aSmS0T1 = smS0T1;
    switch (aSmS0T1)
    {
      case t1:
        exitSm();
        setSm(Sm.s1);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  public boolean goT3()
  {
    boolean wasEventProcessed = false;
    
    SmS0T2 aSmS0T2 = smS0T2;
    switch (aSmS0T2)
    {
      case t2:
        exitSmS0T2();
        setSmS0T2(SmS0T2.t3);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  public boolean goT4()
  {
    boolean wasEventProcessed = false;
    
    SmS1T1 aSmS1T1 = smS1T1;
    switch (aSmS1T1)
    {
      case t1:
        exitSmS1T1();
        setSmS1T1(SmS1T1.t4);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  public boolean goT5()
  {
    boolean wasEventProcessed = false;
    
    SmS1T2 aSmS1T2 = smS1T2;
    switch (aSmS1T2)
    {
      case t2:
        exitSmS1T2();
        setSmS1T2(SmS1T2.t5);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  private void exitSm()
  {
    switch(sm)
    {
      case s0:
        exitSmS0T1();
        exitSmS0T2();
        break;
      case s1:
        exitSmS1T1();
        exitSmS1T2();
        break;
    }
  }

  private void setSm(Sm aSm)
  {
    sm = aSm;

    // entry actions and do activities
    switch(sm)
    {
      case s0:
        if (smS0T1 == SmS0T1.Null) { setSmS0T1(SmS0T1.t1); }
        if (smS0T2 == SmS0T2.Null) { setSmS0T2(SmS0T2.t2); }
        break;
      case s1:
        if (smS1T1 == SmS1T1.Null) { setSmS1T1(SmS1T1.t1); }
        if (smS1T2 == SmS1T2.Null) { setSmS1T2(SmS1T2.t2); }
        break;
    }
  }

  private void exitSmS0T1()
  {
    switch(smS0T1)
    {
      case t1:
        s0_t1_exit();
        setSmS0T1(SmS0T1.Null);
        break;
    }
  }

  private void setSmS0T1(SmS0T1 aSmS0T1)
  {
    smS0T1 = aSmS0T1;
    if (sm != Sm.s0 && aSmS0T1 != SmS0T1.Null) { setSm(Sm.s0); }

    // entry actions and do activities
    switch(smS0T1)
    {
      case t1:
        s0_t1_entry();
        break;
    }
  }

  private void exitSmS0T2()
  {
    switch(smS0T2)
    {
      case t2:
        s0_t2_exit();
        setSmS0T2(SmS0T2.Null);
        break;
      case t3:
        setSmS0T2(SmS0T2.Null);
        break;
    }
  }

  private void setSmS0T2(SmS0T2 aSmS0T2)
  {
    smS0T2 = aSmS0T2;
    if (sm != Sm.s0 && aSmS0T2 != SmS0T2.Null) { setSm(Sm.s0); }

    // entry actions and do activities
    switch(smS0T2)
    {
      case t2:
        s0_t2_entry();
        break;
    }
  }

  private void exitSmS1T1()
  {
    switch(smS1T1)
    {
      case t1:
        s1_t1_exit();
        setSmS1T1(SmS1T1.Null);
        break;
      case t4:
        setSmS1T1(SmS1T1.Null);
        break;
    }
  }

  private void setSmS1T1(SmS1T1 aSmS1T1)
  {
    smS1T1 = aSmS1T1;
    if (sm != Sm.s1 && aSmS1T1 != SmS1T1.Null) { setSm(Sm.s1); }

    // entry actions and do activities
    switch(smS1T1)
    {
      case t1:
        s1_t1_entry();
        break;
    }
  }

  private void exitSmS1T2()
  {
    switch(smS1T2)
    {
      case t2:
        s1_t2_exit();
        setSmS1T2(SmS1T2.Null);
        break;
      case t5:
        setSmS1T2(SmS1T2.Null);
        break;
    }
  }

  private void setSmS1T2(SmS1T2 aSmS1T2)
  {
    smS1T2 = aSmS1T2;
    if (sm != Sm.s1 && aSmS1T2 != SmS1T2.Null) { setSm(Sm.s1); }

    // entry actions and do activities
    switch(smS1T2)
    {
      case t2:
        s1_t2_entry();
        break;
    }
  }

  public void delete()
  {}

  public void s0_t1_entry(){
    
  }

  public void s0_t2_entry(){
    
  }

  public void s1_t1_entry(){
    
  }

  public void s1_t2_entry(){
    
  }

  public void s0_t1_exit(){
    
  }

  public void s0_t2_exit(){
    
  }

  public void s1_t1_exit(){
    
  }

  public void s1_t2_exit(){
    
  }

}