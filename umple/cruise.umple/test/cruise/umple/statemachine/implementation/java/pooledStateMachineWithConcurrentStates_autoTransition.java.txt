/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

package example;
import java.util.*;
import java.lang.Thread;

public class CourseAttempt implements Runnable
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //CourseAttempt State Machines
  public enum CourseAttemptSM { studying, failed, passed }
  public enum CourseAttemptSMStudyingLab1 { Null, lab1, lab2 }
  public enum CourseAttemptSMStudyingTermProject { Null, termProject }
  public enum CourseAttemptSMStudyingFinalExam { Null, finalExam }
  private CourseAttemptSM courseAttemptSM;
  private CourseAttemptSMStudyingLab1 courseAttemptSMStudyingLab1;
  private CourseAttemptSMStudyingTermProject courseAttemptSMStudyingTermProject;
  private CourseAttemptSMStudyingFinalExam courseAttemptSMStudyingFinalExam;
  
  MessagePool pool;
  Thread removal;
  
  //enumeration type of messages accepted by CourseAttempt
  protected enum MessageType { null_M }

  // Map for a CourseAttempt pooled state machine that allows querying which events are possible in each map

  public static final Map<Object, HashSet<MessageType>> stateMessageMap = new HashMap<Object, HashSet<MessageType>>();
  static {
    stateMessageMap.put(CourseAttemptSM.studying,new HashSet<MessageType>(Arrays.asList(MessageType.null_M)));
    stateMessageMap.put(CourseAttemptSM.failed,new HashSet<MessageType>(Arrays.asList(MessageType.null_M)));
    stateMessageMap.put(CourseAttemptSM.passed,new HashSet<MessageType>(Arrays.asList(MessageType.null_M)));
    stateMessageMap.put(CourseAttemptSMStudyingLab1.Null,new HashSet<MessageType>(Arrays.asList(MessageType.null_M)));
    stateMessageMap.put(CourseAttemptSMStudyingLab1.lab1,new HashSet<MessageType>(Arrays.asList(MessageType.null_M)));
    stateMessageMap.put(CourseAttemptSMStudyingLab1.lab2,new HashSet<MessageType>(Arrays.asList(MessageType.null_M)));
    stateMessageMap.put(CourseAttemptSMStudyingTermProject.Null,new HashSet<MessageType>(Arrays.asList(MessageType.null_M)));
    stateMessageMap.put(CourseAttemptSMStudyingTermProject.termProject,new HashSet<MessageType>(Arrays.asList(MessageType.null_M)));
    stateMessageMap.put(CourseAttemptSMStudyingFinalExam.Null,new HashSet<MessageType>(Arrays.asList(MessageType.null_M)));
    stateMessageMap.put(CourseAttemptSMStudyingFinalExam.finalExam,new HashSet<MessageType>(Arrays.asList(MessageType.null_M)));
  }

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public CourseAttempt()
  {
    setCourseAttemptSMStudyingLab1(CourseAttemptSMStudyingLab1.Null);
    setCourseAttemptSMStudyingTermProject(CourseAttemptSMStudyingTermProject.Null);
    setCourseAttemptSMStudyingFinalExam(CourseAttemptSMStudyingFinalExam.Null);
    setCourseAttemptSM(CourseAttemptSM.studying);
    pool = new MessagePool();
    removal=new Thread(this);
    //start the thread of CourseAttempt
    removal.start();
  }

  //------------------------
  // INTERFACE
  //------------------------

  public String getCourseAttemptSMFullName()
  {
    String answer = courseAttemptSM.toString();
    if (courseAttemptSMStudyingLab1 != CourseAttemptSMStudyingLab1.Null) { answer += "." + courseAttemptSMStudyingLab1.toString(); }
    if (courseAttemptSMStudyingTermProject != CourseAttemptSMStudyingTermProject.Null) { answer += "." + courseAttemptSMStudyingTermProject.toString(); }
    if (courseAttemptSMStudyingFinalExam != CourseAttemptSMStudyingFinalExam.Null) { answer += "." + courseAttemptSMStudyingFinalExam.toString(); }
    return answer;
  }

  public CourseAttemptSM getCourseAttemptSM()
  {
    return courseAttemptSM;
  }

  public CourseAttemptSMStudyingLab1 getCourseAttemptSMStudyingLab1()
  {
    return courseAttemptSMStudyingLab1;
  }

  public CourseAttemptSMStudyingTermProject getCourseAttemptSMStudyingTermProject()
  {
    return courseAttemptSMStudyingTermProject;
  }

  public CourseAttemptSMStudyingFinalExam getCourseAttemptSMStudyingFinalExam()
  {
    return courseAttemptSMStudyingFinalExam;
  }

  private boolean __autotransition1__()
  {
    boolean wasEventProcessed = false;
    
    CourseAttemptSM aCourseAttemptSM = courseAttemptSM;
    switch (aCourseAttemptSM)
    {
      case studying:
        exitCourseAttemptSM();
        setCourseAttemptSM(CourseAttemptSM.passed);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  private void exitCourseAttemptSM()
  {
    switch(courseAttemptSM)
    {
      case studying:
        exitCourseAttemptSMStudyingLab1();
        exitCourseAttemptSMStudyingTermProject();
        exitCourseAttemptSMStudyingFinalExam();
        break;
    }
  }

  private void setCourseAttemptSM(CourseAttemptSM aCourseAttemptSM)
  {
    courseAttemptSM = aCourseAttemptSM;

    // entry actions and do activities
    switch(courseAttemptSM)
    {
      case studying:
        if (courseAttemptSMStudyingLab1 == CourseAttemptSMStudyingLab1.Null) { setCourseAttemptSMStudyingLab1(CourseAttemptSMStudyingLab1.lab1); }
        if (courseAttemptSMStudyingTermProject == CourseAttemptSMStudyingTermProject.Null) { setCourseAttemptSMStudyingTermProject(CourseAttemptSMStudyingTermProject.termProject); }
        if (courseAttemptSMStudyingFinalExam == CourseAttemptSMStudyingFinalExam.Null) { setCourseAttemptSMStudyingFinalExam(CourseAttemptSMStudyingFinalExam.finalExam); }
        __autotransition1__();
        break;
    }
  }

  private void exitCourseAttemptSMStudyingLab1()
  {
    switch(courseAttemptSMStudyingLab1)
    {
      case lab1:
        setCourseAttemptSMStudyingLab1(CourseAttemptSMStudyingLab1.Null);
        break;
      case lab2:
        lab2Done();
        setCourseAttemptSMStudyingLab1(CourseAttemptSMStudyingLab1.Null);
        break;
    }
  }

  private void setCourseAttemptSMStudyingLab1(CourseAttemptSMStudyingLab1 aCourseAttemptSMStudyingLab1)
  {
    courseAttemptSMStudyingLab1 = aCourseAttemptSMStudyingLab1;
    if (courseAttemptSM != CourseAttemptSM.studying && aCourseAttemptSMStudyingLab1 != CourseAttemptSMStudyingLab1.Null) { setCourseAttemptSM(CourseAttemptSM.studying); }
  }

  private void exitCourseAttemptSMStudyingTermProject()
  {
    switch(courseAttemptSMStudyingTermProject)
    {
      case termProject:
        projectDone();
        setCourseAttemptSMStudyingTermProject(CourseAttemptSMStudyingTermProject.Null);
        break;
    }
  }

  private void setCourseAttemptSMStudyingTermProject(CourseAttemptSMStudyingTermProject aCourseAttemptSMStudyingTermProject)
  {
    courseAttemptSMStudyingTermProject = aCourseAttemptSMStudyingTermProject;
    if (courseAttemptSM != CourseAttemptSM.studying && aCourseAttemptSMStudyingTermProject != CourseAttemptSMStudyingTermProject.Null) { setCourseAttemptSM(CourseAttemptSM.studying); }
  }

  private void exitCourseAttemptSMStudyingFinalExam()
  {
    switch(courseAttemptSMStudyingFinalExam)
    {
      case finalExam:
        pass();
        setCourseAttemptSMStudyingFinalExam(CourseAttemptSMStudyingFinalExam.Null);
        break;
    }
  }

  private void setCourseAttemptSMStudyingFinalExam(CourseAttemptSMStudyingFinalExam aCourseAttemptSMStudyingFinalExam)
  {
    courseAttemptSMStudyingFinalExam = aCourseAttemptSMStudyingFinalExam;
    if (courseAttemptSM != CourseAttemptSM.studying && aCourseAttemptSMStudyingFinalExam != CourseAttemptSMStudyingFinalExam.Null) { setCourseAttemptSM(CourseAttemptSM.studying); }
  }

  public void delete()
  {
    removal.interrupt();
  }

  protected class Message
  {
    MessageType type;
    
    //Message parameters
    Vector<Object> param;
    
    public Message(MessageType t, Vector<Object> p)
    {
      type = t; 
      param = p;
    }

    @Override
    public String toString()
    {
      return type + "," + param;
    }
  }
  
  protected class MessagePool {
    Queue<Message> messages = new LinkedList<Message>();
    
    public synchronized void put(Message m)
    {
      messages.add(m); 
      notify();
    }

    public synchronized Message getNext()
    {
      Message message=null;

      try {
        message=getNextProcessableMessage();
        while (message==null)
        {
          wait();
          message=getNextProcessableMessage();
        }
      } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
        return null;
      }

      // return the message
      return (message);
    }

    public Message getNextProcessableMessage()
    {
      // Iterate through messages and remove the first message that matches one of the Messages list
      // otherwise return null
      for (Message msg: messages)
      {
        if(stateMessageMap.get(getCourseAttemptSM()).contains(msg.type))
        {
          //The element to be removed
          messages.remove(msg);
          return (msg);
        }
        else if(stateMessageMap.get(getCourseAttemptSMStudyingLab1()).contains(msg.type))
        {
          //The element to be removed
          messages.remove(msg);
          return (msg);
        }
        else if(stateMessageMap.get(getCourseAttemptSMStudyingTermProject()).contains(msg.type))
        {
          //The element to be removed
          messages.remove(msg);
          return (msg);
        }
        else if(stateMessageMap.get(getCourseAttemptSMStudyingFinalExam()).contains(msg.type))
        {
          //The element to be removed
          messages.remove(msg);
          return (msg);
        }
      }
      return null;
    }
  }

  //------------------------------
  //messages accepted 
  //------------------------------

  
  @Override
  public void run ()
  {
    boolean status=false;
    while (true) 
    {
      Message m = pool.getNext();
      if(m == null)  return;
      
      switch (m.type)
      { 
        default:
      }
      if(!status)
      {
        // Error message is written or  exception is raised
      }
    }
  }
}