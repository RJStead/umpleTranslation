/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

package example;
import java.util.*;
import java.lang.Thread;

public class NestedStatesWthSameEventNames implements Runnable
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //NestedStatesWthSameEventNames State Machines
  public enum Sm { nestedState1, nestedState2, state5 }
  public enum SmNestedState1 { Null, state1, state2 }
  public enum SmNestedState2 { Null, state3, state4 }
  private Sm sm;
  private SmNestedState1 smNestedState1;
  private SmNestedState2 smNestedState2;
  
  //enumeration type of messages accepted by NestedStatesWthSameEventNames
  protected enum MessageType { moveTo_M, transit_M }
  
  MessageQueue queue;
  Thread removal;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public NestedStatesWthSameEventNames()
  {
    setSmNestedState1(SmNestedState1.Null);
    setSmNestedState2(SmNestedState2.Null);
    setSm(Sm.nestedState1);
    queue = new MessageQueue();
    removal=new Thread(this);
    //start the thread of NestedStatesWthSameEventNames
    removal.start();
  }

  //------------------------
  // INTERFACE
  //------------------------

  public String getSmFullName()
  {
    String answer = sm.toString();
    if (smNestedState1 != SmNestedState1.Null) { answer += "." + smNestedState1.toString(); }
    if (smNestedState2 != SmNestedState2.Null) { answer += "." + smNestedState2.toString(); }
    return answer;
  }

  public Sm getSm()
  {
    return sm;
  }

  public SmNestedState1 getSmNestedState1()
  {
    return smNestedState1;
  }

  public SmNestedState2 getSmNestedState2()
  {
    return smNestedState2;
  }

  public boolean _moveTo()
  {
    boolean wasEventProcessed = false;
    
    SmNestedState1 aSmNestedState1 = smNestedState1;
    SmNestedState2 aSmNestedState2 = smNestedState2;
    switch (aSmNestedState1)
    {
      case state1:
        exitSmNestedState1();
        setSmNestedState1(SmNestedState1.state2);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    switch (aSmNestedState2)
    {
      case state3:
        exitSmNestedState2();
        setSmNestedState2(SmNestedState2.state4);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  public boolean _transit()
  {
    boolean wasEventProcessed = false;
    
    SmNestedState1 aSmNestedState1 = smNestedState1;
    SmNestedState2 aSmNestedState2 = smNestedState2;
    switch (aSmNestedState1)
    {
      case state2:
        exitSm();
        setSm(Sm.state5);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    switch (aSmNestedState2)
    {
      case state4:
        exitSm();
        setSm(Sm.state5);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  private void exitSm()
  {
    switch(sm)
    {
      case nestedState1:
        exitSmNestedState1();
        break;
      case nestedState2:
        exitSmNestedState2();
        break;
    }
  }

  private void setSm(Sm aSm)
  {
    sm = aSm;

    // entry actions and do activities
    switch(sm)
    {
      case nestedState1:
        if (smNestedState1 == SmNestedState1.Null) { setSmNestedState1(SmNestedState1.state1); }
        break;
      case nestedState2:
        if (smNestedState2 == SmNestedState2.Null) { setSmNestedState2(SmNestedState2.state3); }
        break;
    }
  }

  private void exitSmNestedState1()
  {
    switch(smNestedState1)
    {
      case state1:
        setSmNestedState1(SmNestedState1.Null);
        break;
      case state2:
        setSmNestedState1(SmNestedState1.Null);
        break;
    }
  }

  private void setSmNestedState1(SmNestedState1 aSmNestedState1)
  {
    smNestedState1 = aSmNestedState1;
    if (sm != Sm.nestedState1 && aSmNestedState1 != SmNestedState1.Null) { setSm(Sm.nestedState1); }
  }

  private void exitSmNestedState2()
  {
    switch(smNestedState2)
    {
      case state3:
        setSmNestedState2(SmNestedState2.Null);
        break;
      case state4:
        setSmNestedState2(SmNestedState2.Null);
        break;
    }
  }

  private void setSmNestedState2(SmNestedState2 aSmNestedState2)
  {
    smNestedState2 = aSmNestedState2;
    if (sm != Sm.nestedState2 && aSmNestedState2 != SmNestedState2.Null) { setSm(Sm.nestedState2); }
  }

  public void delete()
  {
    removal.interrupt();
  }

  protected class Message
  {
    MessageType type;
    
    //Message parameters
    Vector<Object> param;
    
    public Message(MessageType t, Vector<Object> p)
    {
      type = t; 
      param = p;
    }

    @Override
    public String toString()
    {
      return type + "," + param;
    }
  }
  
  protected class MessageQueue {
    Queue<Message> messages = new LinkedList<Message>();
    
    public synchronized void put(Message m)
    {
      messages.add(m); 
      notify();
    }

    public synchronized Message getNext()
    {
      try {
        while (messages.isEmpty()) 
        {
          wait();
        }
      } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
        return null;
      }

      //The element to be removed
      Message m = messages.remove(); 
      return (m);
    }
  }

  //------------------------------
  //messages accepted 
  //------------------------------

  public void moveTo ()
  {
    queue.put(new Message(MessageType.moveTo_M, null));
  }

  public void transit ()
  {
    queue.put(new Message(MessageType.transit_M, null));
  }

  
  @Override
  public void run ()
  {
    boolean status=false;
    while (true) 
    {
      Message m = queue.getNext();
      if(m == null)  return;
      
      switch (m.type)
      {
        case moveTo_M:
          status = _moveTo();
          break;
        case transit_M:
          status = _transit();
          break; 
        default:
      }
      if(!status)
      {
        // Error message is written or  exception is raised
      }
    }
  }
}