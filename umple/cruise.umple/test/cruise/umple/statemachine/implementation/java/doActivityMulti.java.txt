/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.20.2.4305 modeling language!*/



// line 1 "doActivityMulti.ump"
public class X
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //X State Machines
  public enum Sm { s1, s2 }
  private Sm sm;

  //X Do Activity Threads
  Thread doActivity0SmS1Thread = null;
  Thread doActivity1SmS1Thread = null;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public X()
  {
    setSm(Sm.s1);
  }

  //------------------------
  // INTERFACE
  //------------------------

  public String getSmFullName()
  {
    String answer = sm.toString();
    return answer;
  }

  public Sm getSm()
  {
    return sm;
  }

  public boolean e1()
  {
    boolean wasEventProcessed = false;
    
    Sm aSm = sm;
    switch (aSm)
    {
      case s1:
        exitSm();
        setSm(Sm.s2);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  private void exitSm()
  {
    switch(sm)
    {
      case s1:
        if (doActivity0SmS1Thread != null) { doActivity0SmS1Thread.interrupt(); }
        if (doActivity1SmS1Thread != null) { doActivity1SmS1Thread.interrupt(); }
        break;
    }
  }

  private void setSm(Sm aSm)
  {
    sm = aSm;

    // entry actions and do activities
    switch(sm)
    {
      case s1:
        doActivity0SmS1Thread = new DoActivityThread(this,"doActivity0SmS1");
        doActivity1SmS1Thread = new DoActivityThread(this,"doActivity1SmS1");
        break;
    }
  }

  private void doActivity0SmS1()
  {
    try
    {
      // line 4 "doActivityMulti.ump"
      blah1();
      Thread.sleep(1);
    }
    catch (InterruptedException e)
    {

    }
  }

  private void doActivity1SmS1()
  {
    try
    {
      // line 5 "doActivityMulti.ump"
      blah2();
      Thread.sleep(1);
    }
    catch (InterruptedException e)
    {

    }
  }

  private static class DoActivityThread extends Thread
  {
    X controller;
    String doActivityMethodName;
    
    public DoActivityThread(X aController,String aDoActivityMethodName)
    {
      controller = aController;
      doActivityMethodName = aDoActivityMethodName;
      start();
    }
    
    public void run()
    {
      if ("doActivity0SmS1".equals(doActivityMethodName))
      {
        controller.doActivity0SmS1();
      }
        else if ("doActivity1SmS1".equals(doActivityMethodName))
      {
        controller.doActivity1SmS1();
      }
    }
  }

  public void delete()
  {}

}