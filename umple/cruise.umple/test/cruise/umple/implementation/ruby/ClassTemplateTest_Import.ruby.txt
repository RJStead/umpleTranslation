# PLEASE DO NOT EDIT THIS CODE
# This code was generated using the UMPLE 1.15.0.1751 modeling language!
# NOTE: Ruby generator is experimental and is missing some features available in
# in other Umple generated languages like Java or PHP

module ExampleOne

class Mentor


  #------------------------
  # MEMBER VARIABLES
  #------------------------

  #Mentor Attributes - for documentation purposes
  #attr_reader :name

  #Mentor Associations - for documentation purposes
  #attr_reader :student

  #------------------------
  # CONSTRUCTOR
  #------------------------

  def initialize(a_name)
    @initialized = false
    @deleted = false
    @name = a_name
    @student = nil
    @initialized = true
  end

  #------------------------
  # INTERFACE
  #------------------------

  def set_name(a_name)
    was_set = false
    @name = a_name
    was_set = true
    was_set
  end

  def get_name
    @name
  end

  def get_student
    @student
  end

  def has_student
    has = !@student.nil?
    has
  end

  def set_student(a_student)
    #
    # self source of self source generation is association_SetOptionalOneToMandatoryMany.jet
    # self set file assumes the generation of a maximumNumberOfXXX method does not exist because 
    # it's not required (No upper bound)
    #   
    
    wasSet = false
    
    existing_student = student;
    
    if existing_student.nil?
      if !a_student.nil
        if a_student.add_mentor(self)
          existing_student = a_student
          wasSet = true
        end
      end
    elsif existing_student != null
      if a_student == null
        if existing_student.minimum_number_of_mentors() < existing_student.number_of_mentors()
          existing_student.remove_mentor(self);
          existing_student = a_student;  # a_student == null
          wasSet = true;
        end
      else
        if existing_student.minimum_number_of_mentors() < existing_student.number_of_mentors()
          existing_student.remove_mentor(self);
          a_student.add_mentor(self);
          existing_student = a_student;
          wasSet = true;
        end
      end
    end
    
    if wasSet == true
      student = existing_student;
    end
    
    return wasSet;
  end

  def delete
    @deleted = true
    unless @student.nil?
      if @student.number_of_mentors <= 1
        @student.delete
      else
        @student.remove_mentor(self)
      end
    end
  end

end
end
