// UML State machine of an elevator moving among floors

class Elevator {
  
  elevator_state_machine {
    Idle {
      upRequest -> PrepareUp;
      downRequest -> PrepareDown;
    }
    PrepareUp {
      DoorClosingMovingUp {
        doorClosed -> / {goUp();} InMotion;
      }
      started -> Moving;
    }
    PrepareDown {
      DoorClosingMovingDown {
        doorClosed  -> / {goDown();} InMotion;
      }
      started -> Moving;
    }

    InMotion {
      Moving {
        approachingFloor [!floorRequested] -> Moving;
        approachedFloor  [floorRequested] -> / {stop();} Stopping;
      }
      Stopping {
        stopped -> / {openDoor();} DoorOpening;
      } 
    } 

    OnFloor {    
      DoorOpening {
        doorOpened  -> AtFloor;
      }
      AtFloor {
        after(timer) [!obstruction] -> DoorClosing;
        doorClosingRequest -> DoorClosing;
      }
      DoorClosing {
        doorCLosed -> CheckingNextDestination;
        obstruction -> DoorOpening;
        doorOpeningRequest -> DoorOpening;
      }
      CheckingNextDestination {
        upRequest -> PrepareUp;
        downRequest -> PrepareDown;
        noRequest -> Idle;
      }
    } 
  }
  Integer timer = 100;
  void goUp(){}
  void goDown(){}
  void stop(){}
  void openDoor(){}  
  //Boolean floorRequested() {return false;}
  Boolean floorRequested = false;
  Boolean obstruction;
}