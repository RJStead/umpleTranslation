//  From Book by Lethbridge and Laganiere, McGraw Hill 2004
//  Object-Oriented Software Engineering: Practical Software Engineering using UML and Java
//  See http://www.lloseng.com

class CarTransmission {

  Boolean driveSelected;
   Boolean notdriveSelected;
   Integer a = 5;
   Integer b = 3;
   Integer c = 2;
  state {
    neutral {
      selectReverse -> reverse;
      selectDrive -> drive;
      selectFirst -> first;
      selectSecond -> second;
    }
    
    reverse {
      selectNeutral -> neutral;
    }
    
    drive {
      selectNeutral -> neutral;
      selectFirst -> first;
      selectSecond -> second;
    
      first {
        reachSecondSpeed [driveSelected]  -> second;        
      }
      
      second {
        reachThirdSpeed [!driveSelected] -> third;
        dropBelowSecondSpeed [ ((a > b) || (driveSelected && (!(b >= a) && (c < b))))] -> first;
        dropBelowSecondSpeed [ ( (a + c) > b) ] -> first;
        dropBelowSecondSpeed [ (a - c) > b] -> first;
        dropBelowSecondSpeed [ (a - c) > (b + 2)] -> first;
        dropBelowSecondSpeed [ (a - c) > (b * 2)] -> first;
        dropBelowSecondSpeed [ ((a - c) > (b * 2)) && driveSelected] -> first;
        dropBelowSecondSpeed [ ((a - c) > (b * 2)) || ((a - c) > (b * 2))] -> first;
        dropBelowSecondSpeed [ ((a - c) > (b * 2)) || ((a - c) > (b ^ 2))] -> first;
        dropBelowSecondSpeed [ ((a - c) > (b * 2)) || driveSelected] -> first; //when a = driveSelected
        dropBelowSecondSpeed [ ((a - c) > (b * 2)) != ((a - c) > (b ^ 2))] -> first;
        dropBelowSecondSpeed [ ((a - c) > (b * 2)) == ((a - c) > (b ^ 2))] -> first;
      }
      
      third {
        dropBelowThirdSpeed [ ((a - c) > (b * 2)) == ((a - c) > (b ^ 2))] -> second;
        dropBelowThirdSpeed-> second;
      }
    }
   
  }
}
