/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



////---- Tests for  GenericTestCase_association_toSingular ----/////

test GenericTestCase_association_toSingular {

generate JUnit;

depend  Calculator,Number ; 




GIVEN:
GenericTestCase_association_toSingular.ump;
THEN:
 
  /*-------------------------*/
  /*  Association Test       */
  /*-------------------------*/
  /*-------------------------*/
  /*  Class Calculator       */
  /*-------------------------*/

              
              /////// Association: -- [1,1] Number /////// 
              
              test createCalculatorWithoutNumber {              
              
              Calculator aCalculator();
              
              assertTrue (aCalculator.numberOfNumbers()== 0);
              }
              
              
              
              test replaceMandatoryOneCalculatorInNumber { 
              
                                          
              Calculator baCalculator();
              
              Calculator aCalculator();

              Number aNumber(aCalculator); 
              Number baNumber(aCalculator);
              
              aNumber.setCalculator(baCalculator);
              assertEqual (aNumber.getCalculator() , baCalculator);              
              assertEqual(baNumber.getCalculator() , aCalculator );
                            
              }
              
              
              
              test removeNumberInCalculator {
              
              
              Calculator baCalculator();
              Calculator aCalculator();

              Number aNumber(aCalculator);
              aCalculator.addNumber(aNumber);
              
              aNumber.delete(); 
              assertTrue (aCalculator.numberOfNumbers() == 0);
              }
              
              
              
              
              test AddNumberToNewCalculator { 
              
              
              Calculator baCalculator();
              
              Calculator aCalculator();

              Number aNumber(aCalculator);
              Number baNumber(aCalculator);
              

              aCalculator.addNumber(aNumber);
              aCalculator.addNumber(baNumber);  
        
              assertEqual( aCalculator.getNumber(1),baNumber); 
              assertEqual ( baNumber.getCalculator(), aCalculator);
              assertEqual ( aCalculator.numberOfNumbers(),  2);
              }
              
              
              
  /*-------------------------*/
  /*  Class Number       */
  /*-------------------------*/

              
              /////// Association: -- [0,*] Calculator /////// 
              
              test createNumberWithCalculator {              
              Calculator aCalculator();

              Number aNumber(aCalculator);
              
              assertTrue (aNumber.getCalculator() == aCalculator);
              }
              
              
              
              test replaceManyCalculatorInOneNumber{ 
              
              
              Calculator baCalculator();
              
              
              
              Calculator aCalculator();
                            
              Number aNumber(aCalculator);
              
                            
              //Calculator baCalculator();
              
              aNumber.setCalculator(baCalculator);
              
              assertEqual ( aNumber.getCalculator(),baCalculator);              
              
                            
              }
              
              
              
 
 

 }