/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



////---- Tests for  OneToManyAssociation ----/////

test B {

 generate JUnit ;
 
 depend  B,C,Z,X,A ; 



 
 GIVEN:
 OneToManyAssociation.ump;
 
 
 
 THEN:
 

  
 
   

}
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



////---- Tests for  OneToManyAssociation ----/////

test C {

 generate JUnit ;
 
 depend  B,C,Z,X,A ; 



 
 GIVEN:
 OneToManyAssociation.ump;
 
 
 
 THEN:
 

  
 
   

}
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



////---- Tests for  OneToManyAssociation ----/////

test Z {

 generate JUnit ;
 
 depend  B,C,Z,X,A ; 



 
 GIVEN:
 OneToManyAssociation.ump;
 
 
 
 THEN:
 

  
 
   

}
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



////---- Tests for  OneToManyAssociation ----/////

test X {

 generate JUnit ;
 
 depend  B,C,Z,X,A ; 



 
 GIVEN:
 OneToManyAssociation.ump;
 
 
 
 THEN:
 

  
 
   

}
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/



////---- Tests for  OneToManyAssociation ----/////

test A {

 generate JUnit ;
 
 depend  B,C,Z,X,A ; 



 
 GIVEN:
 OneToManyAssociation.ump;
 
 
 
 THEN:
  //tests for :id

      test attribute_id {
    
      B aB(aC);

        A aA("RandomString1",aB);
        
        
    assertTrue( aA.setId("RandomString1"));
    assertTrue( aA.getId() =="RandomString1");
    assertTrue( aA.setId("RandomString2"));
    assertTrue( aA.getId()=="RandomString2");
    assertFalse( aA.getId() =="RandomString1");
             
          
        	}


  
 
   

}