//  From Book by Lethbridge and Laganiere, McGraw Hill 2004
//  Object-Oriented Software Engineering: Practical Software Engineering using UML and Java
//  See http://www.lloseng.com

class CarTransmission {

  Boolean driveSelected;
   Boolean notdriveSelected;
   Integer a = 5;
   Integer b = 3;
   Integer c = 2;
   state {
    neutral {
      selectReverse -> reverse;
      selectDrive -> drive;
      selectFirst -> first;
      selectSecond -> second;
    }
    
    reverse {
      selectNeutral -> neutral;
    }
    
    drive {
      selectNeutral -> neutral;
      selectFirst -> first;
      selectSecond -> second;
    
      first {
        reachSecondSpeed [driveSelected]  -> second;    

				first_one {
					e1 -> first_two;
				}  
				
				first_two {

					first_two_one {
						e1 -> first_two;
						e2 -> first_two_two;
						first_two_one_one {}
					}

					||

					first_two_two {
						e1 -> first_two;
						first_two_two_one {
              e2 -> s21;
            }
						s21 { e5 -> s22; }
            s22 { 
              e7 -> s21; 
              e11 -> s31;
            } 
            s24 { 
              e2 -> s32;
              e3 -> s21;
              s31 { e9 -> s31; e10 -> s32; }
              s32 { }
            }
					}
				}  
      }
      
      second {
        reachThirdSpeed [!driveSelected] -> third;
        dropBelowSecondSpeed [ ((a > b) || (driveSelected && (!(b >= a) && (c < b))))] -> first;
        dropBelowSecondSpeed [ ( (a + c) > b) ] -> first;
        dropBelowSecondSpeed [ (a - c) > b] -> first;
        dropBelowSecondSpeed [ (a - c) > (b + 2)] -> first;
        dropBelowSecondSpeed [ (a - c) > (b * 2)] -> first;
        dropBelowSecondSpeed [ ((a - c) > (b * 2)) && driveSelected] -> first;
        dropBelowSecondSpeed [ ((a - c) > (b * 2)) || ((a - c) > (b * 2))] -> first;
        dropBelowSecondSpeed [ ((a - c) > (b * 2)) || ((a - c) > (b ^ 2))] -> first;
        dropBelowSecondSpeed [ ((a - c) > (b * 2)) || driveSelected] -> first; //when a = driveSelected
        dropBelowSecondSpeed [ ((a - c) > (b * 2)) != ((a - c) > (b ^ 2))] -> first;
        dropBelowSecondSpeed [ ((a - c) > (b * 2)) == ((a - c) > (b ^ 2))] -> first;
      }
      
      third {
        dropBelowThirdSpeed [ ((a - c) > (b * 2)) == ((a - c) > (b ^ 2))] -> second;
        dropBelowThirdSpeed-> second;
      }
    }
   
  }
}
