class UmpleToJava {
  association_GetMany_specialization <<!  /* Code from template association_GetMany_specialization */
<</*association_GetMany_specialization*/>>  public <<=gen.translate("type",av)>> <<=gen.translate("getMethod",av)>>_<<=gen.translate("type",av)>>(int index)
  {
    <<# if (customGetPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customGetPrefixCode,gen.translate("getMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customGetPrefixCode, "    ")); } #>><<# for( TraceItem traceItem : traceItems ) #>><<= 
(traceItem!=null&&traceItem.getIsPre()?"\n"+traceItem.trace(gen, av,"as_g", uClass,gen.translate("associationMany",av)+".get(index)"):"")
>>
    <<=gen.translate("type",av)>> <<=gen.translate("parameterOne",av)>> = (<<=gen.translate("type",av)>>)super.<<=gen.translate("getMethod",av)>>(index);<<# for( TraceItem traceItem : traceItems ) #>><<= 
(traceItem!=null&&traceItem.getIsPost()?"\n"+traceItem.trace(gen, av,"as_g", uClass,gen.translate("parameterOne",av)):"")
>>
    <<# if (customGetPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customGetPostfixCode,gen.translate("getMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customGetPostfixCode, "    ")); } #>>
    return <<=gen.translate("parameterOne",av)>>;
  }

  
<<# if (av.numberOfComments() > 0 && av.numberOfRequirements() > 0) { List<Comment> toComment = new ArrayList<Comment>(av.getComments()); toComment.addAll(Requirement.convertToComment(av.getRequirements())); append(realSb, "\n  {0}", Comment.format("Attribute Javadoc", toComment)); } #>><<# if (av.numberOfComments() > 0 && av.numberOfRequirements() == 0) { append(realSb, "\n  {0}", Comment.format("Attribute Javadoc", av.getComments())); } #>><<# if (av.numberOfComments() == 0 && av.numberOfRequirements() > 0) { append(realSb, "\n  {0}", Requirement.format("Attribute Javadoc", av.getRequirements())); } #>><<= umpleSourceFile >>
  /* required for Java 7. */
  @SuppressWarnings("unchecked")
  public List<<<=gen.translate("type",av)>>> <<=gen.translate("getManyMethod",av)>>_<<=gen.translate("type",av)>>()
  {
    <<# if (customGetManyPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customGetManyPrefixCode,gen.translate("getManyMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customGetManyPrefixCode, "    ")); } #>>
    <<#String scgName = relatedAssoc.getEnd(av.getRelevantEnd()).getSuperClassName();#>>
    List<? extends <<=scgName>>> <<=gen.translate("parameterMany",av)>> = super.<<=gen.translate("getManyMethod",av)>>();
    <<# if (customGetManyPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customGetManyPostfixCode,gen.translate("getManyMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customGetManyPostfixCode, "    ")); } #>>
    return (List<<<=gen.translate("type",av)>>>)<<=gen.translate("parameterMany",av)>>;
  }
!>>
}
