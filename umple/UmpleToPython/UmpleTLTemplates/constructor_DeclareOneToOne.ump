use constructor_AssociationAssignDefault.ump;
use constructor_AssociationAssignOptionalMany.ump;
use constructor_AssociationCreateOneToOne.ump;
use constructor_AttributeAssign.ump;
use constructor_AttributeAssignAutounique.ump;
use constructor_AttributeAssignUnique.ump;
use constructor_AttributeAssignDefaulted.ump;
use constructor_AttributeAssignLazy.ump;
use constructor_AttributeAssignList.ump;
use specializationCode_Constructor.ump;


class UmpleToJava {
    constructor_DeclareOneToOne <<!<</*constructor_DeclareOneToOne*/>><<#
  
  String signature = gClass.getLookup("constructorSignature_mandatory");
  hasBody = false;
#>>

  public <<=uClass.getName()>>(<<=gen.translate("constructorMandatory",uClass)>><<=componentSignature>>)
  {
   
<<#

  if (!uClass.isRoot())
  {
    appendln(realSb, "");
    append(realSb, "    super({0}{1});", gClass.getParentClass().getLookup("constructorSignature_caller"),componentSignatureCaller);
    hasBody = true;
  }
  if(uClass.getIsDistributed()&&model.getDistributePattern()==0)
  {     
    appendln(realSb, "");
    appendln(realSb, "    if(umpleComponent.getNode().getId()!=UmpleRuntime.getThisNodeId())");
    appendln(realSb, "    {");
    appendln(realSb, "      if(this.getClass()== {0}.class)",uClass.getName());
    appendln(realSb, "        UmpleRuntime.getInstance().new{0}({1}{2} umpleComponent, this);",uClass.getName(),gClass.getLookup("constructorSignature_caller"),lastArgumentComma);    
    appendln(realSb, "");
    appendln(realSb, "      return;");
    appendln(realSb, "    }");
    if(uClass.isRoot()||!uClass.getExtendsClass().getIsDistributed())
    {
      appendln(realSb, "    else");
      appendln(realSb, "    {");
      appendln(realSb, "      UmpleRuntime.getInstance().new{0}(this);",uClass.getName());
      appendln(realSb, "    }");
    }
    hasBody = true;
  }
  if (customConstructorPrefixCode != null) 
  {
    addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customConstructorPrefixCode,uClass.getName());
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customConstructorPrefixCode, "    "));
    hasBody = true;
  }
  
  for (Attribute av : uClass.getAttributes())
  {
    if (av.getIsAutounique() || av.isConstant() || "theInstance".equals(gen.translate("attributeOne",av)))
    {
      continue;
    }
  
    if (av.getIsList())
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AttributeAssignList >><<#
    }
    else if (av.getModifier().equals("defaulted"))
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AttributeAssignDefaulted >><<# 
    }
    else if (av.getIsLazy())
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AttributeAssignLazy >><<#
    }
    else if(av.getIsUnique())
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AttributeAssignUnique >><<#
    }
    else
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AttributeAssign >><<#
    }
  }

  for (Attribute av : uClass.getAttributes())
  {
    if (av.getIsAutounique())
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AttributeAssignAutounique >><<#
    }
  }
  
  for (AssociationVariable av : uClass.getAssociationVariables()) 
  {
    #>><<@ UmpleToJava.specializationCode_Constructor >><<#
    
    if (av.isOnlyOne() && relatedAssociation.isOnlyOne())
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AssociationCreateOneToOne >><<#
    }
    else if ((av.isMN() || av.isN()) && (relatedAssociation.isMandatory() || relatedAssociation.isOptionalN()))
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AssociationAssignOptionalMany >><<#
    }
    else
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AssociationAssignDefault >><<#
    }
  }
  
  if (customConstructorPostfixCode != null) 
  {
    addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customConstructorPostfixCode,uClass.getName());
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customConstructorPostfixCode, "    "));
    hasBody = true;
  }
  
  if (hasBody)
  {
    appendln(realSb, "");
    append(realSb, "  }");
  }
  else
  {
    append(realSb, "}");
  }
#>>!>>
}
