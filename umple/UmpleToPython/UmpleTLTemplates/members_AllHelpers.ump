use specializationCode.ump;


class UmpleToJava {
    members_AllHelpers <<!<</*members_AllHelpers*/>><<#
{

  isFirst = true;
  if (uClass.getKey().isProvided())
  {
    isFirst = false;
    appendln(realSb, "");
    appendln(realSb, "");
    appendln(realSb,"  //Helper Variables");
    append(realSb, "  private{0} int cachedHashCode;",isTransient);
  }

  for (Attribute av : uClass.getAttributes())
  {
    if (av.isImmutable() && av.isIsLazy())
    {
      if (isFirst)
      {
        isFirst = false;
        appendln(realSb, "");
        appendln(realSb, "");
        appendln(realSb,"  //Helper Variables");
      } 
      else
      {
        appendln(realSb, "");
      }
      append(realSb, "  private{1} boolean {0};", gen.translate("attributeCanSet",av),isTransient);
    }
  }
  
  for (AssociationVariable av : uClass.getAssociationVariables())
  {

    #>><<@ UmpleToJava.specializationCode >><<#
    if (!av.getIsNavigable())
    {
      continue;
    }
    if (av.isImmutable())
    {
      if (isFirst)
      {
        isFirst = false;
        appendln(realSb, "");
        appendln(realSb, "");
        appendln(realSb,"  //Helper Variables");
      } 
      else
      {
        appendln(realSb, "");
      }
      append(realSb, "  private{1} boolean {0};", gen.translate("associationCanSet",av),isTransient);
    }
  }
  
  for(String memberId : uClass.getKey().getMembers())
  {
    Attribute av = uClass.getAttribute(memberId);
    AssociationVariable as = uClass.getAssociationVariable(memberId);
    if (av != null  && !av.isImmutable())
    {
      appendln(realSb, "");
      append(realSb, "  private{1} boolean {0};", gen.translate("attributeCanSet",av),isTransient);
    }
    else if (as != null)
    {
      appendln(realSb, "");
      append(realSb, "  private{1} boolean {0};", gen.translate("associationCanSet",as),isTransient);
    }
  }
  
  for(StateMachine sm : uClass.getStateMachines())
  {
    for (Event e : sm.getEvents())
    {
      if (!e.getIsTimer())
      {
        continue;
      }
    
      if (isFirst)
      {
        isFirst = false;
        appendln(realSb, "");
        appendln(realSb, "");
        appendln(realSb,"  //Helper Variables");
      }
      else
      {
        appendln(realSb, "");
      }
      append(realSb, "  private{1} TimedEventHandler {0};", gen.translate("eventHandler",e,sm),isTransient);
    }
  }

  for (StateMachine sm : uClass.getStateMachines())
  {
    if(!sm.getNestedStateMachines().isEmpty())
    {
      for (StateMachine nsm : sm.getNestedStateMachines())
      {
        for (Event event : nsm.getEvents())
        {
          if(!event.getIsTimer())
          {
            continue;
          }
         
          if (isFirst)
          {
            isFirst = false;
            appendln(realSb, "");
            appendln(realSb, "");
            appendln(realSb,"  //Helper Variables");
          }
          else
          {
            appendln(realSb, "");
          }
          append(realSb, "  private{1} TimedEventHandler {0};", gen.translate("eventHandler", event),isTransient);
        }
      }
    }
  }
  for (Method m : uClass.getMethods())
  {
    if(m.getIsQueued())
    {
      if (isFirst)
      {
        isFirst = false;
        appendln(realSb, "");
        appendln(realSb, "");
        appendln(realSb,"  //Helper Variables");
      }
      append(realSb, "\n  protected enum QueuedMethod { {0} }", gen.translate("listQueuedMethods",uClass));
      appendln(realSb, "  QueuedMethodThread queuedMethodThread;");
      break;
    }
  }
}
#>>!>>
}
