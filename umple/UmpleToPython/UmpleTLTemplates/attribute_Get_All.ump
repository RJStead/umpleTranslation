use attribute_Get.ump;
use attribute_GetCodeInjection.ump;
use attribute_GetDefaulted.ump;
use attribute_GetDefaultedCodeInjection.ump;
use attribute_GetDefaultedSubclass.ump;
use attribute_GetDerived.ump;
use attribute_GetDerivedCodeInjection.ump;
use attribute_GetDerivedSubclass.ump;
use attribute_GetMany.ump;
use attribute_GetManySubclass.ump;
use attribute_GetUnique.ump;
use attribute_GetUniqueCodeInjection.ump;
use attribute_GetUniqueSubclass.ump;
use attribute_GetSubclass.ump;
use attribute_HasUnique.ump;
use attribute_HasUniqueCodeInjection.ump;

class UmpleToJava {
    attribute_Get_All <<!<</*attribute_Get_All*/>><<#
  // GENERIC FILE - EDIT IN UmpleToTemplate project, then run "ant -f build.codegen.xml to move into the appropriate projects
  for (Attribute av : uClass.getAttributes()) 
  {
    if (av.getIsAutounique() || av.isConstant() || "internal".equals(av.getModifier()))
    {
      continue;
    }
    
    gen.setParameterConstraintName(av.getName());

    List<TraceItem> traceItems = av.getTraced("getMethod", uClass);
    
    String customGetPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("getMethod",av)));
    String customGetPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("getMethod",av)));

    String customGetDefaultPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("getDefaultMethod",av)));
    String customGetDefaultPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("getDefaultMethod",av)));

    String customGetManyPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("getManyMethod",av)));
    String customGetManyPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("getManyMethod",av)));

    String customNumberOfPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("numberOfMethod",av)));
    String customNumberOfPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("numberOfMethod",av)));

    String customHasManyPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("hasManyMethod",av)));
    String customHasManyPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("hasManyMethod",av)));

    String customIndexOfPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("indexOfMethod",av)));
    String customIndexOfPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("indexOfMethod",av)));
        
    String customHasUniquePrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("hasUniqueMethod",av)));
    String customHasUniquePostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("hasUniqueMethod",av)));
    
    String customGetUniquePrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("getUniqueMethod",av)));
    String customGetUniquePostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("getUniqueMethod",av)));

    if (av.getIsList())
    {
      #>><<@ UmpleToJava.attribute_GetMany >><<#
    }
    else 
    {

      if (av.getIsDerived() && (customGetPostfixCode != null || customGetPrefixCode != null))
      {
        #>><<@ UmpleToJava.attribute_GetDerivedCodeInjection >><<#
      }
      else if (av.getIsDerived())
      {
        #>><<@ UmpleToJava.attribute_GetDerived >><<#
      }
      else if (customGetPostfixCode != null)
      {
        #>><<@ UmpleToJava.attribute_GetCodeInjection >><<#
      }
      else
      {
        #>><<@ UmpleToJava.attribute_Get >><<#
      }
      
      appendln(realSb, "");
      
      if (av.getModifier().equals("defaulted") && customGetDefaultPostfixCode != null)
      {
        #>><<@ UmpleToJava.attribute_GetDefaultedCodeInjection >><<#
      }
      else if (av.getModifier().equals("defaulted"))
      {
        #>><<@ UmpleToJava.attribute_GetDefaulted >><<#
      }
      
      if (av.getIsUnique())
      {
        if (customGetUniquePostfixCode != null)
        {
          #>><<@ UmpleToJava.attribute_GetUniqueCodeInjection >><<#
        } 
        else 
        {
          #>><<@ UmpleToJava.attribute_GetUnique >><<#
        }
        if (customHasUniquePostfixCode != null)
        {
          #>><<@ UmpleToJava.attribute_HasUniqueCodeInjection >><<#
        }
        else
        {
          #>><<@ UmpleToJava.attribute_HasUnique >><<#
        }
      }
    }
  }

  for (Attribute av : uClass.getAttributes()) 
  {
  
    if (av.getIsAutounique())
    {
      String customGetPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("getMethod",av)));
      String customGetPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("getMethod",av)));
      
      List<TraceItem> traceItems = av.getTraced("getMethod", uClass);
      
      if (customGetPostfixCode != null)
      {
        #>><<@ UmpleToJava.attribute_GetCodeInjection >><<#
      }
      else
      {
        #>><<@ UmpleToJava.attribute_Get >><<#
      }
      appendln(realSb, "");
    }
  }
  
  if(uClass.getExtendsClass()!=null)
  {
    for(Attribute av:uClass.getExtendsClass().getAttributes())
    {
      if (av.isConstant())
      {
        continue;
      }

      List<TraceItem> traceItems = av.getTraced("getMethod", uClass);

      gen.setParameterConstraintName(av.getName());

	  String customGetPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("getMethod",av)));
	  String customGetPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("getMethod",av)));

	  String customGetDefaultPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("getDefaultMethod",av)));
	  String customGetDefaultPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("getDefaultMethod",av)));

	  String customGetManyPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("getManyMethod",av)));
	  String customGetManyPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("getManyMethod",av)));
	  
	  String customGetUniquePrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("getUniqueMethod",av)));
	  String customGetUniquePostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("getUniqueMethod",av)));

      
      if (customGetDefaultPrefixCode!=null || customGetDefaultPostfixCode!=null)
      {
        #>><<@ UmpleToJava.attribute_GetDefaultedSubclass >><<#
      }
      else if (customGetManyPrefixCode!=null || customGetManyPostfixCode!=null)
      {
        #>><<@ UmpleToJava.attribute_GetManySubclass >><<#
      }
      else if (customGetUniquePrefixCode!=null || customGetUniquePostfixCode!=null)
      {
        #>><<@ UmpleToJava.attribute_GetUniqueSubclass >><<#
      }
      else if(customGetPrefixCode!=null||customGetPostfixCode!=null)
      {
        if (av.getIsDerived())
        {
          #>><<@ UmpleToJava.attribute_GetDerivedSubclass >><<#
        }
        else
        {
          #>><<@ UmpleToJava.attribute_GetSubclass >><<#
        }
      }
              
    }
  }
  gen.setParameterConstraintName("");
#>>!>>
}
