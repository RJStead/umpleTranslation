class UmpleToJava {
  attribute_GetMany <<!  /* Code from template attribute_GetMany */
<</*attribute_GetMany*/>>  public <<=gen.translate("typeMany",av)>> <<=gen.translate("getMethod",av)>>(int index)
  {
    <<# if (customGetPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customGetPrefixCode,gen.translate("getMethod",av));
     append(realSb, "\n{0}",GeneratorHelper.doIndent(customGetPrefixCode, "    ")); } #>>
    <<= gen.translate("typeMany",av)>> <<=gen.translate("parameterOne",av)>> = <<=gen.translate("attributeMany",av)>>.get(index);
    <<# for( TraceItem traceItem : traceItems ) #>><<= (traceItem!=null?traceItem.trace(gen, av,"at_g", uClass):"")>>


<<# if (customGetPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customGetPostfixCode,gen.translate("getMethod",av));
    append(realSb, "{0}\n",GeneratorHelper.doIndent(customGetPostfixCode, "    ")); } #>>    return <<=gen.translate("parameterOne",av)>>;
  }

  public <<=gen.translate("typeMany",av)>>[] <<=gen.translate("getManyMethod",av)>>()
  {
    <<# if (customGetManyPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customGetManyPrefixCode,gen.translate("getManyMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customGetManyPrefixCode, "    ")); } #>>
    <<= gen.translate("typeMany",av)>>[] <<=gen.translate("parameterMany",av)>> = <<=gen.translate("attributeMany",av)>>.toArray(new <<=gen.translate("typeMany",av)>>[<<=gen.translate("attributeMany",av)>>.size()]);
    <<# for( TraceItem traceItem : traceItems ) #>><<= (traceItem!=null?traceItem.trace(gen, av,"at_ga", uClass):"")>>


<<# if (customGetManyPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customGetManyPostfixCode,gen.translate("getManyMethod",av)); 
    append(realSb, "{0}\n",GeneratorHelper.doIndent(customGetManyPostfixCode, "    ")); } #>>    return <<=gen.translate("parameterMany",av)>>;
  }

  public int <<=gen.translate("numberOfMethod",av)>>()
  {
    <<# if (customNumberOfPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customNumberOfPrefixCode,gen.translate("numberOfMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customNumberOfPrefixCode, "    ")); } #>>
    int number = <<=gen.translate("attributeMany",av)>>.size();
    <<# for( TraceItem traceItem : traceItems ) #>><<= (traceItem!=null?traceItem.trace(gen, av,"at_n", uClass, "number"):"")>>


<<# if (customNumberOfPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customNumberOfPostfixCode,gen.translate("numberOfMethod",av));
    append(realSb, "{0}\n",GeneratorHelper.doIndent(customNumberOfPostfixCode, "    ")); } #>>    return number;
  }

  public boolean <<=gen.translate("hasManyMethod",av)>>()
  {
    <<# if (customHasManyPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customHasManyPrefixCode,gen.translate("hasManyMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customHasManyPrefixCode, "    ")); } #>>
    boolean has = <<=gen.translate("attributeMany",av)>>.size() > 0;
    <<# for( TraceItem traceItem : traceItems ) #>><<= (traceItem!=null?traceItem.trace(gen, av,"at_h", uClass):"")>>


<<# if (customHasManyPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customHasManyPostfixCode,gen.translate("hasManyMethod",av)); 
    append(realSb, "{0}\n",GeneratorHelper.doIndent(customHasManyPostfixCode, "    ")); }#>>    return has;
  }

  public int <<=gen.translate("indexOfMethod",av)>>(<<=gen.translate("typeMany",av)>> <<=gen.translate("parameterOne",av)>>)
  {
    <<# if (customIndexOfPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customIndexOfPrefixCode,gen.translate("indexOfMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customIndexOfPrefixCode, "    ")); } #>>
    int index = <<=gen.translate("attributeMany",av)>>.indexOf(<<=gen.translate("parameterOne",av)>>);
    <<# for( TraceItem traceItem : traceItems ) #>><<= (traceItem!=null?traceItem.trace(gen, av,"at_i", uClass, gen.translate("parameterOne",av), "index"):"")>>


<<# if (customIndexOfPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customIndexOfPostfixCode,gen.translate("indexOfMethod",av)); 
    append(realSb, "{0}\n",GeneratorHelper.doIndent(customIndexOfPostfixCode, "    ")); } #>>    return index;
  }
!>>
}
