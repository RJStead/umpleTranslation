use association_GetPrivate.ump;


class UmpleToJava {
  association_SetMNToOptionalOne_relatedSpecialization <<!  /* Code from template association_SetMNToOptionalOne_relatedSpecialization */<</*association_SetMNToOptionalOne_relatedSpecialization*/>><<#
  String existingToNewMap = StringFormatter.format("{0}ToNew{1}", relatedAssociation.getName(), av.getUpperCaseName());
  String orCheckMaxBound = av.isStar() ? "" : StringFormatter.format(" || {0}.length > {1}{2}{3}()", gen.translate("parameterMany",av), gen.translate("maximumNumberOfMethod",av), "_", gen.translate("type",av));
#>>
  public boolean <<=gen.translate("setManyMethod",av)>>_<<=gen.translate("type",av)>>(<<=gen.translate("type",av)>>... <<=gen.translate("parameterMany",av)>>)
  {
    boolean wasSet = false;
    <<# if (customSetManyPrefixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customSetManyPrefixCode,gen.translate("setManyMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPrefixCode, "    ")); } #>>
    if (<<=gen.translate("parameterMany",av)>>.length < <<=gen.translate("minimumNumberOfMethod",av)>>_<<=gen.translate("type",av)>>()<<=orCheckMaxBound>>)
    {
      <<# if (customSetManyPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customSetManyPostfixCode,gen.translate("setManyMethod",av)); 
      append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "      ")); } #>>
      return wasSet;
    }

    ArrayList<<<=gen.translate("type",av)>>> <<=gen.translate("parameterCheckNewMany",av)>> = new ArrayList<<<=gen.translate("type",av)>>>();
    HashMap<<<=gen.relatedTranslate("type",av)>>,Integer> <<=existingToNewMap>> = new HashMap<<<=gen.relatedTranslate("type",av)>>,Integer>();
    for (<<=gen.translate("type",av)>> <<=gen.translate("parameterOne",av)>> : <<=gen.translate("parameterMany",av)>>)
    {
      if (<<=gen.translate("parameterCheckNewMany",av)>>.contains(<<=gen.translate("parameterOne",av)>>))
      {
        <<# if (customSetManyPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customSetManyPostfixCode,gen.translate("setManyMethod",av)); 
        append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "        ")); } #>>
        return wasSet;
      }
      else if (<<=gen.translate("parameterOne",av)>>.<<=gen.relatedTranslate("getMethod",av)>>(<<# if (relMulChangedToOne) { #>>0<<# } #>>) != null && !this.equals(<<=gen.translate("parameterOne",av)>>.<<=gen.relatedTranslate("getMethod",av)>>(<<# if (relMulChangedToOne) { #>>0<<# } #>>)))
      {
        <<=gen.relatedTranslate("type",av)>> <<=gen.relatedTranslate("parameterExisting",av)>> = <<=gen.translate("parameterOne",av)>>.<<=gen.relatedTranslate("getMethod",av)>>(<<# if (relMulChangedToOne) { #>>0<<# } #>>);
        if (!<<=existingToNewMap>>.containsKey(<<=gen.relatedTranslate("parameterExisting",av)>>))
        {
          <<=existingToNewMap>>.put(<<=gen.relatedTranslate("parameterExisting",av)>>, Integer.valueOf(<<=gen.relatedTranslate("parameterExisting",av)>>.<<=gen.translate("numberOfMethod",av)>>()));
        }
        Integer currentCount = <<=existingToNewMap>>.get(<<=gen.relatedTranslate("parameterExisting",av)>>);
        int nextCount = currentCount - 1;
        if (nextCount < <<=av.getMultiplicity().getLowerBound()>>)
        {
          <<# if (customSetManyPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "          ")); } #>>
          return wasSet;
        }
        <<=existingToNewMap>>.put(<<=gen.relatedTranslate("parameterExisting",av)>>, Integer.valueOf(nextCount));
      }
      <<=gen.translate("parameterCheckNewMany",av)>>.add(<<=gen.translate("parameterOne",av)>>);
    }

    <<=gen.translate("associationMany",av)>>.removeAll(<<=gen.translate("parameterCheckNewMany",av)>>);

    for (<<=gen.translate("type",av)>> orphan : <<=gen.translate("getMethod",av)>>_<<=gen.translate("type",av)>>())
    {
      <<=gen.relatedTranslate("setMethod",av)>><<# if (relReqCommonCode) { #>>_<<=gen.relatedTranslate("type",av)>><<# } #>>(orphan, null);
    }
    <<=gen.translate("associationMany",av)>>.clear();
    for (<<=gen.translate("type",av)>> <<=gen.translate("parameterOne",av)>> : <<=gen.translate("parameterMany",av)>>)
    {
      if (<<=gen.translate("parameterOne",av)>>.<<=gen.relatedTranslate("getMethod",av)>>(<<# if (relMulChangedToOne) { #>>0<<# } #>>) != null)
      {
        <<=gen.translate("parameterOne",av)>>.<<=gen.relatedTranslate("getMethod",av)>>(<<# if (relMulChangedToOne) { #>>0<<# } #>>).<<=gen.translate("associationMany",av)>>.remove(<<=gen.translate("parameterOne",av)>>);
      }
      <<=gen.relatedTranslate("setMethod",av)>><<# if (relReqCommonCode) { #>>_<<=gen.relatedTranslate("type",av)>><<# } #>>(<<=gen.translate("parameterOne",av)>>, this);
      <<=gen.translate("associationMany",av)>>.add(<<=gen.translate("parameterOne",av)>>);
    }
    wasSet = true;
    <<# if (customSetManyPostfixCode != null) { addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customSetManyPostfixCode,gen.translate("setManyMethod",av)); 
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "    ")); } #>>
    return wasSet;
  }
<<@ UmpleToJava.association_GetPrivate >>!>>
}
