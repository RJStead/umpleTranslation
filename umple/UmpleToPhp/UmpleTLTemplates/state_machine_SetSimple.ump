class UmpleToPhp {
    state_machine_SetSimple <<!<</*state_machine_SetSimple*/>><<#
  
  StringBuffer allCases = new StringBuffer();
  StringBuffer allExitCases = new StringBuffer();
  StringBuffer allEnterCases = new StringBuffer();

  for (State state : sm.getStates())
  {
    if (state.getIsStartState())
    {
      allCases.append(StringFormatter.format("if"));
    }
    else
    {
      allCases.append(StringFormatter.format("    elseif"));
    }
    allCases.append(StringFormatter.format(" (${0} == \"{1}\" || ${0} == self::${1})\n",gen.translate("parameterOne",sm),gen.translate("stateOne",state)));
    allCases.append(StringFormatter.format("    {\n"));
    allCases.append(StringFormatter.format("      $this->{0} = self::${1};\n",gen.translate("stateMachineOne",sm),gen.translate("stateOne",state)));
    allCases.append(StringFormatter.format("      return true;\n"));
    allCases.append(StringFormatter.format("    }\n"));

    boolean hasThisEntry = false;
    boolean hasThisExit = false;
    for (Action action : state.getActions())
    {
      if ("exit".equals(action.getActionType()))
      {
        if(!hasThisExit)
        {
          allExitCases.append(StringFormatter.format("    if ($this->{0} == self::${1} && (${2} != self::${1} && ${2} != \"{1}\") )\n    {"
            , gen.translate("stateMachineOne",sm)
            , gen.translate("stateOne",state)
            , gen.translate("parameterOne",sm)
          ));
        }
        hasThisExit = true;
        allExitCases.append("\n      " + action.getActionCode());
      }
      else if ("entry".equals(action.getActionType()))
      {
        if (!hasThisEntry)
        {
          allEnterCases.append(StringFormatter.format("    if ($this->{0} != self::${1} && (${2} == self::${1} || ${2} == \"{1}\") )\n    {"
            , gen.translate("stateMachineOne",sm)
            , gen.translate("stateOne",state)
            , gen.translate("parameterOne",sm)
          ));
        }
        hasThisEntry = true;
        allEnterCases.append("\n      " + action.getActionCode());
      }
    }
    if (state.getHasExitAction()){
     allExitCases.append("\n    }\n");
    }
    if (state.getHasEntryAction()){
     allEnterCases.append("\n    }\n");
    }
  }
  String outputCases = allCases.toString().trim();
  String exitCasesOutput = allExitCases.toString().trim();
  String enterCasesOutput = allEnterCases.toString().trim();

#>>
  public function <<=gen.translate("setMethod",sm)>>($<<= gen.translate("parameterOne",sm) >>)
  {
    <<# if (!exitCasesOutput.isEmpty()) { append(realSb, "\n    {0}",exitCasesOutput); } #>>
    <<# if (!enterCasesOutput.isEmpty()) { append(realSb, "\n    {0}",enterCasesOutput); } #>>
    <<= outputCases >>
    else
    {
      return false;
    }
  }
!>>
}
