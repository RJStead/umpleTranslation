use association_GetPrivate.ump;


class UmpleToPhp {
    association_SetMNToOptionalOne <<!<</*association_SetMNToOptionalOne*/>><<#
  String existingToNewMap = StringFormatter.format("{0}ToNew{1}", relatedAssociation.getName(), av.getUpperCaseName());
  String orCheckMaxBound = av.isStar() ? "" : StringFormatter.format(" || count(${0}) > self::{1}()", gen.translate("parameterMany",av), gen.translate("maximumNumberOfMethod",av));
#>>
  public function <<=gen.translate("setManyMethod",av)>>($<<=gen.translate("parameterMany",av)>>)
  {
    $wasSet = false;
    <<# if (customSetManyPrefixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPrefixCode, "    ")); } #>>
    if (count($<<=gen.translate("parameterMany",av)>>) < self::<<=gen.translate("minimumNumberOfMethod",av)>>()<<=orCheckMaxBound>>)
    {
      <<# if (customSetManyPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "      ")); } #>>
      return $wasSet;
    }

    $<<=gen.translate("parameterCheckNewMany",av)>> = array();
    $<<=existingToNewMap>> = array();
    foreach ($<<=gen.translate("parameterMany",av)>> as $<<=gen.translate("parameterOne",av)>>)
    {
      if (array_search($<<=gen.translate("parameterOne",av)>>,$<<=gen.translate("parameterCheckNewMany",av)>>) !== false)
      {
        <<# if (customSetManyPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "        ")); } #>>
        return $wasSet;
      }
      else if ($<<=gen.translate("parameterOne",av)>>-><<=gen.relatedTranslate("getMethod",av)>>() != null && $this !== $<<=gen.translate("parameterOne",av)>>-><<=gen.relatedTranslate("getMethod",av)>>())
      {
        $<<=gen.relatedTranslate("parameterExisting",av)>> = $<<=gen.translate("parameterOne",av)>>-><<=gen.relatedTranslate("getMethod",av)>>();
        $<<=gen.relatedTranslate("parameterExistingSerialized",av)>> = serialize($<<=gen.relatedTranslate("parameterExisting",av)>>);
        if (!array_key_exists($<<=gen.relatedTranslate("parameterExistingSerialized",av)>>, $<<=existingToNewMap>>))
        {
          $<<=existingToNewMap>>[$<<=gen.relatedTranslate("parameterExistingSerialized",av)>>] = $<<=gen.relatedTranslate("parameterExisting",av)>>-><<=gen.translate("numberOfMethod",av)>>();
        }
        $nextCount = $<<=existingToNewMap>>[$<<=gen.relatedTranslate("parameterExistingSerialized",av)>>] - 1;
        if ($nextCount < self::minimum<<=gen.translate("numberOfMethod",av)>>())
        {
          <<# if (customSetManyPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "        ")); } #>>
          return $wasSet;
        }
        $<<=existingToNewMap>>[$<<=gen.relatedTranslate("parameterExistingSerialized",av)>>] = $nextCount;
      }
      $<<=gen.translate("parameterCheckNewMany",av)>>[] = $<<=gen.translate("parameterOne",av)>>;
    }

    foreach ($this-><<=gen.translate("associationMany",av)>> as $orphan) 
    {
      $wasFound = false;
      foreach ($<<=gen.translate("parameterCheckNewMany",av)>> as $fosterCare)
      {
        if ($orphan == $fosterCare)
        {
          $wasFound = true;
          break;
        }
      }
      
      if (!$wasFound)
      {
        $this-><<=gen.relatedTranslate("setMethod",av)>>($orphan, null);
      }
    }

    $this-><<=gen.translate("associationMany",av)>> = array();
    foreach ($<<=gen.translate("parameterMany",av)>> as $<<=gen.translate("parameterOne",av)>>)
    {
      if ($<<=gen.translate("parameterOne",av)>>-><<=gen.relatedTranslate("getMethod",av)>>() != null)
      {
        unset($<<=gen.translate("parameterOne",av)>>-><<=gen.relatedTranslate("getMethod",av)>>()-><<=gen.translate("associationMany",av)>>[$<<=gen.translate("parameterOne",av)>>-><<=gen.relatedTranslate("getMethod",av)>>()-><<=gen.translate("indexOfMethod",av)>>($<<=gen.translate("parameterOne",av)>>)]);
        $<<=gen.translate("parameterOne",av)>>-><<=gen.relatedTranslate("getMethod",av)>>()-><<=gen.translate("associationMany",av)>> = array_values($<<=gen.translate("parameterOne",av)>>-><<=gen.relatedTranslate("getMethod",av)>>()-><<=gen.translate("associationMany",av)>>);
      }
      $this-><<=gen.relatedTranslate("setMethod",av)>>($<<=gen.translate("parameterOne",av)>>, $this);
      $this-><<=gen.translate("associationMany",av)>>[] = $<<=gen.translate("parameterOne",av)>>;
    }
    $wasSet = true;
    <<# if (customSetManyPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "    ")); } #>>
    return $wasSet;
  }
<<@ UmpleToPhp.association_GetPrivate >>!>>
}
