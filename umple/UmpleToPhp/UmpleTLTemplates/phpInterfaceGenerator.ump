use UmpleNotice.ump;
use interface_AbstractMethodDeclaration.ump;
use interface_constantDeclaration.ump;

namespace cruise.umple.compiler.php;

external interface ILang{}

class PhpInterfaceGenerator {
    depend cruise.umple.compiler.*;
    depend cruise.umple.util.*;
    depend java.util.*;

    isA ILang;

    // Add a newline to the end of the input
    private void appendln(StringBuilder buffer, String input, Object... variables)
    {
        append(buffer, input + "\n", variables);
    }

    // This method will be used to append formatted strings
    // i.e. format("Hello {0} {1}", "andrew","forward");
    private void append(StringBuilder buffer, String input, Object... variables)
    {
        buffer.append(StringFormatter.format(input,variables));
    }

    emit getCode(UmpleModel model, UmpleElement uElement)(phpInterfaceGenerator);

    phpInterfaceGenerator <<!<</*phpInterfaceGenerator*/>><<#
  UmpleInterface uInterface = (UmpleInterface) uElement;
  // GeneratedInterface gInterface = uInterface.getGeneratedInterface();
  PhpGenerator gen = new PhpGenerator();
  gen.setModel(model);
  
  String extraCode = "";
  if (uInterface.getExtraCode() != null)
  {
    extraCode = uInterface.getExtraCode();
  }  
#>><?php<<@ UmpleToPhp.UmpleNotice >>

interface <<= uInterface.getName() >>
{
<<# if (uInterface.hasConstants()) { #>><<@ UmpleToPhp.interface_constantDeclaration >>
<<# } #>>
 <<# if (uInterface.hasMethods()) { #>><<@ UmpleToPhp.interface_AbstractMethodDeclaration >>
<<# } #>>
  <<=extraCode>>
}
?>!>>
}
