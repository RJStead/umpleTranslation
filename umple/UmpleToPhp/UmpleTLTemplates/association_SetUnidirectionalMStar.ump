class UmpleToPhp {
    association_SetUnidirectionalMStar <<!<</*association_SetUnidirectionalMStar*/>><<# String accessModifier = (av.isImmutable()) ? "private" : "public"; #>>
  <<= accessModifier >> function <<=gen.translate("setManyMethod",av)>>($<<=gen.translate("parameterMany",av)>>)
  {
    $wasSet = false;
    <<# if (customSetManyPrefixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPrefixCode, "    ")); } #>>
    $<<=gen.translate("parameterVerifiedMany",av)>> = array();
    foreach ($<<=gen.translate("parameterMany",av)>> as $<<=gen.translate("parameterOne",av)>>)
    {
      if (array_search($<<=gen.translate("parameterOne",av)>>,$<<=gen.translate("parameterVerifiedMany",av)>>) !== false)
      {
        continue;
      }
      $<<=gen.translate("parameterVerifiedMany",av)>>[] = $<<=gen.translate("parameterOne",av)>>;
    }

    if (count($<<=gen.translate("parameterVerifiedMany",av)>>) != count($<<=gen.translate("parameterMany",av)>>) || count($<<=gen.translate("parameterVerifiedMany",av)>>) < self::<<=gen.translate("minimumNumberOfMethod",av)>>())
    {
      <<# if (customSetManyPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "      ")); } #>>
      return $wasSet;
    }

    $this-><<=gen.translate("associationMany",av)>> = $<<=gen.translate("parameterVerifiedMany",av)>>;
    $wasSet = true;
    <<# if (customSetManyPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "    ")); } #>>
    return $wasSet;
  }
!>>
}
