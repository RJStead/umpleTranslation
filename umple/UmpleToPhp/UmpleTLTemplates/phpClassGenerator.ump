use UmpleNotice.ump;
use association_Get_All.ump;
use association_Set_All.ump;
use attribute_Get_All.ump;
use attribute_IsBoolean_All.ump;
use attribute_Set_All.ump;
use class_MethodDeclaration.ump;
use constructor_Declare_All.ump;
use delete_All.ump;
use equals.ump;
use equals_default.ump;
use members_AllAssociations.ump;
use members_AllAttributes.ump;
use members_AllDoActivities.ump;
use members_AllHelpers.ump;
use members_AllStateMachines.ump;
use members_AllStatics.ump;
use state_machine_Events_All.ump;
use state_machine_Get_All.ump;
use state_machine_Set_All.ump;
use trace.ump;


namespace cruise.umple.compiler.php;

external interface ILang{}

class PhpClassGenerator {
    depend cruise.umple.compiler.*;
    depend cruise.umple.util.*;
    depend java.util.*;

    isA ILang;

    // Add a newline to the end of the input
    private void appendln(StringBuilder buffer, String input, Object... variables)
    {
        append(buffer, input + "\n", variables);
    }

    // This method will be used to append formatted strings
    // i.e. format("Hello {0} {1}", "andrew","forward");
    private void append(StringBuilder buffer, String input, Object... variables)
    {
        buffer.append(StringFormatter.format(input,variables));
    }

    emit getCode(UmpleModel model, UmpleElement uElement)(phpClassGenerator);


    phpClassGenerator <<!<</*phpClassGenerator*/>><<#
  UmpleClass uClass = (UmpleClass) uElement;
  GeneratedClass gClass = uClass.getGeneratedClass();
  PhpGenerator gen = new PhpGenerator();
  GeneratorHelper.generator = gen;
  gen.setModel(model);

  HashMap<String,String> codeInjectionMap = new HashMap<String,String>();
  for (CodeInjection inject : uClass.getCodeInjections())
  {
    String operation = StringFormatter.toUnderscore(inject.getOperation());
    String key = inject.getType() + ":" + operation;
    String newCodeToInject = "";
    String injectCode = inject.getConstraintTree()==null?inject.getCode():inject.getConstraintCode(gen);
    if (codeInjectionMap.containsKey(key))
    {
      newCodeToInject = StringFormatter.format("{0}\n    {1}",codeInjectionMap.get(key),injectCode);
    }
    else
    {
      newCodeToInject = injectCode;
    }
    codeInjectionMap.put(key,newCodeToInject);
  }

  boolean isFirst = true;

#>><?php<<@ UmpleToPhp.UmpleNotice >>


<<# if (uClass.numberOfComments() > 0) { if (!uClass.getComments().get(0).getIsInline()) {append(realSb, "\n{0}", Comment.format("Multiline",uClass.getComments(),false));} else {append(realSb, "\n{0}", Comment.format("Slashes",uClass.getComments(),false)); } } #>>
<<# append(realSb, System.lineSeparator()); #>>
<<# if (uClass.getIsAbstract()) { append(realSb, "{0} ", "abstract"); } #>>class <<= uClass.getName() >><<= gen.translate("isA",uClass) >>
{<<@ UmpleToPhp.members_AllStatics >><<@ UmpleToPhp.members_AllAttributes >><<@ UmpleToPhp.members_AllStateMachines >><<@ UmpleToPhp.members_AllDoActivities >><<@ UmpleToPhp.members_AllAssociations >><<@ UmpleToPhp.members_AllHelpers >>

  //------------------------
  // CONSTRUCTOR
  //------------------------
<<@ UmpleToPhp.constructor_Declare_All >>

  //------------------------
  // INTERFACE
  //------------------------
<<@ UmpleToPhp.attribute_Set_All >><<@ UmpleToPhp.attribute_Get_All >><<@ UmpleToPhp.attribute_IsBoolean_All >><<@ UmpleToPhp.state_machine_Get_All >><<@ UmpleToPhp.state_machine_Events_All >><<@ UmpleToPhp.state_machine_Set_All >><<@ UmpleToPhp.association_Get_All >><<@ UmpleToPhp.association_Set_All >>
<<# if (uClass.getKey().isProvided()) { #>><<@ UmpleToPhp.equals >>
<<# } else { #>><<@ UmpleToPhp.equals_default >>
<<# } #>><<@ UmpleToPhp.delete_All >>
<<# if (uClass.hasMethods()) { #>><<@ UmpleToPhp.class_MethodDeclaration >>
<<# } #>>
<<# if (uClass.getExtraCode() != null && uClass.getExtraCode().length() > 0) { #>>
  //------------------------
  // DEVELOPER CODE - PROVIDED AS-IS
  //------------------------
  
  <<=uClass.getExtraCode()>>
<<# } #>><<@ UmpleToPhp.trace >>
}
?>!>>
}
