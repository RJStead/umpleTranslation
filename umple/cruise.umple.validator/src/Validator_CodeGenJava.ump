namespace cruise.umple.validator;

class JavaCodeGenValidator {

	depend org.eclipse.jdt.core.compiler.IProblem;
	depend org.eclipse.jdt.core.dom.AST;
	depend org.eclipse.jdt.core.dom.ASTParser;
	depend org.eclipse.jdt.core.dom.CompilationUnit;
	depend org.eclipse.jdt.core.JavaCore;

	depend java.util.Map;
	depend java.util.Scanner;
	depend java.util.regex.Matcher;
	depend java.util.regex.Pattern;
	
	depend cruise.umple.compiler.*;
	depend cruise.umple.compiler.exceptions.UmpleCompilerException;

	isA CodeGenValidator;

	final String separator = System.getProperty("line.separator");
	
	public  boolean validateGeneratedCode(UmpleFile uFile) {
       	boolean isValid = true;
	    UmpleModel model = new UmpleModel(uFile);
	    try{
		    model.run();
		   	for (UmpleClass uClass : model.getUmpleClasses()){
		   	    ILang language = getLanguageFor(uClass);
	    		String code = language.getCode(model, uClass);
	    		CompilationUnit unit = parse(code);
	    		IProblem[] problems = unit.getProblems();
	    		if( problems != null && problems.length > 0){
	    			for (IProblem problem : problems ){
	    				int umpleSourceLine = getUmpleSourceLine(problem.getSourceLineNumber(),code);
	    				System.out.print(getOutputString(problem, umpleSourceLine , uFile.getFileName()));	
	    			}
	    		return false;
	    		}
	  	     }
		 }
	     catch (UmpleCompilerException ex)
	     {
	       System.err.println(ex.getMessage());
	       return false;
	     }
	     return isValid;
	}

   public String getOutputString(IProblem problem, int umpleSourceLine, String umpleFileName ){
    StringBuffer outMessage = new StringBuffer();
		outMessage.append(separator);
		outMessage.append("Error in generated code");
		outMessage.append(separator);
		outMessage.append("Error on line " + umpleSourceLine + " of umple file: " + umpleFileName);
		outMessage.append(separator);
		outMessage.append("Line number in Java File: " +problem.getSourceLineNumber());
		outMessage.append(separator);
		outMessage.append("Message:" + problem.getMessage());
		outMessage.append(separator);
		outMessage.append("-----------------------");
		return 	outMessage.toString();
  }

	 protected static  CompilationUnit parse(String source){
    ASTParser parser = ASTParser.newParser(AST.JLS8); 
		parser.setKind(ASTParser.K_COMPILATION_UNIT);
		parser.setSource(source.toCharArray()); // set source
	    // In order to parse 1.7 code, some compiler options need to be set to 1.7
	    // Annotations were not available prior 1.6
		Map options = JavaCore.getOptions();
		JavaCore.setComplianceOptions(JavaCore.VERSION_1_7, options);		
		parser.setCompilerOptions(options);
		parser.setResolveBindings(true); // we need bindings later on
		return (CompilationUnit) parser.createAST(null);
  }
  
   private int getUmpleSourceLine(int javaLineNumber, String code) {
	  String toSearch = "javaline={"+ javaLineNumber+"}";
	  Scanner scanner = new Scanner(code);
	  String currentLine;
	  try {
		  // Read generated code, line by line
		  while((currentLine = scanner.nextLine()) != null)
		  {   
			  // Search for string javaline={xxx}
			  if(currentLine.contains(toSearch))
			  {
				  // Gets the corresponding umple file line number
				  Pattern pattern = Pattern.compile("\\d+");
				  Matcher matcher = pattern.matcher(currentLine);
				  if (matcher.find())
				  {
					  return Integer.parseInt(matcher.group());
				  }
			  }
		  }
	  } finally {
		  scanner.close();
	  }
	return -1;
  }
}
