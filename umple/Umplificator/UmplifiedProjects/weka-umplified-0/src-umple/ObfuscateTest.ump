namespace weka.filters.unsupervised.attribute;

class ObfuscateTest
{
  isA AbstractFilterTest;
 depend weka.core.Attribute;
 depend weka.core.Instances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
public ObfuscateTest(String name){
  super(name);
}

/** 
 * Creates a default Obfuscate 
 */
public Filter getFilter(){
  return new Obfuscate();
}

public void testTypical(){
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  assertTrue(!m_Instances.relationName().equals(result.relationName()));
  for (int i=0; i < m_Instances.numAttributes(); i++) {
    Attribute inatt=m_Instances.attribute(i);
    Attribute outatt=result.attribute(i);
    if (!inatt.isString() && !inatt.isDate()) {
      assertTrue("Attribute names should be changed",!inatt.name().equals(outatt.name()));
      if (inatt.isNominal()) {
        assertEquals("Number of nominal values shouldn't change",inatt.numValues(),outatt.numValues());
        for (int j=0; j < inatt.numValues(); j++) {
          assertTrue("Nominal labels should be changed",!inatt.value(j).equals(outatt.value(j)));
        }
      }
    }
  }
}

public static Test suite(){
  return new TestSuite(ObfuscateTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
