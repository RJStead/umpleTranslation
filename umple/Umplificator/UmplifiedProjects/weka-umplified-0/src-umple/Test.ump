namespace weka.datagenerators;

class Test
{
  isA Serializable,RevisionHandler;
 depend java.io.Serializable;
 depend weka.core.Attribute;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.RevisionHandler;
 depend weka.core.RevisionUtils;
 depend weka.core.Utils;
/** 
 * for serialization 
 */
static final long serialVersionUID=-8890645875887157782L;

/** 
 * the attribute index 
 */
int m_AttIndex;

/** 
 * the split 
 */
double m_Split;

/** 
 * whether to negate the test 
 */
boolean m_Not;

/** 
 * the dataset 
 */
Instances m_Dataset;

/** 
 * Constructor
 * @param i the attribute index
 * @param s the split
 * @param dataset the dataset
 */
public Test(int i,double s,Instances dataset){
  m_AttIndex=i;
  m_Split=s;
  m_Dataset=dataset;
  m_Not=false;
}

/** 
 * Constructor
 * @param i the attribute index
 * @param s the split
 * @param dataset the dataset
 * @param n whether to negate the test
 */
public Test(int i,double s,Instances dataset,boolean n){
  m_AttIndex=i;
  m_Split=s;
  m_Dataset=dataset;
  m_Not=n;
}

/** 
 * Negates the test.
 * @return the test itself negated
 */
public Test getNot(){
  return new Test(m_AttIndex,m_Split,m_Dataset,m_Not ? false : true);
}

/** 
 * Determines whether an instance passes the test.
 * @param inst the instance
 * @return true if the instance satisfies the test, false otherwise
 * @throws Exception if something goes wrong
 */
public boolean passesTest(Instance inst) throws Exception {
  if (inst.isMissing(m_AttIndex)) {
    return false;
  }
  boolean isNominal=inst.attribute(m_AttIndex).isNominal();
  double attribVal=inst.value(m_AttIndex);
  if (!m_Not) {
    if (isNominal) {
      if (((int)attribVal) != ((int)m_Split)) {
        return false;
      }
    }
 else     if (attribVal >= m_Split) {
      return false;
    }
  }
 else {
    if (isNominal) {
      if (((int)attribVal) == ((int)m_Split)) {
        return false;
      }
    }
 else     if (attribVal < m_Split) {
      return false;
    }
  }
  return true;
}

/** 
 * Returns the test represented by a string.
 * @return a string representing the test
 */
@Override public String toString(){
  return (m_Dataset.attribute(m_AttIndex).name() + " " + testComparisonString());
}

/** 
 * Returns the test represented by a string in Prolog notation.
 * @return a string representing the test in Prolog notation
 */
public String toPrologString(){
  Attribute att=m_Dataset.attribute(m_AttIndex);
  StringBuffer str=new StringBuffer();
  String attName=m_Dataset.attribute(m_AttIndex).name();
  if (att.isNumeric()) {
    str=str.append(attName + " ");
    if (m_Not) {
      str=str.append(">= " + Utils.doubleToString(m_Split,3));
    }
 else {
      str=str.append("< " + Utils.doubleToString(m_Split,3));
    }
  }
 else {
    String value=att.value((int)m_Split);
    if (value == "false") {
      str=str.append("not(" + attName + ")");
    }
 else {
      str=str.append(attName);
    }
  }
  return str.toString();
}

/** 
 * Gives a string representation of the test, starting from the comparison symbol.
 * @return a string representing the test
 */
private String testComparisonString(){
  Attribute att=m_Dataset.attribute(m_AttIndex);
  if (att.isNumeric()) {
    return ((m_Not ? ">= " : "< ") + Utils.doubleToString(m_Split,3));
  }
 else {
    if (att.numValues() != 2) {
      return ((m_Not ? "!= " : "= ") + att.value((int)m_Split));
    }
 else {
      return ("= " + (m_Not ? att.value((int)m_Split == 0 ? 1 : 0) : att.value((int)m_Split)));
    }
  }
}

/** 
 * Compares the test with the test that is given as parameter.
 * @param t the test the object is compared to
 * @return true if the two Tests are equal
 */
public boolean equalTo(Test t){
  return (m_AttIndex == t.m_AttIndex && m_Split == t.m_Split && m_Not == t.m_Not);
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10203 $");
}
}
