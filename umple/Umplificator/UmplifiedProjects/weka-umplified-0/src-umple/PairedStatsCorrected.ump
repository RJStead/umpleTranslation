namespace weka.experiment;

class PairedStatsCorrected
{
  isA PairedStats;
 depend weka.core.RevisionUtils;
 depend weka.core.Statistics;
 depend weka.core.Utils;
/** 
 * The ratio used to correct the significane test 
 */
protected double m_testTrainRatio;

/** 
 * Creates a new PairedStatsCorrected object with the supplied significance level and train/test ratio.
 * @param sig the significance level for comparisons
 * @param testTrainRatio the number test examples/training examples
 */
public PairedStatsCorrected(double sig,double testTrainRatio){
  super(sig);
  m_testTrainRatio=testTrainRatio;
}

/** 
 * Calculates the derived statistics (significance etc).
 */
public void calculateDerived(){
  xStats.calculateDerived();
  yStats.calculateDerived();
  differencesStats.calculateDerived();
  correlation=Double.NaN;
  if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) {
    double slope=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean);
    if (!Utils.eq(yStats.stdDev,0)) {
      correlation=slope * xStats.stdDev / yStats.stdDev;
    }
 else {
      correlation=1.0;
    }
  }
  if (Utils.gr(differencesStats.stdDev,0)) {
    double tval=differencesStats.mean / Math.sqrt((1 / count + m_testTrainRatio) * differencesStats.stdDev * differencesStats.stdDev);
    if (count > 1) {
      differencesProbability=Statistics.FProbability(tval * tval,1,(int)count - 1);
    }
 else     differencesProbability=1;
  }
 else {
    if (differencesStats.sumSq == 0) {
      differencesProbability=1.0;
    }
 else {
      differencesProbability=0.0;
    }
  }
  differencesSignificance=0;
  if (differencesProbability <= sigLevel) {
    if (xStats.mean > yStats.mean) {
      differencesSignificance=1;
    }
 else {
      differencesSignificance=-1;
    }
  }
}

/** 
 * Returns the revision string.
 * @return		the revision
 */
public String getRevision(){
  return RevisionUtils.extract("$Revision: 8034 $");
}
}
