namespace weka.filters.unsupervised.attribute;

class AddNoiseTest
{
  isA AbstractFilterTest;
 depend weka.core.InstanceComparator;
 depend weka.core.Instances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
/** 
 * for comparing the instances 
 */
protected InstanceComparator m_Comparator;

public AddNoiseTest(String name){
  super(name);
}

/** 
 * Need to remove non-nominal attributes, set class index 
 */
protected void setUp() throws Exception {
  super.setUp();
  m_Instances.setClassIndex(1);
  int i=0;
  while (i < m_Instances.numAttributes()) {
    if (!m_Instances.attribute(i).isNominal())     m_Instances.deleteAttributeAt(i);
 else     i++;
  }
  m_Comparator=new InstanceComparator(true);
}

/** 
 * Creates a default AddNoise 
 */
public Filter getFilter(){
  AddNoise f=new AddNoise();
  return f;
}

public void testTypical(){
  m_Filter=getFilter();
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  boolean equal=true;
  for (int i=0; i < m_Instances.numInstances(); i++) {
    if (m_Comparator.compare(m_Instances.instance(i),result.instance(i)) != 0) {
      equal=false;
      break;
    }
  }
  if (equal)   fail("No noise added!");
}

public void testNoNoise(){
  m_Filter=getFilter();
  ((AddNoise)m_Filter).setPercent(0);
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  boolean equal=true;
  for (int i=0; i < m_Instances.numInstances(); i++) {
    if (m_Comparator.compare(m_Instances.instance(i),result.instance(i)) != 0) {
      equal=false;
      break;
    }
  }
  if (!equal)   fail("Instances modified!");
}

public static Test suite(){
  return new TestSuite(AddNoiseTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
