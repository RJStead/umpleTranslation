namespace weka.filters.unsupervised.attribute;

class InterquartileRangeTest
{
  isA AbstractFilterTest;
 depend weka.core.Instances;
 depend weka.core.TestInstances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
protected void setUp() throws Exception {
  super.setUp();
  TestInstances noMissing=TestInstances.forCapabilities(m_Filter.getCapabilities());
  m_Instances=noMissing.generate();
}

/** 
 * Initializes the test with the given name.
 * @param name	the name of the test
 */
public InterquartileRangeTest(String name){
  super(name);
}

/** 
 * Creates a default InterquartileRange.
 * @return		the filter
 */
public Filter getFilter(){
  return new InterquartileRange();
}

/** 
 * a typical test, with nominal class attribute.
 */
public void testNominalClass(){
  m_Instances.setClassIndex(1);
  Instances icopy=new Instances(m_Instances);
  Instances result=null;
  try {
    m_Filter.setInputFormat(icopy);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());
  }
  try {
    result=Filter.useFilter(icopy,m_Filter);
    assertNotNull(result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on useFilter(): \n" + ex.getMessage());
  }
  assertEquals(icopy.numAttributes() + 2,result.numAttributes());
  assertEquals(icopy.numInstances(),result.numInstances());
}

/** 
 * a typical test, with nominal class attribute and on a single numeric attribute.
 */
public void testNominalClassSingleAttribute(){
  m_Instances.setClassIndex(1);
  Instances icopy=new Instances(m_Instances);
  Instances result=null;
  ((InterquartileRange)m_Filter).setAttributeIndices("3");
  try {
    m_Filter.setInputFormat(icopy);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());
  }
  try {
    result=Filter.useFilter(icopy,m_Filter);
    assertNotNull(result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on useFilter(): \n" + ex.getMessage());
  }
  assertEquals(icopy.numAttributes() + 2,result.numAttributes());
  assertEquals(icopy.numInstances(),result.numInstances());
}

/** 
 * a typical test, with numeric class attribute.
 */
public void testNumericClass(){
  m_Instances.setClassIndex(2);
  Instances icopy=new Instances(m_Instances);
  Instances result=null;
  try {
    m_Filter.setInputFormat(icopy);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());
  }
  try {
    result=Filter.useFilter(icopy,m_Filter);
    assertNotNull(result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on useFilter(): \n" + ex.getMessage());
  }
  assertEquals(icopy.numAttributes() + 2,result.numAttributes());
  assertEquals(icopy.numInstances(),result.numInstances());
}

/** 
 * a typical test, w/o class attribute.
 */
public void testWithoutClass(){
  Instances icopy=new Instances(m_Instances);
  Instances result=null;
  try {
    m_Filter.setInputFormat(icopy);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());
  }
  try {
    result=Filter.useFilter(icopy,m_Filter);
    assertNotNull(result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on useFilter(): \n" + ex.getMessage());
  }
  assertEquals(icopy.numAttributes() + 2,result.numAttributes());
  assertEquals(icopy.numInstances(),result.numInstances());
}

/** 
 * a typical test, w/o class attribute but with Outlier/ExtremeValue generation per attribute.
 */
public void testPerAttribute(){
  ((InterquartileRange)m_Filter).setDetectionPerAttribute(true);
  Instances icopy=new Instances(m_Instances);
  Instances result=null;
  try {
    m_Filter.setInputFormat(icopy);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());
  }
  try {
    result=Filter.useFilter(icopy,m_Filter);
    assertNotNull(result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on useFilter(): \n" + ex.getMessage());
  }
  int count=0;
  for (int i=0; i < icopy.numAttributes(); i++) {
    if (icopy.attribute(i).isNumeric())     count++;
  }
  assertEquals(icopy.numAttributes() + 2 * count,result.numAttributes());
  assertEquals(icopy.numInstances(),result.numInstances());
}

/** 
 * a typical test, w/o class attribute but with Outlier/ExtremeValue generation per attribute and Offset multiplier generation.
 */
public void testOffset(){
  ((InterquartileRange)m_Filter).setDetectionPerAttribute(true);
  ((InterquartileRange)m_Filter).setOutputOffsetMultiplier(true);
  Instances icopy=new Instances(m_Instances);
  Instances result=null;
  try {
    m_Filter.setInputFormat(icopy);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());
  }
  try {
    result=Filter.useFilter(icopy,m_Filter);
    assertNotNull(result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on useFilter(): \n" + ex.getMessage());
  }
  int count=0;
  for (int i=0; i < icopy.numAttributes(); i++) {
    if (icopy.attribute(i).isNumeric())     count++;
  }
  assertEquals(icopy.numAttributes() + 3 * count,result.numAttributes());
  assertEquals(icopy.numInstances(),result.numInstances());
}

/** 
 * Returns a test suite.
 * @return		the suite
 */
public static Test suite(){
  return new TestSuite(InterquartileRangeTest.class);
}

/** 
 * Runs the test from the commandline.
 * @param args	ignored
 */
public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
