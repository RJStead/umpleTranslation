namespace weka.classifiers.meta;

class RandomizableFilteredClassifier
{
  isA Randomizable;
  isA FilteredClassifier;
 depend java.util.Collections;
 depend java.util.Enumeration;
 depend java.util.Vector;
 depend java.util.Random;
 depend weka.core.Instances;
 depend weka.core.Option;
 depend weka.core.OptionHandler;
 depend weka.core.RevisionUtils;
 depend weka.core.Utils;
 depend weka.core.Randomizable;
 depend weka.filters.Filter;
/** 
 * for serialization 
 */
static final long serialVersionUID=-4523466618555717333L;

/** 
 * The random number seed. 
 */
protected int m_Seed=1;

/** 
 * Returns a string describing this classifier
 * @return a description of the classifier suitable fordisplaying in the explorer/experimenter gui
 */
public String globalInfo(){
  return "A simple variant of the FilteredClassifier that implements the Randomizable interface, useful for " + "building ensemble classifiers using the RandomCommittee meta learner. It requires " + "that either the filter or the base learner implement the Randomizable interface.";
}

/** 
 * String describing default classifier.
 * @return the default classifier classname
 */
protected String defaultClassifierString(){
  return "weka.classifiers.lazy.IBk";
}

/** 
 * String describing default filter.
 */
protected String defaultFilterString(){
  return "weka.filters.unsupervised.attribute.RandomProjection";
}

/** 
 * Default constructor.
 */
public RandomizableFilteredClassifier(){
  m_Classifier=new weka.classifiers.lazy.IBk();
  m_Filter=new weka.filters.unsupervised.attribute.RandomProjection();
}

/** 
 * Returns an enumeration describing the available options.
 * @return an enumeration of all the available options.
 */
public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(1);
  newVector.addElement(new Option("\tRandom number seed.\n" + "\t(default 1)","S",1,"-S <num>"));
  newVector.addAll(Collections.list(super.listOptions()));
  if (getFilter() instanceof OptionHandler) {
    newVector.addElement(new Option("","",0,"\nOptions specific to filter " + getFilter().getClass().getName() + ":"));
    newVector.addAll(Collections.list(((OptionHandler)getFilter()).listOptions()));
  }
  return newVector.elements();
}

/** 
 * Parses a given list of options. Valid options are:<p> -W classname <br> Specify the full class name of the base learner.<p> -I num <br> Set the number of iterations (default 10). <p> -S num <br> Set the random number seed (default 1). <p> Options after -- are passed to the designated classifier.<p>
 * @param options the list of options as an array of strings
 * @exception Exception if an option is not supported
 */
public void setOptions(String[] options) throws Exception {
  String seed=Utils.getOption('S',options);
  if (seed.length() != 0) {
    setSeed(Integer.parseInt(seed));
  }
 else {
    setSeed(1);
  }
  super.setOptions(options);
  Utils.checkForRemainingOptions(options);
}

/** 
 * Gets the current settings of the classifier.
 * @return an array of strings suitable for passing to setOptions
 */
public String[] getOptions(){
  Vector<String> options=new Vector<String>();
  options.add("-S");
  options.add("" + getSeed());
  Collections.addAll(options,super.getOptions());
  return options.toArray(new String[0]);
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable fordisplaying in the explorer/experimenter gui
 */
public String seedTipText(){
  return "The random number seed to be used.";
}

/** 
 * Set the seed for random number generation.
 * @param seed the seed
 */
public void setSeed(int seed){
  m_Seed=seed;
}

/** 
 * Gets the seed for the random number generations
 * @return the seed for the random number generation
 */
public int getSeed(){
  return m_Seed;
}

/** 
 * Build the classifier on the filtered data.
 * @param data the training data
 * @throws Exception if the classifier could not be built successfully
 */
public void buildClassifier(Instances data) throws Exception {
  if (m_Classifier == null) {
    throw new Exception("No base classifiers have been set!");
  }
  if (!(m_Classifier instanceof Randomizable) && !(m_Filter instanceof Randomizable)) {
    throw new Exception("Either the classifier or the filter must implement " + "the Randomizable interface.");
  }
  getCapabilities().testWithFail(data);
  data=new Instances(data);
  data.deleteWithMissingClass();
  if (data.numInstances() == 0) {
    throw new Exception("Not enough training instances with class labels.");
  }
  try {
    Random r=data.getRandomNumberGenerator(m_Seed);
    if (m_Filter instanceof Randomizable) {
      ((Randomizable)m_Filter).setSeed(r.nextInt());
    }
    m_Filter.setInputFormat(data);
    data=Filter.useFilter(data,m_Filter);
    getClassifier().getCapabilities().testWithFail(data);
    m_FilteredInstances=data.stringFreeStructure();
    if (m_Classifier instanceof Randomizable) {
      ((Randomizable)m_Classifier).setSeed(r.nextInt());
    }
    m_Classifier.buildClassifier(data);
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(1);
  }
}

/** 
 * Output a representation of this classifier
 * @return a representation of this classifier
 */
public String toString(){
  if (m_FilteredInstances == null) {
    return "RandomizableFilteredClassifier: No model built yet.";
  }
  String result="RandomizableFilteredClassifier using " + getClassifierSpec() + " on data filtered through "+ getFilterSpec()+ "\n\nFiltered Header\n"+ m_FilteredInstances.toString()+ "\n\nClassifier Model\n"+ m_Classifier.toString();
  return result;
}

/** 
 * Returns the revision string.
 * @return		the revision
 */
public String getRevision(){
  return RevisionUtils.extract("$Revision: 9117 $");
}

/** 
 * Main method for testing this class.
 * @param argv should contain the following arguments:-t training file [-T test file] [-c class index]
 */
public static void main(String[] argv){
  runClassifier(new RandomizableFilteredClassifier(),argv);
}
}
