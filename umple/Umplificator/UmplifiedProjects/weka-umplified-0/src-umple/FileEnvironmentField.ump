namespace weka.gui.beans;

class FileEnvironmentField
{
  isA EnvironmentField;
 depend java.awt.BorderLayout;
 depend java.awt.event.ActionEvent;
 depend java.awt.event.ActionListener;
 depend java.beans.PropertyChangeEvent;
 depend java.beans.PropertyChangeListener;
 depend java.io.File;
 depend javax.swing.JButton;
 depend javax.swing.JFileChooser;
 depend javax.swing.JPanel;
 depend javax.swing.filechooser.FileFilter;
 depend weka.core.Environment;
 depend weka.gui.ExtensionFileFilter;
 depend weka.gui.FileEditor;
 depend weka.gui.PropertyDialog;
/** 
 * For serialization 
 */
private static final long serialVersionUID=-233731548086207652L;

/** 
 * File editor component 
 */
protected FileEditor m_fileEditor=new FileEditor();

/** 
 * Dialog to hold the file editor 
 */
protected PropertyDialog m_fileEditorDialog;

/** 
 * The button to pop up the file dialog 
 */
protected JButton m_browseBut;

/** 
 * Constructor
 */
public FileEnvironmentField(){
  this("",JFileChooser.OPEN_DIALOG,false);
  setEnvironment(Environment.getSystemWide());
}

/** 
 * Constructor
 * @param env an Environment object to use
 */
public FileEnvironmentField(Environment env){
  this("",JFileChooser.OPEN_DIALOG,false);
  setEnvironment(env);
}

public FileEnvironmentField(String label,Environment env){
  this(label,JFileChooser.OPEN_DIALOG,false);
  setEnvironment(env);
}

/** 
 * Constructor
 * @param label a label to display alongside the field.
 * @param env an Environment object to use.
 * @param fileChooserType the type of file chooser to use (eitherJFileChooser.OPEN_DIALOG or JFileChooser.SAVE_DIALOG)
 */
public FileEnvironmentField(String label,Environment env,int fileChooserType){
  this(label,fileChooserType,false);
  setEnvironment(env);
}

/** 
 * Constructor
 * @param label a label to display alongside the field.
 * @param env an Environment object to use.
 * @param fileChooserType the type of file chooser to use (eitherJFileChooser.OPEN_DIALOG or JFileChooser.SAVE_DIALOG)
 * @param directoriesOnly true if file chooser should allow only directoriesto be selected
 */
public FileEnvironmentField(String label,Environment env,int fileChooserType,boolean directoriesOnly){
  this(label,fileChooserType,directoriesOnly);
  setEnvironment(env);
}

/** 
 * Constructor
 * @param label a label to display alongside the field.
 * @param fileChooserType the type of file chooser to use (eitherJFileChooser.OPEN_DIALOG or JFileChooser.SAVE_DIALOG)
 */
public FileEnvironmentField(String label,int fileChooserType,boolean directoriesOnly){
  super(label);
  m_fileEditor.addPropertyChangeListener(new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      File selected=(File)m_fileEditor.getValue();
      if (selected != null) {
        FileEnvironmentField.this.setText(selected.toString());
      }
    }
  }
);
  final JFileChooser embeddedEditor=(JFileChooser)m_fileEditor.getCustomEditor();
  if (directoriesOnly) {
    embeddedEditor.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  }
 else {
    embeddedEditor.setFileSelectionMode(JFileChooser.FILES_ONLY);
  }
  embeddedEditor.setDialogType(fileChooserType);
  ExtensionFileFilter ff=new ExtensionFileFilter(".model","Serialized Weka classifier (*.model)");
  embeddedEditor.addChoosableFileFilter(ff);
  m_browseBut=new JButton("Browse...");
  m_browseBut.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        String modelPath=getText();
        if (modelPath != null) {
          try {
            modelPath=m_env.substitute(modelPath);
          }
 catch (          Exception ex) {
          }
          File toSet=new File(modelPath);
          if (toSet.isFile()) {
            m_fileEditor.setValue(new File(modelPath));
            toSet=toSet.getParentFile();
          }
          if (toSet.isDirectory()) {
            embeddedEditor.setCurrentDirectory(toSet);
          }
        }
        showFileEditor();
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
);
  JPanel bP=new JPanel();
  bP.setLayout(new BorderLayout());
  bP.add(m_browseBut,BorderLayout.CENTER);
  add(bP,BorderLayout.EAST);
}

@Override public void propertyChange(PropertyChangeEvent evt){
  File selected=(File)m_fileEditor.getValue();
  if (selected != null) {
    FileEnvironmentField.this.setText(selected.toString());
  }
}

@Override public void actionPerformed(ActionEvent e){
  try {
    String modelPath=getText();
    if (modelPath != null) {
      try {
        modelPath=m_env.substitute(modelPath);
      }
 catch (      Exception ex) {
      }
      File toSet=new File(modelPath);
      if (toSet.isFile()) {
        m_fileEditor.setValue(new File(modelPath));
        toSet=toSet.getParentFile();
      }
      if (toSet.isDirectory()) {
        embeddedEditor.setCurrentDirectory(toSet);
      }
    }
    showFileEditor();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}

/** 
 * Add a file filter to use
 * @param toSet the file filter to use
 */
public void addFileFilter(FileFilter toSet){
  JFileChooser embeddedEditor=(JFileChooser)m_fileEditor.getCustomEditor();
  embeddedEditor.addChoosableFileFilter(toSet);
}

/** 
 * Resets the list of choosable file filters.
 */
public void resetFileFilters(){
  JFileChooser embeddedEditor=(JFileChooser)m_fileEditor.getCustomEditor();
  embeddedEditor.resetChoosableFileFilters();
}

private void showFileEditor(){
  if (m_fileEditorDialog == null) {
    int x=getLocationOnScreen().x;
    int y=getLocationOnScreen().y;
    if (PropertyDialog.getParentDialog(this) != null) {
      m_fileEditorDialog=new PropertyDialog(PropertyDialog.getParentDialog(this),m_fileEditor,x,y);
    }
 else {
      m_fileEditorDialog=new PropertyDialog(PropertyDialog.getParentFrame(this),m_fileEditor,x,y);
    }
  }
  m_fileEditorDialog.setVisible(true);
}

@Override public void removeNotify(){
  super.removeNotify();
  if (m_fileEditorDialog != null) {
    m_fileEditorDialog.dispose();
    m_fileEditorDialog=null;
  }
}

/** 
 * Set the enabled status of the combo box and button
 * @param enabled true if the combo box and button are to be enabled
 */
@Override public void setEnabled(boolean enabled){
  super.setEnabled(enabled);
  m_browseBut.setEnabled(enabled);
}
}
