namespace weka.filters.supervised.attribute;

class PartitionMembershipTest
{
  isA AbstractFilterTest;
 depend weka.classifiers.meta.FilteredClassifier;
 depend weka.core.Instances;
 depend weka.core.TestInstances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend weka.filters.supervised.attribute.PartitionMembership;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
public PartitionMembershipTest(String name){
  super(name);
}

/** 
 * Need to remove non-nominal/numeric attributes, set class index 
 */
protected void setUp() throws Exception {
  super.setUp();
  int i=0;
  while (i < m_Instances.numAttributes()) {
    if ((!m_Instances.attribute(i).isNominal() && !m_Instances.attribute(i).isNumeric()) || m_Instances.attribute(i).isDate())     m_Instances.deleteAttributeAt(i);
 else     i++;
  }
  m_Instances.setClassIndex(0);
}

/** 
 * Creates a default PartitionMembership 
 */
public Filter getFilter(){
  PartitionMembership f=new PartitionMembership();
  return f;
}

/** 
 * returns the configured FilteredClassifier. Since the base classifier is determined heuristically, derived tests might need to adjust it.
 * @return the configured FilteredClassifier
 */
protected FilteredClassifier getFilteredClassifier(){
  FilteredClassifier result;
  result=new FilteredClassifier();
  result.setFilter(getFilter());
  result.setClassifier(new weka.classifiers.trees.J48());
  return result;
}

/** 
 * returns data generated for the FilteredClassifier test
 * @return		the dataset for the FilteredClassifier
 * @throws Exception	if generation of data fails
 */
protected Instances getFilteredClassifierData() throws Exception {
  TestInstances test;
  Instances result;
  test=TestInstances.forCapabilities(m_FilteredClassifier.getCapabilities());
  test.setClassIndex(TestInstances.CLASS_IS_LAST);
  result=test.generate();
  return result;
}

public void testNominal(){
  m_Filter=getFilter();
  m_Instances.setClassIndex(0);
  Instances result=useFilter();
  assertEquals(m_Instances.numClasses(),result.numClasses());
  assertTrue(result.numAttributes() >= 1 + 1);
}

public void testNumeric(){
  m_Filter=getFilter();
  m_Instances.setClassIndex(2);
  Instances result=useFilter();
  assertTrue(result.numAttributes() >= 1 + 1);
}

public static Test suite(){
  return new TestSuite(PartitionMembershipTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
