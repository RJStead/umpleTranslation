namespace weka.experiment;

class RemoteExperiment
{
  isA Experiment;
 depend java.io.BufferedInputStream;
 depend java.io.BufferedOutputStream;
 depend java.io.File;
 depend java.io.FileInputStream;
 depend java.io.FileOutputStream;
 depend java.io.ObjectInputStream;
 depend java.io.ObjectOutputStream;
 depend java.rmi.Naming;
 depend java.util.ArrayList;
 depend java.util.Enumeration;
 depend javax.swing.DefaultListModel;
 depend weka.core.Option;
 depend weka.core.OptionHandler;
 depend weka.core.Queue;
 depend weka.core.RevisionUtils;
 depend weka.core.SerializedObject;
 depend weka.core.Utils;
 depend weka.core.xml.KOML;
 depend weka.core.xml.XMLOptions;
 depend weka.experiment.xml.XMLExperiment;
/** 
 * for serialization 
 */
static final long serialVersionUID=-7357668825635314937L;

/** 
 * The list of objects listening for remote experiment events 
 */
private final ArrayList<RemoteExperimentListener> m_listeners=new ArrayList<RemoteExperimentListener>();

/** 
 * Holds the names of machines with remoteEngine servers running 
 */
protected DefaultListModel m_remoteHosts=new DefaultListModel();

/** 
 * The queue of available hosts 
 */
private Queue m_remoteHostsQueue=new Queue();

/** 
 * The status of each of the remote hosts 
 */
private int[] m_remoteHostsStatus;

/** 
 * The number of times tasks have failed on each remote host 
 */
private int[] m_remoteHostFailureCounts;

/** 
 * status of the remote host: available 
 */
protected static final int AVAILABLE=0;

/** 
 * status of the remote host: in use 
 */
protected static final int IN_USE=1;

/** 
 * status of the remote host: connection failed 
 */
protected static final int CONNECTION_FAILED=2;

/** 
 * status of the remote host: some other failure 
 */
protected static final int SOME_OTHER_FAILURE=3;

/** 
 * allow at most 3 failures on a host before it is removed from the list of usable hosts
 */
protected static final int MAX_FAILURES=3;

/** 
 * Set to true if MAX_FAILURES exceeded on all hosts or connections fail on all hosts or user aborts experiment (via gui)
 */
private boolean m_experimentAborted=false;

/** 
 * The number of hosts removed due to exceeding max failures 
 */
private int m_removedHosts;

/** 
 * The count of failed sub-experiments 
 */
private int m_failedCount;

/** 
 * The count of successfully completed sub-experiments 
 */
private int m_finishedCount;

/** 
 * The base experiment to split up into sub experiments for remote execution
 */
private Experiment m_baseExperiment=null;

/** 
 * The sub experiments 
 */
protected Experiment[] m_subExperiments;

/** 
 * The queue of sub experiments waiting to be processed 
 */
private Queue m_subExpQueue=new Queue();

/** 
 * The status of each of the sub-experiments 
 */
protected int[] m_subExpComplete;

/** 
 * If true, then sub experiments are created on the basis of data sets rather than run number.
 */
protected boolean m_splitByDataSet=true;

/** 
 * Returns true if sub experiments are to be created on the basis of data set..
 * @return a <code>boolean</code> value indicating whether sub experiments areto be created on the basis of data set (true) or run number (false).
 */
public boolean getSplitByDataSet(){
  return m_splitByDataSet;
}

/** 
 * Set whether sub experiments are to be created on the basis of data set.
 * @param sd true if sub experiments are to be created on the basis of dataset. Otherwise sub experiments are created on the basis of run number.
 */
public void setSplitByDataSet(boolean sd){
  m_splitByDataSet=sd;
}

/** 
 * Construct a new RemoteExperiment using an empty Experiment as base Experiment
 * @throws Exception if the base experiment is null
 */
public RemoteExperiment() throws Exception {
  this(new Experiment());
}

/** 
 * Construct a new RemoteExperiment using a base Experiment
 * @param base the base experiment to use
 * @throws Exception if the base experiment is null
 */
public RemoteExperiment(Experiment base) throws Exception {
  setBaseExperiment(base);
}

/** 
 * Add an object to the list of those interested in recieving update information from the RemoteExperiment
 * @param r a listener
 */
public void addRemoteExperimentListener(RemoteExperimentListener r){
  m_listeners.add(r);
}

/** 
 * Get the base experiment used by this remote experiment
 * @return the base experiment
 */
public Experiment getBaseExperiment(){
  return m_baseExperiment;
}

/** 
 * Set the base experiment. A sub experiment will be created for each run in the base experiment.
 * @param base the base experiment to use.
 * @throws Exception if supplied base experiment is null
 */
public void setBaseExperiment(Experiment base) throws Exception {
  if (base == null) {
    throw new Exception("Base experiment is null!");
  }
  m_baseExperiment=base;
  setRunLower(m_baseExperiment.getRunLower());
  setRunUpper(m_baseExperiment.getRunUpper());
  setResultListener(m_baseExperiment.getResultListener());
  setResultProducer(m_baseExperiment.getResultProducer());
  setDatasets(m_baseExperiment.getDatasets());
  setUsePropertyIterator(m_baseExperiment.getUsePropertyIterator());
  setPropertyPath(m_baseExperiment.getPropertyPath());
  setPropertyArray(m_baseExperiment.getPropertyArray());
  setNotes(m_baseExperiment.getNotes());
  m_ClassFirst=m_baseExperiment.m_ClassFirst;
  m_AdvanceDataSetFirst=m_baseExperiment.m_AdvanceDataSetFirst;
}

/** 
 * Set the user notes.
 * @param newNotes New user notes.
 */
@Override public void setNotes(String newNotes){
  super.setNotes(newNotes);
  m_baseExperiment.setNotes(newNotes);
}

/** 
 * Set the lower run number for the experiment.
 * @param newRunLower the lower run number for the experiment.
 */
@Override public void setRunLower(int newRunLower){
  super.setRunLower(newRunLower);
  m_baseExperiment.setRunLower(newRunLower);
}

/** 
 * Set the upper run number for the experiment.
 * @param newRunUpper the upper run number for the experiment.
 */
@Override public void setRunUpper(int newRunUpper){
  super.setRunUpper(newRunUpper);
  m_baseExperiment.setRunUpper(newRunUpper);
}

/** 
 * Sets the result listener where results will be sent.
 * @param newResultListener the result listener where results will be sent.
 */
@Override public void setResultListener(ResultListener newResultListener){
  super.setResultListener(newResultListener);
  m_baseExperiment.setResultListener(newResultListener);
}

/** 
 * Set the result producer used for the current experiment.
 * @param newResultProducer result producer to use for the current experiment.
 */
@Override public void setResultProducer(ResultProducer newResultProducer){
  super.setResultProducer(newResultProducer);
  m_baseExperiment.setResultProducer(newResultProducer);
}

/** 
 * Set the datasets to use in the experiment
 * @param ds the list of datasets to use
 */
@Override public void setDatasets(DefaultListModel ds){
  super.setDatasets(ds);
  m_baseExperiment.setDatasets(ds);
}

/** 
 * Sets whether the custom property iterator should be used.
 * @param newUsePropertyIterator true if so
 */
@Override public void setUsePropertyIterator(boolean newUsePropertyIterator){
  super.setUsePropertyIterator(newUsePropertyIterator);
  m_baseExperiment.setUsePropertyIterator(newUsePropertyIterator);
}

/** 
 * Sets the path of properties taken to get to the custom property to iterate over.
 * @param newPropertyPath an array of PropertyNodes
 */
@Override public void setPropertyPath(PropertyNode[] newPropertyPath){
  super.setPropertyPath(newPropertyPath);
  m_baseExperiment.setPropertyPath(newPropertyPath);
}

/** 
 * Sets the array of values to set the custom property to.
 * @param newPropArray a value of type Object which should be an array of theappropriate values.
 */
@Override public void setPropertyArray(Object newPropArray){
  super.setPropertyArray(newPropArray);
  m_baseExperiment.setPropertyArray(newPropArray);
}

/** 
 * Prepares a remote experiment for running, creates sub experiments
 * @throws Exception if an error occurs
 */
@Override public void initialize() throws Exception {
  if (m_baseExperiment == null) {
    throw new Exception("No base experiment specified!");
  }
  m_experimentAborted=false;
  m_finishedCount=0;
  m_failedCount=0;
  m_RunNumber=getRunLower();
  m_DatasetNumber=0;
  m_PropertyNumber=0;
  m_CurrentProperty=-1;
  m_CurrentInstances=null;
  m_Finished=false;
  if (m_remoteHosts.size() == 0) {
    throw new Exception("No hosts specified!");
  }
  m_remoteHostsStatus=new int[m_remoteHosts.size()];
  m_remoteHostFailureCounts=new int[m_remoteHosts.size()];
  m_remoteHostsQueue=new Queue();
  for (int i=0; i < m_remoteHosts.size(); i++) {
    m_remoteHostsQueue.push(new Integer(i));
  }
  m_subExpQueue=new Queue();
  int numExps;
  if (getSplitByDataSet()) {
    numExps=m_baseExperiment.getDatasets().size();
  }
 else {
    numExps=getRunUpper() - getRunLower() + 1;
  }
  m_subExperiments=new Experiment[numExps];
  m_subExpComplete=new int[numExps];
  SerializedObject so=new SerializedObject(m_baseExperiment);
  if (getSplitByDataSet()) {
    for (int i=0; i < m_baseExperiment.getDatasets().size(); i++) {
      m_subExperiments[i]=(Experiment)so.getObject();
      DefaultListModel temp=new DefaultListModel();
      temp.addElement(m_baseExperiment.getDatasets().get(i));
      m_subExperiments[i].setDatasets(temp);
      m_subExpQueue.push(new Integer(i));
    }
  }
 else {
    for (int i=getRunLower(); i <= getRunUpper(); i++) {
      m_subExperiments[i - getRunLower()]=(Experiment)so.getObject();
      m_subExperiments[i - getRunLower()].setRunLower(i);
      m_subExperiments[i - getRunLower()].setRunUpper(i);
      m_subExpQueue.push(new Integer(i - getRunLower()));
    }
  }
}

/** 
 * Inform all listeners of progress
 * @param status true if this is a status type of message
 * @param log true if this is a log type of message
 * @param finished true if the remote experiment has finished
 * @param message the message.
 */
private synchronized void notifyListeners(boolean status,boolean log,boolean finished,String message){
  if (m_listeners.size() > 0) {
    for (int i=0; i < m_listeners.size(); i++) {
      RemoteExperimentListener r=(m_listeners.get(i));
      r.remoteExperimentStatus(new RemoteExperimentEvent(status,log,finished,message));
    }
  }
 else {
    System.err.println(message);
  }
}

/** 
 * Set the abort flag
 */
public void abortExperiment(){
  m_experimentAborted=true;
}

/** 
 * Increment the number of successfully completed sub experiments
 */
protected synchronized void incrementFinished(){
  m_finishedCount++;
}

/** 
 * Increment the overall number of failures and the number of failures for a particular host
 * @param hostNum the index of the host to increment failure count
 */
protected synchronized void incrementFailed(int hostNum){
  m_failedCount++;
  m_remoteHostFailureCounts[hostNum]++;
}

/** 
 * Push an experiment back on the queue of waiting experiments
 * @param expNum the index of the experiment to push onto the queue
 */
protected synchronized void waitingExperiment(int expNum){
  m_subExpQueue.push(new Integer(expNum));
}

/** 
 * Check to see if we have failed to connect to all hosts
 * @return true if failed to connect to all hosts
 */
private boolean checkForAllFailedHosts(){
  boolean allbad=true;
  for (  int m_remoteHostsStatu : m_remoteHostsStatus) {
    if (m_remoteHostsStatu != CONNECTION_FAILED) {
      allbad=false;
      break;
    }
  }
  if (allbad) {
    abortExperiment();
    notifyListeners(false,true,true,"Experiment aborted! All connections " + "to remote hosts failed.");
  }
  return allbad;
}

/** 
 * Returns some post experiment information.
 * @return a String containing some post experiment info
 */
private String postExperimentInfo(){
  StringBuffer text=new StringBuffer();
  text.append(m_finishedCount + (m_splitByDataSet ? " data sets" : " runs") + " completed successfully. "+ m_failedCount+ " failures during running.\n");
  System.err.print(text.toString());
  return text.toString();
}

/** 
 * Pushes a host back onto the queue of available hosts and attempts to launch a waiting experiment (if any).
 * @param hostNum the index of the host to push back onto the queue ofavailable hosts
 */
protected synchronized void availableHost(int hostNum){
  if (hostNum >= 0) {
    if (m_remoteHostFailureCounts[hostNum] < MAX_FAILURES) {
      m_remoteHostsQueue.push(new Integer(hostNum));
    }
 else {
      notifyListeners(false,true,false,"Max failures exceeded for host " + ((String)m_remoteHosts.elementAt(hostNum)) + ". Removed from host list.");
      m_removedHosts++;
    }
  }
  if (m_failedCount == (MAX_FAILURES * m_remoteHosts.size())) {
    abortExperiment();
    notifyListeners(false,true,true,"Experiment aborted! Max failures " + "exceeded on all remote hosts.");
    return;
  }
  if ((getSplitByDataSet() && (m_baseExperiment.getDatasets().size() == m_finishedCount)) || (!getSplitByDataSet() && ((getRunUpper() - getRunLower() + 1) == m_finishedCount))) {
    notifyListeners(false,true,false,"Experiment completed successfully.");
    notifyListeners(false,true,true,postExperimentInfo());
    return;
  }
  if (checkForAllFailedHosts()) {
    return;
  }
  if (m_experimentAborted && (m_remoteHostsQueue.size() + m_removedHosts) == m_remoteHosts.size()) {
    notifyListeners(false,true,true,"Experiment aborted. All remote tasks " + "finished.");
  }
  if (!m_subExpQueue.empty() && !m_experimentAborted) {
    if (!m_remoteHostsQueue.empty()) {
      int availHost, waitingExp;
      try {
        availHost=((Integer)m_remoteHostsQueue.pop()).intValue();
        waitingExp=((Integer)m_subExpQueue.pop()).intValue();
        launchNext(waitingExp,availHost);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
}

/** 
 * Launch a sub experiment on a remote host
 * @param wexp the index of the sub experiment to launch
 * @param ah the index of the available host to launch on
 */
public void launchNext(final int wexp,final int ah){
  Thread subExpThread;
  subExpThread=new Thread(){
    @Override public void run(){
      m_remoteHostsStatus[ah]=IN_USE;
      m_subExpComplete[wexp]=TaskStatusInfo.PROCESSING;
      RemoteExperimentSubTask expSubTsk=new RemoteExperimentSubTask();
      expSubTsk.setExperiment(m_subExperiments[wexp]);
      String subTaskType=(getSplitByDataSet()) ? "dataset :" + ((File)m_subExperiments[wexp].getDatasets().elementAt(0)).getName() : "run :" + m_subExperiments[wexp].getRunLower();
      try {
        String name="//" + ((String)m_remoteHosts.elementAt(ah)) + "/RemoteEngine";
        Compute comp=(Compute)Naming.lookup(name);
        notifyListeners(false,true,false,"Starting " + subTaskType + " on host "+ ((String)m_remoteHosts.elementAt(ah)));
        Object subTaskId=comp.executeTask(expSubTsk);
        boolean finished=false;
        TaskStatusInfo is=null;
        while (!finished) {
          try {
            Thread.sleep(2000);
            TaskStatusInfo cs=(TaskStatusInfo)comp.checkStatus(subTaskId);
            if (cs.getExecutionStatus() == TaskStatusInfo.FINISHED) {
              notifyListeners(false,true,false,cs.getStatusMessage());
              m_remoteHostsStatus[ah]=AVAILABLE;
              incrementFinished();
              availableHost(ah);
              finished=true;
            }
 else             if (cs.getExecutionStatus() == TaskStatusInfo.FAILED) {
              notifyListeners(false,true,false,cs.getStatusMessage());
              m_remoteHostsStatus[ah]=SOME_OTHER_FAILURE;
              m_subExpComplete[wexp]=TaskStatusInfo.FAILED;
              notifyListeners(false,true,false,subTaskType + " " + cs.getStatusMessage()+ ". Scheduling for execution on another host.");
              incrementFailed(ah);
              waitingExperiment(wexp);
              availableHost(ah);
              finished=true;
            }
 else {
              if (is == null) {
                is=cs;
                notifyListeners(false,true,false,cs.getStatusMessage());
              }
 else {
                if (cs.getStatusMessage().compareTo(is.getStatusMessage()) != 0) {
                  notifyListeners(false,true,false,cs.getStatusMessage());
                }
                is=cs;
              }
            }
          }
 catch (          InterruptedException ie) {
          }
        }
      }
 catch (      Exception ce) {
        m_remoteHostsStatus[ah]=CONNECTION_FAILED;
        m_subExpComplete[wexp]=TaskStatusInfo.TO_BE_RUN;
        System.err.println(ce);
        ce.printStackTrace();
        notifyListeners(false,true,false,"Connection to " + ((String)m_remoteHosts.elementAt(ah)) + " failed. Scheduling "+ subTaskType+ " for execution on another host.");
        checkForAllFailedHosts();
        waitingExperiment(wexp);
      }
 finally {
        if (isInterrupted()) {
          System.err.println("Sub exp Interupted!");
        }
      }
    }
  }
;
  subExpThread.setPriority(Thread.MIN_PRIORITY);
  subExpThread.start();
}

@Override public void run(){
  m_remoteHostsStatus[ah]=IN_USE;
  m_subExpComplete[wexp]=TaskStatusInfo.PROCESSING;
  RemoteExperimentSubTask expSubTsk=new RemoteExperimentSubTask();
  expSubTsk.setExperiment(m_subExperiments[wexp]);
  String subTaskType=(getSplitByDataSet()) ? "dataset :" + ((File)m_subExperiments[wexp].getDatasets().elementAt(0)).getName() : "run :" + m_subExperiments[wexp].getRunLower();
  try {
    String name="//" + ((String)m_remoteHosts.elementAt(ah)) + "/RemoteEngine";
    Compute comp=(Compute)Naming.lookup(name);
    notifyListeners(false,true,false,"Starting " + subTaskType + " on host "+ ((String)m_remoteHosts.elementAt(ah)));
    Object subTaskId=comp.executeTask(expSubTsk);
    boolean finished=false;
    TaskStatusInfo is=null;
    while (!finished) {
      try {
        Thread.sleep(2000);
        TaskStatusInfo cs=(TaskStatusInfo)comp.checkStatus(subTaskId);
        if (cs.getExecutionStatus() == TaskStatusInfo.FINISHED) {
          notifyListeners(false,true,false,cs.getStatusMessage());
          m_remoteHostsStatus[ah]=AVAILABLE;
          incrementFinished();
          availableHost(ah);
          finished=true;
        }
 else         if (cs.getExecutionStatus() == TaskStatusInfo.FAILED) {
          notifyListeners(false,true,false,cs.getStatusMessage());
          m_remoteHostsStatus[ah]=SOME_OTHER_FAILURE;
          m_subExpComplete[wexp]=TaskStatusInfo.FAILED;
          notifyListeners(false,true,false,subTaskType + " " + cs.getStatusMessage()+ ". Scheduling for execution on another host.");
          incrementFailed(ah);
          waitingExperiment(wexp);
          availableHost(ah);
          finished=true;
        }
 else {
          if (is == null) {
            is=cs;
            notifyListeners(false,true,false,cs.getStatusMessage());
          }
 else {
            if (cs.getStatusMessage().compareTo(is.getStatusMessage()) != 0) {
              notifyListeners(false,true,false,cs.getStatusMessage());
            }
            is=cs;
          }
        }
      }
 catch (      InterruptedException ie) {
      }
    }
  }
 catch (  Exception ce) {
    m_remoteHostsStatus[ah]=CONNECTION_FAILED;
    m_subExpComplete[wexp]=TaskStatusInfo.TO_BE_RUN;
    System.err.println(ce);
    ce.printStackTrace();
    notifyListeners(false,true,false,"Connection to " + ((String)m_remoteHosts.elementAt(ah)) + " failed. Scheduling "+ subTaskType+ " for execution on another host.");
    checkForAllFailedHosts();
    waitingExperiment(wexp);
  }
 finally {
    if (isInterrupted()) {
      System.err.println("Sub exp Interupted!");
    }
  }
}

/** 
 * Overides the one in Experiment
 * @throws Exception never throws an exception
 */
@Override public void nextIteration() throws Exception {
}

/** 
 * overides the one in Experiment
 */
@Override public void advanceCounters(){
}

/** 
 * overides the one in Experiment
 */
@Override public void postProcess(){
}

/** 
 * Add a host name to the list of remote hosts
 * @param hostname the host name to add to the list
 */
public void addRemoteHost(String hostname){
  m_remoteHosts.addElement(hostname);
}

/** 
 * Get the list of remote host names
 * @return the list of remote host names
 */
public DefaultListModel getRemoteHosts(){
  return m_remoteHosts;
}

/** 
 * Set the list of remote host names
 * @param list the list of remote host names
 */
public void setRemoteHosts(DefaultListModel list){
  m_remoteHosts=list;
}

/** 
 * Overides toString in Experiment
 * @return a description of this remote experiment
 */
@Override public String toString(){
  String result=m_baseExperiment.toString();
  result+="\nRemote Hosts:\n";
  for (int i=0; i < m_remoteHosts.size(); i++) {
    result+=((String)m_remoteHosts.elementAt(i)) + '\n';
  }
  return result;
}

/** 
 * Overides runExperiment in Experiment
 */
@Override public void runExperiment(){
  int totalHosts=m_remoteHostsQueue.size();
  for (int i=0; i < totalHosts; i++) {
    availableHost(-1);
  }
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10376 $");
}

/** 
 * Configures/Runs the Experiment from the command line.
 * @param args command line arguments to the Experiment.
 */
public static void main(String[] args){
  try {
    weka.core.WekaPackageManager.loadPackages(false,true,false);
    RemoteExperiment exp=null;
    String xmlOption=Utils.getOption("xml",args);
    if (!xmlOption.equals("")) {
      args=new XMLOptions(xmlOption).toArray();
    }
    Experiment base=null;
    String expFile=Utils.getOption('l',args);
    String saveFile=Utils.getOption('s',args);
    boolean runExp=Utils.getFlag('r',args);
    ArrayList<String> remoteHosts=new ArrayList<String>();
    String runHost=" ";
    while (runHost.length() != 0) {
      runHost=Utils.getOption('h',args);
      if (runHost.length() != 0) {
        remoteHosts.add(runHost);
      }
    }
    if (expFile.length() == 0) {
      base=new Experiment();
      try {
        base.setOptions(args);
        Utils.checkForRemainingOptions(args);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        String result="Usage:\n\n" + "-l <exp file>\n" + "\tLoad experiment from file (default use cli options)\n"+ "-s <exp file>\n"+ "\tSave experiment to file after setting other options\n"+ "\t(default don't save)\n"+ "-h <remote host name>\n"+ "\tHost to run experiment on (may be specified more than once\n"+ "\tfor multiple remote hosts)\n"+ "-r \n"+ "\tRun experiment on (default don't run)\n"+ "-xml <filename | xml-string>\n"+ "\tget options from XML-Data instead from parameters\n"+ "\n";
        Enumeration<Option> enm=((OptionHandler)base).listOptions();
        while (enm.hasMoreElements()) {
          Option option=enm.nextElement();
          result+=option.synopsis() + "\n";
          result+=option.description() + "\n";
        }
        throw new Exception(result + "\n" + ex.getMessage());
      }
    }
 else {
      Object tmp;
      if ((KOML.isPresent()) && (expFile.toLowerCase().endsWith(KOML.FILE_EXTENSION))) {
        tmp=KOML.read(expFile);
      }
 else       if (expFile.toLowerCase().endsWith(".xml")) {
        XMLExperiment xml=new XMLExperiment();
        tmp=xml.read(expFile);
      }
 else {
        FileInputStream fi=new FileInputStream(expFile);
        ObjectInputStream oi=new ObjectInputStream(new BufferedInputStream(fi));
        tmp=oi.readObject();
        oi.close();
      }
      if (tmp instanceof RemoteExperiment) {
        exp=(RemoteExperiment)tmp;
      }
 else {
        base=(Experiment)tmp;
      }
    }
    if (base != null) {
      exp=new RemoteExperiment(base);
    }
    for (int i=0; i < remoteHosts.size(); i++) {
      exp.addRemoteHost(remoteHosts.get(i));
    }
    System.err.println("Experiment:\n" + exp.toString());
    if (saveFile.length() != 0) {
      if ((KOML.isPresent()) && (saveFile.toLowerCase().endsWith(KOML.FILE_EXTENSION))) {
        KOML.write(saveFile,exp);
      }
 else       if (saveFile.toLowerCase().endsWith(".xml")) {
        XMLExperiment xml=new XMLExperiment();
        xml.write(saveFile,exp);
      }
 else {
        FileOutputStream fo=new FileOutputStream(saveFile);
        ObjectOutputStream oo=new ObjectOutputStream(new BufferedOutputStream(fo));
        oo.writeObject(exp);
        oo.close();
      }
    }
    if (runExp) {
      System.err.println("Initializing...");
      exp.initialize();
      System.err.println("Iterating...");
      exp.runExperiment();
      System.err.println("Postprocessing...");
      exp.postProcess();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.err.println(ex.getMessage());
  }
}
}
