namespace weka.gui;

class ListSelectorDialog
{
  isA JDialog;
 depend java.awt.BorderLayout;
 depend java.awt.Container;
 depend java.awt.Dimension;
 depend java.awt.Frame;
 depend java.awt.Toolkit;
 depend java.awt.event.ActionEvent;
 depend java.awt.event.ActionListener;
 depend java.util.regex.Pattern;
 depend javax.swing.Box;
 depend javax.swing.BoxLayout;
 depend javax.swing.DefaultListModel;
 depend javax.swing.JButton;
 depend javax.swing.JDialog;
 depend javax.swing.JList;
 depend javax.swing.JOptionPane;
 depend javax.swing.JScrollPane;
/** 
 * for serialization 
 */
private static final long serialVersionUID=906147926840288895L;

/** 
 * Click to choose the currently selected property 
 */
protected JButton m_SelectBut=new JButton("Select");

/** 
 * Click to cancel the property selection 
 */
protected JButton m_CancelBut=new JButton("Cancel");

/** 
 * Click to enter a regex pattern for selection 
 */
protected JButton m_PatternBut=new JButton("Pattern");

/** 
 * The list component 
 */
protected JList m_List;

/** 
 * Whether the selection was made or cancelled 
 */
protected int m_Result;

/** 
 * Signifies an OK property selection 
 */
public static final int APPROVE_OPTION=0;

/** 
 * Signifies a cancelled property selection 
 */
public static final int CANCEL_OPTION=1;

/** 
 * The current regular expression. 
 */
protected String m_PatternRegEx=".*";

/** 
 * Create the list selection dialog.
 * @param parentFrame the parent frame of the dialog
 * @param userList the JList component the user will select from
 */
public ListSelectorDialog(Frame parentFrame,JList userList){
  super(parentFrame,"Select items",ModalityType.DOCUMENT_MODAL);
  m_List=userList;
  m_CancelBut.setMnemonic('C');
  m_CancelBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_Result=CANCEL_OPTION;
      setVisible(false);
    }
  }
);
  m_SelectBut.setMnemonic('S');
  m_SelectBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_Result=APPROVE_OPTION;
      setVisible(false);
    }
  }
);
  m_PatternBut.setMnemonic('P');
  m_PatternBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      selectPattern();
    }
  }
);
  Container c=getContentPane();
  c.setLayout(new BorderLayout());
  Box b1=new Box(BoxLayout.X_AXIS);
  b1.add(m_SelectBut);
  b1.add(Box.createHorizontalStrut(10));
  b1.add(m_PatternBut);
  b1.add(Box.createHorizontalStrut(10));
  b1.add(m_CancelBut);
  c.add(b1,BorderLayout.SOUTH);
  c.add(new JScrollPane(m_List),BorderLayout.CENTER);
  getRootPane().setDefaultButton(m_SelectBut);
  pack();
  Dimension screen=Toolkit.getDefaultToolkit().getScreenSize();
  int width=getWidth() > screen.getWidth() ? (int)screen.getWidth() : getWidth();
  int height=getHeight() > screen.getHeight() ? (int)screen.getHeight() : getHeight();
  setSize(width,height);
}

public void actionPerformed(ActionEvent e){
  m_Result=CANCEL_OPTION;
  setVisible(false);
}

public void actionPerformed(ActionEvent e){
  m_Result=APPROVE_OPTION;
  setVisible(false);
}

public void actionPerformed(ActionEvent e){
  selectPattern();
}

/** 
 * Pops up the modal dialog and waits for cancel or a selection.
 * @return either APPROVE_OPTION, or CANCEL_OPTION
 */
public int showDialog(){
  m_Result=CANCEL_OPTION;
  int[] origSelected=m_List.getSelectedIndices();
  setVisible(true);
  if (m_Result == CANCEL_OPTION) {
    m_List.setSelectedIndices(origSelected);
  }
  return m_Result;
}

/** 
 * opens a separate dialog for entering a regex pattern for selecting elements from the provided list
 */
protected void selectPattern(){
  String pattern=JOptionPane.showInputDialog(m_PatternBut.getParent(),"Enter a Perl regular expression ('.*' for all)",m_PatternRegEx);
  if (pattern != null) {
    try {
      Pattern.compile(pattern);
      m_PatternRegEx=pattern;
      m_List.clearSelection();
      for (int i=0; i < m_List.getModel().getSize(); i++) {
        if (Pattern.matches(pattern,m_List.getModel().getElementAt(i).toString()))         m_List.addSelectionInterval(i,i);
      }
    }
 catch (    Exception ex) {
      JOptionPane.showMessageDialog(m_PatternBut.getParent(),"'" + pattern + "' is not a valid Perl regular expression!\n"+ "Error: "+ ex,"Error in Pattern...",JOptionPane.ERROR_MESSAGE);
    }
  }
}

/** 
 * Tests out the list selector from the command line.
 * @param args ignored
 */
public static void main(String[] args){
  try {
    DefaultListModel lm=new DefaultListModel();
    lm.addElement("one");
    lm.addElement("two");
    lm.addElement("three");
    lm.addElement("four");
    lm.addElement("five");
    JList jl=new JList(lm);
    final ListSelectorDialog jd=new ListSelectorDialog(null,jl);
    int result=jd.showDialog();
    if (result == ListSelectorDialog.APPROVE_OPTION) {
      System.err.println("Fields Selected");
      int[] selected=jl.getSelectedIndices();
      for (int i=0; i < selected.length; i++) {
        System.err.println("" + selected[i] + " "+ lm.elementAt(selected[i]));
      }
    }
 else {
      System.err.println("Cancelled");
    }
    System.exit(0);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.err.println(ex.getMessage());
  }
}
}
