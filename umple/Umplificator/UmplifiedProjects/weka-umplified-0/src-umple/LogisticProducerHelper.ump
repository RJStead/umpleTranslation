namespace weka.classifiers.pmml.producer;

class LogisticProducerHelper
{
  isA AbstractPMMLProducerHelper;
 depend java.io.StringWriter;
 depend java.math.BigInteger;
 depend javax.xml.bind.JAXBContext;
 depend javax.xml.bind.JAXBException;
 depend javax.xml.bind.Marshaller;
 depend weka.core.Attribute;
 depend weka.core.Instances;
 depend weka.core.pmml.jaxbbindings.DATATYPE;
 depend weka.core.pmml.jaxbbindings.DerivedField;
 depend weka.core.pmml.jaxbbindings.FIELDUSAGETYPE;
 depend weka.core.pmml.jaxbbindings.LocalTransformations;
 depend weka.core.pmml.jaxbbindings.MININGFUNCTION;
 depend weka.core.pmml.jaxbbindings.MISSINGVALUETREATMENTMETHOD;
 depend weka.core.pmml.jaxbbindings.MiningField;
 depend weka.core.pmml.jaxbbindings.MiningSchema;
 depend weka.core.pmml.jaxbbindings.NormDiscrete;
 depend weka.core.pmml.jaxbbindings.NumericPredictor;
 depend weka.core.pmml.jaxbbindings.OPTYPE;
 depend weka.core.pmml.jaxbbindings.Output;
 depend weka.core.pmml.jaxbbindings.OutputField;
 depend weka.core.pmml.jaxbbindings.PMML;
 depend weka.core.pmml.jaxbbindings.REGRESSIONNORMALIZATIONMETHOD;
 depend weka.core.pmml.jaxbbindings.RegressionModel;
 depend weka.core.pmml.jaxbbindings.RegressionTable;
 depend weka.core.pmml.jaxbbindings.TransformationDictionary;
/** 
 * Produce the PMML for a Logistic classifier
 * @param train the training data used to build the Logistic model
 * @param structureAfterFiltering the structure of the training data afterfiltering
 * @param par the parameters of the function(s)
 * @param numClasses the number of classes in the data
 * @return the PMML for the classifier
 */
public static String toPMML(Instances train,Instances structureAfterFiltering,double[][] par,int numClasses){
  PMML pmml=initPMML();
  addDataDictionary(train,pmml);
  String currentAttrName=null;
  TransformationDictionary transformDict=null;
  LocalTransformations localTransforms=null;
  MiningSchema schema=new MiningSchema();
  for (int i=0; i < structureAfterFiltering.numAttributes(); i++) {
    Attribute attr=structureAfterFiltering.attribute(i);
    Attribute originalAttr=train.attribute(attr.name());
    if (i == structureAfterFiltering.classIndex()) {
      schema.addMiningFields(new MiningField(attr.name(),FIELDUSAGETYPE.PREDICTED));
    }
    if (originalAttr == null) {
      if (localTransforms == null) {
        localTransforms=new LocalTransformations();
      }
      if (transformDict == null) {
        transformDict=new TransformationDictionary();
      }
      String[] nameAndValue=getNameAndValueFromUnsupervisedNominalToBinaryDerivedAttribute(train,attr);
      if (!nameAndValue[0].equals(currentAttrName)) {
        currentAttrName=nameAndValue[0];
        if (i != structureAfterFiltering.classIndex()) {
          int mode=(int)train.meanOrMode(train.attribute(nameAndValue[0]));
          schema.addMiningFields(new MiningField(nameAndValue[0],FIELDUSAGETYPE.ACTIVE,MISSINGVALUETREATMENTMETHOD.AS_MODE,train.attribute(nameAndValue[0]).value(mode)));
        }
      }
      DerivedField derivedfield=new DerivedField(attr.name(),DATATYPE.DOUBLE,OPTYPE.CONTINUOUS);
      NormDiscrete normDiscrete=new NormDiscrete(nameAndValue[0],nameAndValue[1]);
      derivedfield.setNormDiscrete(normDiscrete);
      transformDict.addDerivedField(derivedfield);
    }
 else {
      if (i != structureAfterFiltering.classIndex()) {
        if (originalAttr.isNumeric()) {
          String mean="" + train.meanOrMode(originalAttr);
          schema.addMiningFields(new MiningField(originalAttr.name(),FIELDUSAGETYPE.ACTIVE,MISSINGVALUETREATMENTMETHOD.AS_MEAN,mean));
        }
 else {
          int mode=(int)train.meanOrMode(originalAttr);
          schema.addMiningFields(new MiningField(originalAttr.name(),FIELDUSAGETYPE.ACTIVE,MISSINGVALUETREATMENTMETHOD.AS_MODE,originalAttr.value(mode)));
        }
      }
    }
  }
  RegressionModel model=new RegressionModel();
  if (transformDict != null) {
    pmml.setTransformationDictionary(transformDict);
  }
  model.addContent(schema);
  model.setFunctionName(MININGFUNCTION.CLASSIFICATION);
  model.setAlgorithmName("logisticRegression");
  model.setModelType("logisticRegression");
  model.setNormalizationMethod(REGRESSIONNORMALIZATIONMETHOD.SOFTMAX);
  Output output=new Output();
  Attribute classAttribute=structureAfterFiltering.classAttribute();
  for (int i=0; i < classAttribute.numValues(); i++) {
    OutputField outputField=new OutputField();
    outputField.setName(classAttribute.name());
    outputField.setValue(classAttribute.value(i));
    output.addOutputField(outputField);
  }
  model.addContent(output);
  for (int i=0; i < numClasses - 1; i++) {
    RegressionTable table=new RegressionTable(structureAfterFiltering.classAttribute().value(i));
    int j=1;
    for (int k=0; k < structureAfterFiltering.numAttributes(); k++) {
      if (k != structureAfterFiltering.classIndex()) {
        Attribute attr=structureAfterFiltering.attribute(k);
        table.addNumericPredictor(new NumericPredictor(attr.name(),BigInteger.valueOf(1),par[j][i]));
        j++;
      }
    }
    table.setIntercept(par[0][i]);
    model.addContent(table);
  }
  pmml.addAssociationModelOrBaselineModelOrClusteringModes(model);
  try {
    StringWriter sw=new StringWriter();
    JAXBContext jc=JAXBContext.newInstance(PMML.class);
    Marshaller marshaller=jc.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
    marshaller.marshal(pmml,sw);
    return sw.toString();
  }
 catch (  JAXBException e) {
    e.printStackTrace();
  }
  return "";
}
}
