namespace weka.gui.sql;

class ResultSetTable
{
  isA JTable;
 depend java.awt.event.MouseAdapter;
 depend java.awt.event.MouseEvent;
 depend javax.swing.JTable;
 depend javax.swing.table.TableColumnModel;
 depend weka.gui.JTableHelper;
/** 
 * for serialization 
 */
private static final long serialVersionUID=-3391076671854464137L;

/** 
 * the query the table model is based on 
 */
protected String m_Query;

/** 
 * the connect string with which the query was run 
 */
protected String m_URL;

/** 
 * the user that was used to connect to the DB 
 */
protected String m_User;

/** 
 * the password that was used to connect to the DB 
 */
protected String m_Password;

/** 
 * initializes the table
 * @param url         the database URL
 * @param user        the database user
 * @param pw          the database password
 * @param query       the query
 */
public ResultSetTable(String url,String user,String pw,String query,ResultSetTableModel model){
  super(model);
  m_URL=url;
  m_User=user;
  m_Password=pw;
  m_Query=query;
  setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  for (int i=0; i < getColumnCount(); i++) {
    JTableHelper.setOptimalHeaderWidth(this,i);
    getColumnModel().getColumn(i).setCellRenderer(new ResultSetTableCellRenderer());
  }
  final JTable table=this;
  getTableHeader().addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      TableColumnModel columnModel=getColumnModel();
      int viewColumn=columnModel.getColumnIndexAtX(e.getX());
      int column=convertColumnIndexToModel(viewColumn);
      if ((e.getButton() == MouseEvent.BUTTON1) && (e.getClickCount() == 2) && (column != -1))       JTableHelper.setOptimalColumnWidth(table,column);
    }
  }
);
  getTableHeader().setToolTipText("double left click on column displays the column with optimal width");
}

public void mouseClicked(MouseEvent e){
  TableColumnModel columnModel=getColumnModel();
  int viewColumn=columnModel.getColumnIndexAtX(e.getX());
  int column=convertColumnIndexToModel(viewColumn);
  if ((e.getButton() == MouseEvent.BUTTON1) && (e.getClickCount() == 2) && (column != -1))   JTableHelper.setOptimalColumnWidth(table,column);
}

/** 
 * returns the database URL that produced the table model
 */
public String getURL(){
  return m_URL;
}

/** 
 * returns the user that produced the table model
 */
public String getUser(){
  return m_User;
}

/** 
 * returns the password that produced the table model
 */
public String getPassword(){
  return m_Password;
}

/** 
 * returns the query that produced the table model
 */
public String getQuery(){
  return m_Query;
}

/** 
 * frees up the memory
 */
public void finalize() throws Throwable {
  if (getModel() != null)   ((ResultSetTableModel)getModel()).finalize();
  super.finalize();
  System.gc();
}
}
