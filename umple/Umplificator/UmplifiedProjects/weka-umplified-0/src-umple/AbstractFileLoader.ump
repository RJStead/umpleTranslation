namespace weka.core.converters;

class AbstractFileLoader
{
  isA FileSourcedConverter,EnvironmentHandler;
  isA AbstractLoader;
 depend java.io.File;
 depend java.io.FileInputStream;
 depend java.io.IOException;
 depend java.util.Enumeration;
 depend java.util.zip.GZIPInputStream;
 depend weka.core.Environment;
 depend weka.core.EnvironmentHandler;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.Option;
 depend weka.core.OptionHandler;
 depend weka.core.Utils;
private static final long serialVersionUID=5535537461920594758L;

/** 
 * the file 
 */
protected String m_File=(new File(System.getProperty("user.dir"))).getAbsolutePath();

/** 
 * Holds the determined structure (header) of the data set. 
 */
protected transient Instances m_structure=null;

/** 
 * Holds the source of the data set. 
 */
protected File m_sourceFile=null;

/** 
 * the extension for compressed files 
 */
public static String FILE_EXTENSION_COMPRESSED=".gz";

/** 
 * use relative file paths 
 */
protected boolean m_useRelativePath=false;

/** 
 * Environment variables 
 */
protected transient Environment m_env;

/** 
 * get the File specified as the source
 * @return the source file
 */
@Override public File retrieveFile(){
  return new File(m_File);
}

/** 
 * sets the source File
 * @param file the source file
 * @exception IOException if an error occurs
 */
@Override public void setFile(File file) throws IOException {
  m_structure=null;
  setRetrieval(NONE);
  setSource(file);
}

/** 
 * Set the environment variables to use.
 * @param env the environment variables to use
 */
@Override public void setEnvironment(Environment env){
  m_env=env;
  try {
    reset();
  }
 catch (  IOException ex) {
  }
}

/** 
 * Resets the loader ready to read a new data set
 * @throws IOException if something goes wrong
 */
@Override public void reset() throws IOException {
  m_structure=null;
  setRetrieval(NONE);
}

/** 
 * Resets the Loader object and sets the source of the data set to be the supplied File object.
 * @param file the source file.
 * @throws IOException if an error occurs
 */
@Override public void setSource(File file) throws IOException {
  File original=file;
  m_structure=null;
  setRetrieval(NONE);
  if (file == null) {
    throw new IOException("Source file object is null!");
  }
  String fName=file.getPath();
  try {
    if (m_env == null) {
      m_env=Environment.getSystemWide();
    }
    fName=m_env.substitute(fName);
  }
 catch (  Exception e) {
  }
  file=new File(fName);
  if (file.exists() && file.isFile()) {
    if (file.getName().endsWith(getFileExtension() + FILE_EXTENSION_COMPRESSED)) {
      setSource(new GZIPInputStream(new FileInputStream(file)));
    }
 else {
      setSource(new FileInputStream(file));
    }
  }
 else {
    String fnameWithCorrectSeparators=fName.replace(File.separatorChar,'/');
    if (this.getClass().getClassLoader().getResource(fnameWithCorrectSeparators) != null) {
      setSource(this.getClass().getClassLoader().getResourceAsStream(fnameWithCorrectSeparators));
    }
  }
  if (m_useRelativePath) {
    try {
      m_sourceFile=Utils.convertToRelativePath(original);
      m_File=m_sourceFile.getPath();
    }
 catch (    Exception ex) {
      m_sourceFile=original;
      m_File=m_sourceFile.getPath();
    }
  }
 else {
    m_sourceFile=original;
    m_File=m_sourceFile.getPath();
  }
}

/** 
 * Tip text suitable for displaying int the GUI
 * @return a description of this property as a String
 */
public String useRelativePathTipText(){
  return "Use relative rather than absolute paths";
}

/** 
 * Set whether to use relative rather than absolute paths
 * @param rp true if relative paths are to be used
 */
@Override public void setUseRelativePath(boolean rp){
  m_useRelativePath=rp;
}

/** 
 * Gets whether relative paths are to be used
 * @return true if relative paths are to be used
 */
@Override public boolean getUseRelativePath(){
  return m_useRelativePath;
}

/** 
 * generates a string suitable for output on the command line displaying all available options (currently only a simple usage).
 * @param loader the loader to create the option string for
 * @return the option string
 */
protected static String makeOptionStr(AbstractFileLoader loader){
  StringBuffer result;
  Option option;
  result=new StringBuffer("\nUsage:\n");
  result.append("\t" + loader.getClass().getName().replaceAll(".*\\.",""));
  if (loader instanceof OptionHandler) {
    result.append(" [options]");
  }
  result.append(" <");
  String[] ext=loader.getFileExtensions();
  for (int i=0; i < ext.length; i++) {
    if (i > 0) {
      result.append(" | ");
    }
    result.append("file" + ext[i]);
  }
  result.append(">\n");
  if (loader instanceof OptionHandler) {
    result.append("\nOptions:\n\n");
    Enumeration<Option> enm=((OptionHandler)loader).listOptions();
    while (enm.hasMoreElements()) {
      option=enm.nextElement();
      result.append(option.synopsis() + "\n");
      result.append(option.description() + "\n");
    }
  }
  return result.toString();
}

/** 
 * runs the given loader with the provided options
 * @param loader the loader to run
 * @param options the commandline options, first argument must be the file toload
 */
public static void runFileLoader(AbstractFileLoader loader,String[] options){
  try {
    String[] tmpOptions=options.clone();
    if (Utils.getFlag('h',tmpOptions)) {
      System.err.println("\nHelp requested\n" + makeOptionStr(loader));
      return;
    }
  }
 catch (  Exception e) {
  }
  if (options.length > 0) {
    if (loader instanceof OptionHandler) {
      try {
        ((OptionHandler)loader).setOptions(options);
        for (int i=0; i < options.length; i++) {
          if (options[i].length() > 0) {
            options=new String[]{options[i]};
            break;
          }
        }
      }
 catch (      Exception ex) {
        System.err.println(makeOptionStr(loader));
        System.exit(1);
      }
    }
    try {
      loader.setFile(new File(options[0]));
      if (loader instanceof IncrementalConverter) {
        Instances structure=loader.getStructure();
        System.out.println(structure);
        Instance temp;
        do {
          temp=loader.getNextInstance(structure);
          if (temp != null) {
            System.out.println(temp);
          }
        }
 while (temp != null);
      }
 else {
        System.out.println(loader.getDataSet());
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
 else {
    System.err.println(makeOptionStr(loader));
  }
}
}
