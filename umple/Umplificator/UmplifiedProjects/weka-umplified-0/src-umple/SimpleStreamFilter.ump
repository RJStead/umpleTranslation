namespace weka.filters;

class SimpleStreamFilter
{
  isA StreamableFilter;
  isA SimpleFilter;
 depend weka.core.Instance;
 depend weka.core.Instances;
/** 
 * for serialization 
 */
private static final long serialVersionUID=2754882676192747091L;

/** 
 * Returns true if the output format is immediately available after the input format has been set and not only after all the data has been seen (see batchFinished()). This method should normally return true for a stream filter, since the data will be processed in a batch manner instead (or at least for the second batch of files, see m_FirstBatchDone).
 * @return true if the output format is immediately available
 * @see #batchFinished()
 * @see #setInputFormat(Instances)
 * @see #m_FirstBatchDone
 */
@Override protected boolean hasImmediateOutputFormat(){
  return true;
}

/** 
 * Determines the output format based on the input format and returns this. In case the output format cannot be returned immediately, i.e., hasImmediateOutputFormat() returns false, then this method will called from batchFinished() after the call of preprocess(Instances), in which, e.g., statistics for the actual processing step can be gathered.
 * @param inputFormat the input format to base the output format on
 * @return the output format
 * @throws Exception in case the determination goes wrong
 * @see #hasImmediateOutputFormat()
 * @see #batchFinished()
 * @see #preprocess(Instances)
 */
@Override protected abstract Instances determineOutputFormat(Instances inputFormat) throws Exception ;

/** 
 * processes the given instance (may change the provided instance) and returns the modified version.
 * @param instance the instance to process
 * @return the modified data
 * @throws Exception in case the processing goes wrong
 */
protected abstract Instance process(Instance instance) throws Exception ;

/** 
 * Processes the given data (may change the provided dataset) and returns the modified version. This method is called in batchFinished(). This implementation only calls process(Instance) for each instance in the given dataset.
 * @param instances the data to process
 * @return the modified data
 * @throws Exception in case the processing goes wrong
 * @see #batchFinished()
 * @see #process(Instance)
 */
@Override protected Instances process(Instances instances) throws Exception {
  Instances result;
  int i;
  result=new Instances(getOutputFormat(),0);
  for (i=0; i < instances.numInstances(); i++) {
    result.add(process(instances.instance(i)));
  }
  return result;
}

/** 
 * In case the output format cannot be returned immediately, this method is called before the actual processing of the instances. Derived classes can implement specific behavior here.
 * @param instances the instances to work on
 * @see #hasImmediateOutputFormat()
 * @see #determineOutputFormat(Instances)
 */
protected void preprocess(Instances instances){
}

/** 
 * Input an instance for filtering. Filter requires all training instances be read before producing output.
 * @param instance the input instance
 * @return true if the filtered instance may now be collected with output().
 * @throws IllegalStateException if no input structure has been defined
 * @throws Exception if something goes wrong
 */
@Override public boolean input(Instance instance) throws Exception {
  if (getInputFormat() == null) {
    throw new IllegalStateException("No input instance format defined");
  }
  if (m_NewBatch) {
    resetQueue();
    m_NewBatch=false;
  }
  try {
    if (hasImmediateOutputFormat() || isFirstBatchDone()) {
      Instance processed=process((Instance)instance.copy());
      if (processed != null) {
        push(processed);
        return true;
      }
      return false;
    }
 else {
      bufferInput(instance);
      return false;
    }
  }
 catch (  Exception e) {
    return false;
  }
}

/** 
 * Signify that this batch of input to the filter is finished. If the filter requires all instances prior to filtering, output() may now be called to retrieve the filtered instances. Any subsequent instances filtered should be filtered based on setting obtained from the first batch (unless the setInputFormat has been re-assigned or new options have been set).
 * @return true if there are instances pending output
 * @throws IllegalStateException if no input format has been set.
 */
@Override public boolean batchFinished() throws Exception {
  int i;
  Instances inst;
  if (getInputFormat() == null) {
    throw new IllegalStateException("No input instance format defined");
  }
  inst=new Instances(getInputFormat());
  flushInput();
  if (!hasImmediateOutputFormat()) {
    preprocess(inst);
  }
  inst=process(inst);
  if (!hasImmediateOutputFormat() && !isFirstBatchDone()) {
    setOutputFormat(inst);
  }
  for (i=0; i < inst.numInstances(); i++) {
    push(inst.instance(i));
  }
  m_NewBatch=true;
  m_FirstBatchDone=true;
  return (numPendingOutput() != 0);
}
}
