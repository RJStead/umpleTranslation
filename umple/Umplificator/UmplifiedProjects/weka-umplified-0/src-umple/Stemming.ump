namespace weka.core.stemmers;

class Stemming
{
  isA RevisionHandler;
 depend java.io.BufferedReader;
 depend java.io.BufferedWriter;
 depend java.io.FileInputStream;
 depend java.io.FileOutputStream;
 depend java.io.InputStreamReader;
 depend java.io.OutputStreamWriter;
 depend java.io.Reader;
 depend java.io.Writer;
 depend java.util.Collections;
 depend java.util.Enumeration;
 depend java.util.Vector;
 depend weka.core.Option;
 depend weka.core.OptionHandler;
 depend weka.core.RevisionHandler;
 depend weka.core.RevisionUtils;
 depend weka.core.Utils;
/** 
 * lists all the options on the command line
 * @param stemmer the stemmer to list the parameters for
 * @return the option string
 */
protected static String makeOptionsString(Stemmer stemmer){
  Vector<Option> options=new Vector<Option>();
  options.add(new Option("\tDisplays this help.","h",0,"-h"));
  options.add(new Option("\tThe file to process.","i",1,"-i <input-file>"));
  options.add(new Option("\tThe file to output the processed data to (default stdout).","o",1,"-o <output-file>"));
  options.add(new Option("\tUses lowercase strings.","l",0,"-l"));
  if (stemmer instanceof OptionHandler) {
    options.addAll(Collections.list(((OptionHandler)stemmer).listOptions()));
  }
  StringBuffer result=new StringBuffer();
  result.append("\nStemmer options:\n\n");
  Enumeration<Option> enm=options.elements();
  while (enm.hasMoreElements()) {
    Option option=enm.nextElement();
    result.append(option.synopsis() + "\n");
    result.append(option.description() + "\n");
  }
  return result.toString();
}

/** 
 * Applies the given stemmer according to the given options. '-h' lists all the available options for the given stemmer.
 * @param stemmer the stemmer to use
 * @param options the options for the stemmer
 * @throws Exception if something goes wrong
 */
public static void useStemmer(Stemmer stemmer,String[] options) throws Exception {
  Reader reader;
  StringBuffer input;
  Writer output;
  String tmpStr;
  boolean lowerCase;
  if (Utils.getFlag('h',options)) {
    System.out.println(makeOptionsString(stemmer));
    return;
  }
  tmpStr=Utils.getOption('i',options);
  if (tmpStr.length() == 0) {
    throw new IllegalArgumentException("No input file defined!" + makeOptionsString(stemmer));
  }
 else {
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(tmpStr)));
  }
  input=new StringBuffer();
  tmpStr=Utils.getOption('o',options);
  if (tmpStr.length() == 0) {
    output=new BufferedWriter(new OutputStreamWriter(System.out));
  }
 else {
    output=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tmpStr)));
  }
  lowerCase=Utils.getFlag('l',options);
  if (stemmer instanceof OptionHandler) {
    ((OptionHandler)stemmer).setOptions(options);
  }
  try {
    Utils.checkForRemainingOptions(options);
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    System.out.println(makeOptionsString(stemmer));
    reader.close();
    return;
  }
  int character;
  while ((character=reader.read()) != -1) {
    char ch=(char)character;
    if (Character.isWhitespace(ch)) {
      if (input.length() > 0) {
        output.write(stemmer.stem(input.toString()));
        input=new StringBuffer();
      }
      output.write(ch);
    }
 else {
      if (lowerCase) {
        input.append(Character.toLowerCase(ch));
      }
 else {
        input.append(ch);
      }
    }
  }
  output.flush();
  reader.close();
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10203 $");
}
}
