namespace weka.classifiers.trees.lmt;

class SimpleLinearRegression
{
  isA Serializable;
 depend java.io.Serializable;
 depend weka.core.Instance;
 depend weka.core.Instances;
/** 
 * for serialization 
 */
static final long serialVersionUID=1779336022895414137L;

/** 
 * The index of the chosen attribute 
 */
private int m_attributeIndex=-1;

/** 
 * The slope 
 */
private double m_slope=Double.NaN;

/** 
 * The intercept 
 */
private double m_intercept=Double.NaN;

/** 
 * Default constructor.
 */
public SimpleLinearRegression(){
}

/** 
 * Construct a simple linear regression model based on the given info.
 */
public SimpleLinearRegression(int attIndex,double slope,double intercept){
  m_attributeIndex=attIndex;
  m_slope=slope;
  m_intercept=intercept;
}

/** 
 * Takes the given simple linear regression model and adds it to this one. Does nothing if the given model is based on a different attribute. Assumes the given model has been initialized.
 */
public void addModel(SimpleLinearRegression slr) throws Exception {
  m_attributeIndex=slr.m_attributeIndex;
  if (m_attributeIndex != -1) {
    m_slope+=slr.m_slope;
    m_intercept+=slr.m_intercept;
  }
 else {
    m_slope=slr.m_slope;
    m_intercept=slr.m_intercept;
  }
}

/** 
 * Generate a prediction for the supplied instance.
 * @param inst the instance to predict.
 * @return the prediction
 */
public double classifyInstance(Instance inst){
  return m_intercept + m_slope * inst.value(m_attributeIndex);
}

/** 
 * Computes the attribute means.
 */
protected double[] computeMeans(Instances insts){
  double[] means=new double[insts.numAttributes()];
  double[] counts=new double[insts.numAttributes()];
  for (int j=0; j < insts.numInstances(); j++) {
    Instance inst=insts.instance(j);
    for (int i=0; i < insts.numAttributes(); i++) {
      means[i]+=inst.weight() * inst.value(i);
      counts[i]+=inst.weight();
    }
  }
  for (int i=0; i < insts.numAttributes(); i++) {
    if (counts[i] > 0) {
      means[i]/=counts[i];
    }
 else {
      means[i]=0.0;
    }
  }
  return means;
}

/** 
 * Builds a simple linear regression model given the supplied training data.
 * @param insts the training data.
 */
public void buildClassifier(Instances insts){
  double[] means=computeMeans(insts);
  double[] slopes=new double[insts.numAttributes()];
  double[] sumWeightedDiffsSquared=new double[insts.numAttributes()];
  int classIndex=insts.classIndex();
  for (int j=0; j < insts.numInstances(); j++) {
    Instance inst=insts.instance(j);
    double yDiff=inst.value(classIndex) - means[classIndex];
    double weightedYDiff=inst.weight() * yDiff;
    for (int i=0; i < insts.numAttributes(); i++) {
      double diff=inst.value(i) - means[i];
      double weightedDiff=inst.weight() * diff;
      slopes[i]+=weightedYDiff * diff;
      sumWeightedDiffsSquared[i]+=weightedDiff * diff;
    }
  }
  double minSSE=Double.MAX_VALUE;
  m_attributeIndex=-1;
  for (int i=0; i < insts.numAttributes(); i++) {
    if ((i == classIndex) || (sumWeightedDiffsSquared[i] == 0)) {
      continue;
    }
    double numerator=slopes[i];
    slopes[i]/=sumWeightedDiffsSquared[i];
    double intercept=means[classIndex] - slopes[i] * means[i];
    double sse=sumWeightedDiffsSquared[classIndex] - slopes[i] * numerator;
    if (sse < minSSE) {
      minSSE=sse;
      m_attributeIndex=i;
      m_slope=slopes[i];
      m_intercept=intercept;
    }
  }
}

/** 
 * Returns true if a usable attribute was found.
 * @return true if a usable attribute was found.
 */
public boolean foundUsefulAttribute(){
  return (m_attributeIndex != -1);
}

/** 
 * Returns the index of the attribute used in the regression.
 * @return the index of the attribute.
 */
public int getAttributeIndex(){
  return m_attributeIndex;
}

/** 
 * Returns the slope of the function.
 * @return the slope.
 */
public double getSlope(){
  return m_slope;
}

/** 
 * Returns the intercept of the function.
 * @return the intercept.
 */
public double getIntercept(){
  return m_intercept;
}
}
