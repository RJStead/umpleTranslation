namespace weka.filters.unsupervised.attribute;

class MergeManyValuesTest
{
  isA AbstractFilterTest;
 depend weka.core.Instances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
/** 
 * Initializes the test.
 * @param name	the name of the test
 */
public MergeManyValuesTest(String name){
  super(name);
}

/** 
 * Creates an default MergeManyValues.
 * @return		the default filter.
 */
public Filter getFilter(){
  MergeManyValues f=new MergeManyValues();
  f.setAttributeIndex("2");
  return f;
}

/** 
 * Tests invalid attribute types.
 */
public void testInvalidAttributeTypes(){
  Instances icopy=new Instances(m_Instances);
  try {
    ((MergeManyValues)m_Filter).setAttributeIndex("1");
    m_Filter.setInputFormat(icopy);
    fail("Should have thrown an exception selecting a STRING attribute!");
  }
 catch (  Exception ex) {
  }
  try {
    ((MergeManyValues)m_Filter).setAttributeIndex("3");
    m_Filter.setInputFormat(icopy);
    fail("Should have thrown an exception indicating a NUMERIC attribute!");
  }
 catch (  Exception ex) {
  }
}

/** 
 * Tests default setup.
 */
public void testTypical(){
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  int mergedIndex=-1;
  for (int i=0; i < result.numInstances(); i++) {
    if ((m_Instances.instance(i).value(1) == 0) || (m_Instances.instance(i).value(1) == 1)) {
      if (mergedIndex == -1) {
        mergedIndex=(int)result.instance(i).value(1);
      }
 else {
        assertEquals("Checking merged value for instance: " + (i + 1),mergedIndex,(int)result.instance(i).value(1));
      }
    }
  }
}

/** 
 * Tests a different range.
 */
public void testDifferentRange(){
  ((MergeManyValues)m_Filter).setMergeValueRange("2,3");
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  int mergedIndex=-1;
  for (int i=0; i < result.numInstances(); i++) {
    if ((m_Instances.instance(i).value(1) == 1) || (m_Instances.instance(i).value(1) == 2)) {
      if (mergedIndex == -1) {
        mergedIndex=(int)result.instance(i).value(1);
      }
 else {
        assertEquals("Checking merged value for instance: " + (i + 1),mergedIndex,(int)result.instance(i).value(1));
      }
    }
  }
}

/** 
 * Test merging all labels.
 */
public void testMergeAll(){
  ((MergeManyValues)m_Filter).setMergeValueRange("first-last");
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  assertEquals(1,result.attribute(1).numValues());
}

/** 
 * Tests attribute with missing values.
 */
public void testAttributeWithMissing(){
  ((MergeManyValues)m_Filter).setAttributeIndex("5");
  ((MergeManyValues)m_Filter).setMergeValueRange("1,2");
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  int mergedIndex=-1;
  for (int i=0; i < result.numInstances(); i++) {
    if (m_Instances.instance(i).isMissing(4)) {
      assertTrue("Missing in input should give missing in result",result.instance(i).isMissing(4));
    }
 else     if ((m_Instances.instance(i).value(4) == 0) || (m_Instances.instance(i).value(4) == 1)) {
      if (mergedIndex == -1) {
        mergedIndex=(int)result.instance(i).value(4);
      }
 else {
        assertEquals("Checking merged value for instance: " + (i + 1),mergedIndex,(int)result.instance(i).value(4));
      }
    }
  }
}

/** 
 * tests the filter in conjunction with the FilteredClassifier
 */
public void testFilteredClassifier(){
  try {
    Instances data=getFilteredClassifierData();
    for (int i=0; i < data.numAttributes(); i++) {
      if (data.classIndex() == i)       continue;
      if (data.attribute(i).isNominal()) {
        ((MergeManyValues)m_FilteredClassifier.getFilter()).setAttributeIndex("" + (i + 1));
        break;
      }
    }
  }
 catch (  Exception e) {
    fail("Problem setting up test for FilteredClassifier: " + e.toString());
  }
  super.testFilteredClassifier();
}

/** 
 * Returns a test suite.
 * @return		the suite
 */
public static Test suite(){
  return new TestSuite(MergeManyValuesTest.class);
}

/** 
 * Runs the test from commandline.
 * @param args	ignored
 */
public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
