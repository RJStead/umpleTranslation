namespace weka.classifiers.bayes.net.search.local;

class RepeatedHillClimber
{
  isA HillClimber;
 depend java.util.Collections;
 depend java.util.Enumeration;
 depend java.util.Random;
 depend java.util.Vector;
 depend weka.classifiers.bayes.BayesNet;
 depend weka.classifiers.bayes.net.ParentSet;
 depend weka.core.Instances;
 depend weka.core.Option;
 depend weka.core.RevisionUtils;
 depend weka.core.Utils;
/** 
 * for serialization 
 */
static final long serialVersionUID=-6574084564213041174L;

/** 
 * number of runs 
 */
int m_nRuns=10;

/** 
 * random number seed 
 */
int m_nSeed=1;

/** 
 * random number generator 
 */
Random m_random;

/** 
 * search determines the network structure/graph of the network with the repeated hill climbing.
 * @param bayesNet the network
 * @param instances the data to use
 * @throws Exception if something goes wrong
 */
@Override protected void search(BayesNet bayesNet,Instances instances) throws Exception {
  m_random=new Random(getSeed());
  double fBestScore;
  double fCurrentScore=0.0;
  for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {
    fCurrentScore+=calcNodeScore(iAttribute);
  }
  BayesNet bestBayesNet;
  fBestScore=fCurrentScore;
  bestBayesNet=new BayesNet();
  bestBayesNet.m_Instances=instances;
  bestBayesNet.initStructure();
  copyParentSets(bestBayesNet,bayesNet);
  for (int iRun=0; iRun < m_nRuns; iRun++) {
    generateRandomNet(bayesNet,instances);
    super.search(bayesNet,instances);
    fCurrentScore=0.0;
    for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {
      fCurrentScore+=calcNodeScore(iAttribute);
    }
    if (fCurrentScore > fBestScore) {
      fBestScore=fCurrentScore;
      copyParentSets(bestBayesNet,bayesNet);
    }
  }
  copyParentSets(bayesNet,bestBayesNet);
  bestBayesNet=null;
  m_Cache=null;
}

void generateRandomNet(BayesNet bayesNet,Instances instances){
  int nNodes=instances.numAttributes();
  for (int iNode=0; iNode < nNodes; iNode++) {
    ParentSet parentSet=bayesNet.getParentSet(iNode);
    while (parentSet.getNrOfParents() > 0) {
      parentSet.deleteLastParent(instances);
    }
  }
  if (getInitAsNaiveBayes()) {
    int iClass=instances.classIndex();
    for (int iNode=0; iNode < nNodes; iNode++) {
      if (iNode != iClass) {
        bayesNet.getParentSet(iNode).addParent(iClass,instances);
      }
    }
  }
  int nNrOfAttempts=m_random.nextInt(nNodes * nNodes);
  for (int iAttempt=0; iAttempt < nNrOfAttempts; iAttempt++) {
    int iTail=m_random.nextInt(nNodes);
    int iHead=m_random.nextInt(nNodes);
    if (bayesNet.getParentSet(iHead).getNrOfParents() < getMaxNrOfParents() && addArcMakesSense(bayesNet,instances,iHead,iTail)) {
      bayesNet.getParentSet(iHead).addParent(iTail,instances);
    }
  }
}

/** 
 * copyParentSets copies parent sets of source to dest BayesNet
 * @param dest destination network
 * @param source source network
 */
void copyParentSets(BayesNet dest,BayesNet source){
  int nNodes=source.getNrOfNodes();
  for (int iNode=0; iNode < nNodes; iNode++) {
    dest.getParentSet(iNode).copy(source.getParentSet(iNode));
  }
}

/** 
 * @return number of runs
 */
public int getRuns(){
  return m_nRuns;
}

/** 
 * Sets the number of runs
 * @param nRuns The number of runs to set
 */
public void setRuns(int nRuns){
  m_nRuns=nRuns;
}

/** 
 * @return random number seed
 */
public int getSeed(){
  return m_nSeed;
}

/** 
 * Sets the random number seed
 * @param nSeed The number of the seed to set
 */
public void setSeed(int nSeed){
  m_nSeed=nSeed;
}

/** 
 * Returns an enumeration describing the available options.
 * @return an enumeration of all the available options.
 */
@Override public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(2);
  newVector.addElement(new Option("\tNumber of runs","U",1,"-U <integer>"));
  newVector.addElement(new Option("\tRandom number seed","A",1,"-A <seed>"));
  newVector.addAll(Collections.list(super.listOptions()));
  return newVector.elements();
}

/** 
 * Parses a given list of options. <p/> <!-- options-start --> Valid options are: <p/> <pre> -U &lt;integer&gt; Number of runs </pre> <pre> -A &lt;seed&gt; Random number seed </pre> <pre> -P &lt;nr of parents&gt; Maximum number of parents </pre> <pre> -R Use arc reversal operation. (default false) </pre> <pre> -N Initial structure is empty (instead of Naive Bayes) </pre> <pre> -mbc Applies a Markov Blanket correction to the network structure,  after a network structure is learned. This ensures that all  nodes in the network are part of the Markov blanket of the  classifier node. </pre> <pre> -S [BAYES|MDL|ENTROPY|AIC|CROSS_CLASSIC|CROSS_BAYES] Score type (BAYES, BDeu, MDL, ENTROPY and AIC) </pre> <!-- options-end -->
 * @param options the list of options as an array of strings
 * @throws Exception if an option is not supported
 */
@Override public void setOptions(String[] options) throws Exception {
  String sRuns=Utils.getOption('U',options);
  if (sRuns.length() != 0) {
    setRuns(Integer.parseInt(sRuns));
  }
  String sSeed=Utils.getOption('A',options);
  if (sSeed.length() != 0) {
    setSeed(Integer.parseInt(sSeed));
  }
  super.setOptions(options);
}

/** 
 * Gets the current settings of the search algorithm.
 * @return an array of strings suitable for passing to setOptions
 */
@Override public String[] getOptions(){
  Vector<String> options=new Vector<String>();
  options.add("-U");
  options.add("" + getRuns());
  options.add("-A");
  options.add("" + getSeed());
  Collections.addAll(options,super.getOptions());
  return options.toArray(new String[0]);
}

/** 
 * This will return a string describing the classifier.
 * @return The string.
 */
@Override public String globalInfo(){
  return "This Bayes Network learning algorithm repeatedly uses hill climbing starting " + "with a randomly generated network structure and return the best structure of the " + "various runs.";
}

/** 
 * @return a string to describe the Runs option.
 */
public String runsTipText(){
  return "Sets the number of times hill climbing is performed.";
}

/** 
 * @return a string to describe the Seed option.
 */
public String seedTipText(){
  return "Initialization value for random number generator." + " Setting the seed allows replicability of experiments.";
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10154 $");
}
}
