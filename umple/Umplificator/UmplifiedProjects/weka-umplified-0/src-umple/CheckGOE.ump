namespace weka.core;

class CheckGOE
{
  isA Check;
 depend java.beans.BeanInfo;
 depend java.beans.Introspector;
 depend java.beans.PropertyDescriptor;
 depend java.util.Collections;
 depend java.util.Enumeration;
 depend java.util.HashSet;
 depend java.util.Vector;
/** 
 * the object to test 
 */
protected Object m_Object=new weka.classifiers.rules.ZeroR();

/** 
 * whether the tests were successful 
 */
protected boolean m_Success;

/** 
 * properties that are skipped in the checkToolTips method
 * @see #checkToolTips()
 */
protected HashSet<String> m_IgnoredProperties=new HashSet<String>();

/** 
 * default constructor
 */
public CheckGOE(){
  super();
  try {
    setOptions(new String[0]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}

/** 
 * Returns an enumeration describing the available options.
 * @return an enumeration of all the available options.
 */
@Override public Enumeration<Option> listOptions(){
  Vector<Option> result=new Vector<Option>();
  result.addAll(Collections.list(super.listOptions()));
  result.addElement(new Option("\tSkipped properties.\n" + "\t(default: capabilities,options)","ignored",1,"-ignored <comma-separated list of properties>"));
  result.addElement(new Option("\tFull name of the class analysed.\n" + "\teg: weka.classifiers.rules.ZeroR\n" + "\t(default weka.classifiers.rules.ZeroR)","W",1,"-W"));
  return result.elements();
}

/** 
 * Parses a given list of options. <p/> <!-- options-start --> Valid options are: <p/> <pre> -D Turn on debugging output. </pre> <pre> -S Silent mode - prints nothing to stdout. </pre> <pre> -ignored &lt;comma-separated list of properties&gt; Skipped properties. (default: capabilities,options) </pre> <pre> -W Full name of the class analysed. eg: weka.classifiers.rules.ZeroR (default weka.classifiers.rules.ZeroR) </pre> <!-- options-end -->
 * @param options the list of options as an array of strings
 * @throws Exception if an option is not supported
 */
@Override public void setOptions(String[] options) throws Exception {
  String tmpStr;
  super.setOptions(options);
  tmpStr=Utils.getOption('W',options);
  if (tmpStr.length() == 0) {
    tmpStr=weka.classifiers.rules.ZeroR.class.getName();
  }
  setObject(Utils.forName(Object.class,tmpStr,null));
  tmpStr=Utils.getOption("ignored",options);
  if (tmpStr.length() == 0) {
    tmpStr="capabilities,options";
  }
  setIgnoredProperties(tmpStr);
}

/** 
 * Gets the current settings of the object.
 * @return an array of strings suitable for passing to setOptions
 */
@Override public String[] getOptions(){
  Vector<String> result=new Vector<String>();
  Collections.addAll(result,super.getOptions());
  result.add("-ignored");
  result.add(getIgnoredProperties());
  if (getObject() != null) {
    result.add("-W");
    result.add(getObject().getClass().getName());
  }
  return result.toArray(new String[result.size()]);
}

/** 
 * Set the object to work on..
 * @param value the object to use.
 */
public void setObject(Object value){
  m_Object=value;
}

/** 
 * Get the object used in the tests.
 * @return the object used in the tests.
 */
public Object getObject(){
  return m_Object;
}

/** 
 * Sets the properties to ignore in checkToolTips(). Comma-separated list.
 * @param value the list of properties
 * @see #checkToolTips()
 */
public void setIgnoredProperties(String value){
  String[] props;
  int i;
  m_IgnoredProperties.clear();
  props=value.split(",");
  for (i=0; i < props.length; i++) {
    m_IgnoredProperties.add(props[i]);
  }
}

/** 
 * Get the ignored properties used in checkToolTips() as comma-separated list (sorted).
 * @return the ignored properties
 * @see #checkToolTips()
 */
public String getIgnoredProperties(){
  String result;
  Vector<String> list;
  int i;
  list=new Vector<String>();
  list.addAll(m_IgnoredProperties);
  if (list.size() > 1) {
    Collections.sort(list);
  }
  result="";
  for (i=0; i < list.size(); i++) {
    if (i > 0) {
      result+=",";
    }
    result+=list.get(i);
  }
  return result;
}

/** 
 * returns the success of the tests
 * @return true if the tests were successful
 */
public boolean getSuccess(){
  return m_Success;
}

/** 
 * checks whether the object declares a globalInfo method.
 * @return true if the test was passed
 */
public boolean checkGlobalInfo(){
  boolean result;
  Class<?> cls;
  print("Global info...");
  result=true;
  cls=getObject().getClass();
  try {
    cls.getMethod("globalInfo",(Class[])null);
  }
 catch (  Exception e) {
    result=false;
  }
  if (result) {
    println("yes");
  }
 else {
    println("no");
  }
  return result;
}

/** 
 * checks whether the object declares tip text method for all its properties.
 * @return true if the test was passed
 */
public boolean checkToolTips(){
  boolean result;
  Class<?> cls;
  BeanInfo info;
  PropertyDescriptor[] desc;
  int i;
  Vector<String> missing;
  String suffix;
  print("Tool tips...");
  result=true;
  suffix="TipText";
  cls=getObject().getClass();
  try {
    info=Introspector.getBeanInfo(cls,Object.class);
    desc=info.getPropertyDescriptors();
  }
 catch (  Exception e) {
    e.printStackTrace();
    desc=null;
  }
  if (desc != null) {
    missing=new Vector<String>();
    for (i=0; i < desc.length; i++) {
      if (m_IgnoredProperties.contains(desc[i].getName())) {
        continue;
      }
      if ((desc[i].getReadMethod() == null) || (desc[i].getWriteMethod() == null)) {
        continue;
      }
      try {
        cls.getMethod(desc[i].getName() + suffix,(Class[])null);
      }
 catch (      Exception e) {
        result=false;
        missing.add(desc[i].getName() + suffix);
      }
    }
    if (result) {
      println("yes");
    }
 else {
      println("no (missing: " + missing + ")");
    }
  }
 else {
    println("maybe");
  }
  return result;
}

/** 
 * Runs some diagnostic tests on the object. Output is printed to System.out (if not silent).
 */
@Override public void doTests(){
  println("Object: " + m_Object.getClass().getName() + "\n");
  println("--> Tests");
  m_Success=checkGlobalInfo();
  if (m_Success) {
    m_Success=checkToolTips();
  }
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10203 $");
}

/** 
 * Main method for using the CheckGOE.
 * @param args the options to the CheckGOE
 */
public static void main(String[] args){
  CheckGOE check=new CheckGOE();
  runCheck(check,args);
  if (check.getSuccess()) {
    System.exit(0);
  }
 else {
    System.exit(1);
  }
}
}
