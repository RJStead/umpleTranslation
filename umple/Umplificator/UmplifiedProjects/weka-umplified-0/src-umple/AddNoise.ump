namespace weka.filters.unsupervised.attribute;

class AddNoise
{
  isA UnsupervisedFilter,OptionHandler;
  isA Filter;
 depend java.util.Enumeration;
 depend java.util.Random;
 depend java.util.Vector;
 depend weka.core.Capabilities;
 depend weka.core.Capabilities.Capability;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.Option;
 depend weka.core.OptionHandler;
 depend weka.core.RevisionUtils;
 depend weka.core.SingleIndex;
 depend weka.core.Utils;
 depend weka.filters.Filter;
 depend weka.filters.UnsupervisedFilter;
/** 
 * for serialization 
 */
static final long serialVersionUID=-8499673222857299082L;

/** 
 * The attribute's index setting. 
 */
private final SingleIndex m_AttIndex=new SingleIndex("last");

/** 
 * Flag if missing values are taken as value. 
 */
private boolean m_UseMissing=false;

/** 
 * The subsample size, percent of original set, default 10% 
 */
private int m_Percent=10;

/** 
 * The random number generator seed 
 */
private int m_RandomSeed=1;

/** 
 * Returns a string describing this filter
 * @return a description of the filter suitable for displaying in theexplorer/experimenter gui
 */
public String globalInfo(){
  return "An instance filter that changes a percentage of a given" + " attributes values. The attribute must be nominal." + " Missing value can be treated as value itself.";
}

/** 
 * Returns an enumeration describing the available options
 * @return an enumeration of all the available options
 */
@Override public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(4);
  newVector.addElement(new Option("\tIndex of the attribute to be changed \n" + "\t(default last attribute)","C",1,"-C <col>"));
  newVector.addElement(new Option("\tTreat missing values as an extra value \n","M",1,"-M"));
  newVector.addElement(new Option("\tSpecify the percentage of noise introduced \n" + "\tto the data (default 10)","P",1,"-P <num>"));
  newVector.addElement(new Option("\tSpecify the random number seed (default 1)","S",1,"-S <num>"));
  return newVector.elements();
}

/** 
 * Parses a given list of options. <p/> <!-- options-start --> Valid options are: <p/> <pre> -C &lt;col&gt; Index of the attribute to be changed  (default last attribute) </pre> <pre> -M Treat missing values as an extra value </pre> <pre> -P &lt;num&gt; Specify the percentage of noise introduced  to the data (default 10) </pre> <pre> -S &lt;num&gt; Specify the random number seed (default 1) </pre> <!-- options-end -->
 * @param options the list of options as an array of strings
 * @throws Exception if an option is not supported
 */
@Override public void setOptions(String[] options) throws Exception {
  String indexString=Utils.getOption('C',options);
  if (indexString.length() != 0) {
    setAttributeIndex(indexString);
  }
 else {
    setAttributeIndex("last");
  }
  if (Utils.getFlag('M',options)) {
    setUseMissing(true);
  }
  String percentString=Utils.getOption('P',options);
  if (percentString.length() != 0) {
    setPercent((int)Double.valueOf(percentString).doubleValue());
  }
 else {
    setPercent(10);
  }
  String seedString=Utils.getOption('S',options);
  if (seedString.length() != 0) {
    setRandomSeed(Integer.parseInt(seedString));
  }
 else {
    setRandomSeed(1);
  }
  Utils.checkForRemainingOptions(options);
}

/** 
 * Gets the current settings of the filter.
 * @return an array of strings suitable for passing to setOptions
 */
@Override public String[] getOptions(){
  Vector<String> options=new Vector<String>();
  options.add("-C");
  options.add("" + getAttributeIndex());
  if (getUseMissing()) {
    options.add("-M");
  }
  options.add("-P");
  options.add("" + getPercent());
  options.add("-S");
  options.add("" + getRandomSeed());
  return options.toArray(new String[0]);
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String useMissingTipText(){
  return "Flag to set if missing values are used.";
}

/** 
 * Gets the flag if missing values are treated as extra values.
 * @return the flag missing values.
 */
public boolean getUseMissing(){
  return m_UseMissing;
}

/** 
 * Sets the flag if missing values are treated as extra values.
 * @param newUseMissing the new flag value.
 */
public void setUseMissing(boolean newUseMissing){
  m_UseMissing=newUseMissing;
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String randomSeedTipText(){
  return "Random number seed.";
}

/** 
 * Gets the random number seed.
 * @return the random number seed.
 */
public int getRandomSeed(){
  return m_RandomSeed;
}

/** 
 * Sets the random number seed.
 * @param newSeed the new random number seed.
 */
public void setRandomSeed(int newSeed){
  m_RandomSeed=newSeed;
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String percentTipText(){
  return "Percentage of introduced noise to data.";
}

/** 
 * Gets the size of noise data as a percentage of the original set.
 * @return the noise data size
 */
public int getPercent(){
  return m_Percent;
}

/** 
 * Sets the size of noise data, as a percentage of the original set.
 * @param newPercent the subsample set size, between 0 and 100.
 */
public void setPercent(int newPercent){
  m_Percent=newPercent;
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String attributeIndexTipText(){
  return "Index of the attribute that is to changed.";
}

/** 
 * Get the index of the attribute used.
 * @return the index of the attribute
 */
public String getAttributeIndex(){
  return m_AttIndex.getSingleIndex();
}

/** 
 * Sets index of the attribute used.
 * @param attIndex the index of the attribute
 */
public void setAttributeIndex(String attIndex){
  m_AttIndex.setSingleIndex(attIndex);
}

/** 
 * Returns the Capabilities of this filter.
 * @return the capabilities of this object
 * @see Capabilities
 */
@Override public Capabilities getCapabilities(){
  Capabilities result=super.getCapabilities();
  result.disableAll();
  result.enableAllAttributes();
  result.enable(Capability.MISSING_VALUES);
  result.enableAllClasses();
  result.enable(Capability.MISSING_CLASS_VALUES);
  result.enable(Capability.NO_CLASS);
  return result;
}

/** 
 * Sets the format of the input instances.
 * @param instanceInfo an Instances object containing the input instancestructure (any instances contained in the object are ignored - only the structure is required).
 * @return true if the outputFormat may be collected immediately
 * @throws Exception if the input format can't be set successfully
 */
@Override public boolean setInputFormat(Instances instanceInfo) throws Exception {
  super.setInputFormat(instanceInfo);
  m_AttIndex.setUpper(getInputFormat().numAttributes() - 1);
  if (!getInputFormat().attribute(m_AttIndex.getIndex()).isNominal()) {
    throw new Exception("Adding noise is not possible:" + "Chosen attribute is numeric.");
  }
  if ((getInputFormat().attribute(m_AttIndex.getIndex()).numValues() < 2) && (!m_UseMissing)) {
    throw new Exception("Adding noise is not possible:" + "Chosen attribute has less than two values.");
  }
  setOutputFormat(getInputFormat());
  m_NewBatch=true;
  return false;
}

/** 
 * Input an instance for filtering.
 * @param instance the input instance
 * @return true if the filtered instance may now be collected with output().
 * @throws Exception if the input format was not set
 */
@Override public boolean input(Instance instance) throws Exception {
  if (getInputFormat() == null) {
    throw new Exception("No input instance format defined");
  }
  if (m_NewBatch) {
    resetQueue();
    m_NewBatch=false;
  }
  if (isFirstBatchDone()) {
    push(instance);
    return true;
  }
 else {
    bufferInput(instance);
    return false;
  }
}

/** 
 * Signify that this batch of input to the filter is finished. If the filter requires all instances prior to filtering, output() may now be called to retrieve the filtered instances.
 * @return true if there are instances pending output
 * @throws Exception if no input structure has been defined
 */
@Override public boolean batchFinished() throws Exception {
  if (getInputFormat() == null) {
    throw new Exception("No input instance format defined");
  }
  addNoise(getInputFormat(),m_RandomSeed,m_Percent,m_AttIndex.getIndex(),m_UseMissing);
  for (int i=0; i < getInputFormat().numInstances(); i++) {
    push((Instance)getInputFormat().instance(i).copy());
  }
  flushInput();
  m_NewBatch=true;
  m_FirstBatchDone=true;
  return (numPendingOutput() != 0);
}

/** 
 * add noise to the dataset a given percentage of the instances are changed in the way, that a set of instances are randomly selected using seed. The attribute given by its index is changed from its current value to one of the other possibly ones, also randomly. This is done with leaving the apportion the same. if m_UseMissing is true, missing value is used as a value of its own
 * @param instances is the dataset
 * @param seed used for random function
 * @param percent percentage of instances that are changed
 * @param attIndex index of the attribute changed
 * @param useMissing if true missing values are treated as extra value
 */
public void addNoise(Instances instances,int seed,int percent,int attIndex,boolean useMissing){
  int indexList[];
  int partition_count[];
  int partition_max[];
  double splitPercent=percent;
  indexList=new int[instances.numInstances()];
  for (int i=0; i < instances.numInstances(); i++) {
    indexList[i]=i;
  }
  Random random=new Random(seed);
  for (int i=instances.numInstances() - 1; i >= 0; i--) {
    int hValue=indexList[i];
    int hIndex=(int)(random.nextDouble() * i);
    indexList[i]=indexList[hIndex];
    indexList[hIndex]=hValue;
  }
  int numValues=instances.attribute(attIndex).numValues();
  partition_count=new int[numValues];
  partition_max=new int[numValues];
  int missing_count=0;
  ;
  int missing_max=0;
  ;
  for (int i=0; i < numValues; i++) {
    partition_count[i]=0;
    partition_max[i]=0;
  }
  for (  Object element : instances) {
    Instance instance=(Instance)element;
    if (instance.isMissing(attIndex)) {
      missing_max++;
    }
 else {
      instance.value(attIndex);
      partition_max[(int)instance.value(attIndex)]++;
    }
  }
  if (!useMissing) {
    missing_max=missing_count;
  }
 else {
    missing_max=(int)(((double)missing_max / 100) * splitPercent + 0.5);
  }
  int sum_max=missing_max;
  for (int i=0; i < numValues; i++) {
    partition_max[i]=(int)(((double)partition_max[i] / 100) * splitPercent + 0.5);
    sum_max=sum_max + partition_max[i];
  }
  int sum_count=0;
  Random randomValue=new Random(seed);
  int numOfValues=instances.attribute(attIndex).numValues();
  for (int i=0; i < instances.numInstances(); i++) {
    if (sum_count >= sum_max) {
      break;
    }
    Instance currInstance=instances.instance(indexList[i]);
    if (currInstance.isMissing(attIndex)) {
      if (missing_count < missing_max) {
        changeValueRandomly(randomValue,numOfValues,attIndex,currInstance,useMissing);
        missing_count++;
        sum_count++;
      }
    }
 else {
      int vIndex=(int)currInstance.value(attIndex);
      if (partition_count[vIndex] < partition_max[vIndex]) {
        changeValueRandomly(randomValue,numOfValues,attIndex,currInstance,useMissing);
        partition_count[vIndex]++;
        sum_count++;
      }
    }
  }
}

/** 
 * method to set a new value
 * @param r random function
 * @param numOfValues
 * @param instance
 * @param useMissing
 */
private void changeValueRandomly(Random r,int numOfValues,int indexOfAtt,Instance instance,boolean useMissing){
  int currValue;
  if (instance.isMissing(indexOfAtt)) {
    currValue=numOfValues;
  }
 else {
    currValue=(int)instance.value(indexOfAtt);
  }
  if ((numOfValues == 2) && (!instance.isMissing(indexOfAtt))) {
    instance.setValue(indexOfAtt,(currValue + 1) % 2);
  }
 else {
    while (true) {
      int newValue;
      if (useMissing) {
        newValue=(int)(r.nextDouble() * (numOfValues + 1));
      }
 else {
        newValue=(int)(r.nextDouble() * numOfValues);
      }
      if (newValue != currValue) {
        if (newValue == numOfValues) {
          instance.setMissing(indexOfAtt);
        }
 else {
          instance.setValue(indexOfAtt,newValue);
        }
        break;
      }
    }
  }
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10215 $");
}

/** 
 * Main method for testing this class.
 * @param argv should contain arguments to the filter: use -h for help
 */
public static void main(String[] argv){
  runFilter(new AddNoise(),argv);
}
}
