namespace weka.classifiers.misc;

class InputMappedClassifierTest
{
  isA AbstractClassifierTest;
 depend weka.classifiers.AbstractClassifierTest;
 depend weka.classifiers.Classifier;
 depend weka.classifiers.misc.InputMappedClassifier;
 depend weka.core.Attribute;
 depend weka.core.Instances;
 depend weka.core.TestInstances;
 depend weka.filters.Filter;
 depend weka.filters.unsupervised.attribute.Reorder;
 depend weka.filters.unsupervised.attribute.SwapValues;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
public InputMappedClassifierTest(String name){
  super(name);
}

/** 
 * Creates a default InputMappedClassifier 
 */
public Classifier getClassifier(){
  InputMappedClassifier toUse=new InputMappedClassifier();
  toUse.setClassifier(new weka.classifiers.trees.J48());
  toUse.setSuppressMappingReport(true);
  return toUse;
}

protected Instances reorderAtts(Instances data) throws Exception {
  Reorder r=new Reorder();
  String range="last";
  for (int i=data.numAttributes() - 1; i > 0; i--) {
    range+="," + i;
  }
  r.setAttributeIndices(range);
  r.setInputFormat(data);
  data=Filter.useFilter(data,r);
  return data;
}

protected Instances swapValues(int attIndex,Instances data) throws Exception {
  SwapValues s=new SwapValues();
  s.setAttributeIndex("" + attIndex);
  s.setFirstValueIndex("first");
  s.setSecondValueIndex("last");
  s.setInputFormat(data);
  data=Filter.useFilter(data,s);
  return data;
}

protected Instances generateData(boolean nomClass,int numClasses,int numNominal,int numNumeric) throws Exception {
  TestInstances generator=new TestInstances();
  if (nomClass) {
    generator.setClassType(Attribute.NOMINAL);
    generator.setNumClasses(numClasses);
  }
 else {
    generator.setClassType(Attribute.NUMERIC);
  }
  generator.setNumNominal(numNominal);
  generator.setNumNumeric(numNumeric);
  generator.setNumDate(0);
  generator.setNumString(0);
  generator.setNumRelational(0);
  generator.setNumInstances(100);
  generator.setClassIndex(TestInstances.CLASS_IS_LAST);
  Instances data=generator.generate();
  return data;
}

protected void performTest(boolean nomClass,int numClassesTrain,int numTrainAtts,boolean reorderAtts,boolean reorderNomLabels,boolean reorderClassLabels){
  Instances train=null;
  Instances test=null;
  try {
    train=generateData(nomClass,numClassesTrain,numTrainAtts,3);
  }
 catch (  Exception ex) {
    fail("Generating training data failed: " + ex);
  }
  test=new Instances(train);
  if (reorderNomLabels) {
    try {
      test=swapValues(1,test);
    }
 catch (    Exception ex) {
      fail("Reordering nominal labels failed: " + ex);
    }
  }
  if (reorderClassLabels && nomClass) {
    try {
      test=swapValues(7,test);
    }
 catch (    Exception ex) {
      fail("Reordering class labels failed: " + ex);
    }
  }
  if (reorderAtts) {
    try {
      test=reorderAtts(test);
    }
 catch (    Exception ex) {
      fail("Reordering test data failed: " + ex);
    }
  }
  InputMappedClassifier toUse=null;
  try {
    toUse=trainClassifier(train,nomClass);
  }
 catch (  Exception ex) {
    fail("Training classifier failed: " + ex);
  }
  double[] resultsOnTrainingStructure=null;
  try {
    resultsOnTrainingStructure=testClassifier(train,toUse);
  }
 catch (  Exception ex) {
    fail("Testing classifier on training data failed: " + ex);
  }
  double[] resultsOnTestStructure=null;
  try {
    resultsOnTestStructure=testClassifier(test,toUse);
  }
 catch (  Exception ex) {
    fail("Testing classifier on test data failed: " + ex);
  }
  try {
    for (int i=0; i < resultsOnTrainingStructure.length; i++) {
      if (resultsOnTrainingStructure[i] != resultsOnTestStructure[i]) {
        throw new Exception("Result #" + (i + 1) + " differs!");
      }
    }
  }
 catch (  Exception ex) {
    fail("Comparing results failed " + ex);
  }
}

public void testNominaClass(){
  performTest(true,4,3,false,false,false);
}

public void testNominaClassReorderedAtts(){
  performTest(true,4,3,true,false,false);
}

public void testNominalClassSwapNominalValues(){
  performTest(true,4,3,false,true,false);
}

public void testNominalClassSwapNominalValuesReorderAtts(){
  performTest(true,4,3,true,true,false);
}

public void testNominalClassSwapClassValues(){
  performTest(true,4,3,false,false,true);
}

public void testNominalClassSwapNominalValuesSwapClassValues(){
  performTest(true,4,3,false,true,true);
}

public void testNominalClassSwapNominalValuesSwapClassValuesReorderAtts(){
  performTest(true,4,3,true,true,true);
}

public void testNumericClass(){
  performTest(false,4,3,false,false,false);
}

public void testNumericClassReorderedAtts(){
  performTest(false,4,3,true,false,false);
}

public void testNumericClassSwapNominalValues(){
  performTest(false,4,3,false,true,false);
}

public void testNumericClassSwapNominalValuesReorderAtts(){
  performTest(false,4,3,true,true,false);
}

protected InputMappedClassifier trainClassifier(Instances data,boolean nominalClass){
  InputMappedClassifier toUse=new InputMappedClassifier();
  if (nominalClass) {
    toUse.setClassifier(new weka.classifiers.trees.J48());
  }
 else {
    toUse.setClassifier(new weka.classifiers.functions.LinearRegression());
  }
  toUse.setSuppressMappingReport(true);
  try {
    toUse.buildClassifier(data);
  }
 catch (  Exception ex) {
    fail("Training InputMappedClassifier failed: " + ex);
    return null;
  }
  return toUse;
}

protected double[] testClassifier(Instances test,InputMappedClassifier classifier){
  double[] result=new double[test.numInstances()];
  try {
    for (int i=0; i < test.numInstances(); i++) {
      result[i]=classifier.classifyInstance(test.instance(i));
    }
  }
 catch (  Exception ex) {
    fail("Testing InputMappedClassifier failed: " + ex);
    return null;
  }
  return result;
}

public static Test suite(){
  return new TestSuite(InputMappedClassifierTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
