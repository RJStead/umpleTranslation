namespace weka.core.logging;

class FileLogger
{
  isA ConsoleLogger;
 depend java.io.BufferedWriter;
 depend java.io.File;
 depend java.io.FileWriter;
 depend java.util.Date;
 depend java.util.regex.Matcher;
 depend weka.core.RevisionUtils;
 depend weka.core.WekaPackageManager;
/** 
 * the log file. 
 */
protected File m_LogFile;

/** 
 * the line feed. 
 */
protected String m_LineFeed;

/** 
 * Initializes the logger.
 */
protected void initialize(){
  super.initialize();
  m_LogFile=getLogFile();
  try {
    if ((m_LogFile != null) && m_LogFile.exists())     m_LogFile.delete();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  m_LineFeed=System.getProperty("line.separator");
}

/** 
 * Returns the log file to use.
 * @return		the log file
 */
protected File getLogFile(){
  String filename;
  File result;
  filename=m_Properties.getProperty("LogFile","%w" + File.separator + "weka.log");
  filename=filename.replaceAll("%t",Matcher.quoteReplacement(System.getProperty("java.io.tmpdir")));
  filename=filename.replaceAll("%h",Matcher.quoteReplacement(System.getProperty("user.home")));
  filename=filename.replaceAll("%c",Matcher.quoteReplacement(System.getProperty("user.dir")));
  filename=filename.replaceAll("%w",Matcher.quoteReplacement(WekaPackageManager.WEKA_HOME.toString()));
  if (System.getProperty("%") != null && System.getProperty("%").length() > 0) {
    filename=filename.replaceAll("%%",Matcher.quoteReplacement(System.getProperty("%")));
  }
  result=new File(filename);
  return result;
}

/** 
 * Appends the given string to the log file (without new line!).
 * @param s		the string to append
 */
protected void append(String s){
  BufferedWriter writer;
  if (m_LogFile == null)   return;
  try {
    writer=new BufferedWriter(new FileWriter(m_LogFile,true));
    writer.write(s);
    writer.flush();
    writer.close();
  }
 catch (  Exception e) {
  }
}

/** 
 * Performs the actual logging. 
 * @param level	the level of the message
 * @param msg		the message to log
 * @param cls		the classname originating the log event
 * @param method	the method originating the log event
 * @param lineno	the line number originating the log event
 */
protected void doLog(Level level,String msg,String cls,String method,int lineno){
  super.doLog(level,msg,cls,method,lineno);
  append(m_DateFormat.format(new Date()) + " " + cls+ " "+ method+ m_LineFeed+ level+ ": "+ msg+ m_LineFeed);
}

/** 
 * Returns the revision string.
 * @return		the revision
 */
public String getRevision(){
  return RevisionUtils.extract("$Revision: 8034 $");
}
}
