namespace weka.gui.beans;

class ClassifierPerformanceEvaluatorBeanInfo
{
  isA SimpleBeanInfo;
 depend java.beans.BeanDescriptor;
 depend java.beans.EventSetDescriptor;
 depend java.beans.PropertyDescriptor;
 depend java.beans.SimpleBeanInfo;
@Override public EventSetDescriptor[] getEventSetDescriptors(){
  try {
    EventSetDescriptor[] esds={new EventSetDescriptor(ClassifierPerformanceEvaluator.class,"text",TextListener.class,"acceptText"),new EventSetDescriptor(ClassifierPerformanceEvaluator.class,"thresholdData",ThresholdDataListener.class,"acceptDataSet"),new EventSetDescriptor(ClassifierPerformanceEvaluator.class,"visualizableError",VisualizableErrorListener.class,"acceptDataSet")};
    return esds;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return null;
}

/** 
 * Get the property descriptors for this bean
 * @return a <code>PropertyDescriptor[]</code> value
 */
@Override public PropertyDescriptor[] getPropertyDescriptors(){
  try {
    PropertyDescriptor p1;
    PropertyDescriptor p2;
    p1=new PropertyDescriptor("executionSlots",ClassifierPerformanceEvaluator.class);
    p2=new PropertyDescriptor("errorPlotPointSizeProportionalToMargin",ClassifierPerformanceEvaluator.class);
    PropertyDescriptor[] pds={p1,p2};
    return pds;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return null;
}

/** 
 * Get the bean descriptor for this bean
 * @return a <code>BeanDescriptor</code> value
 */
@Override public BeanDescriptor getBeanDescriptor(){
  return new BeanDescriptor(weka.gui.beans.ClassifierPerformanceEvaluator.class,ClassifierPerformanceEvaluatorCustomizer.class);
}
}
