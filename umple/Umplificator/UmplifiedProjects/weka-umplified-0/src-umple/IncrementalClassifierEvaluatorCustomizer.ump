namespace weka.gui.beans;

class IncrementalClassifierEvaluatorCustomizer
{
  isA BeanCustomizer,CustomizerCloseRequester,CustomizerClosingListener;
  isA JPanel;
 depend java.awt.BorderLayout;
 depend java.awt.GridLayout;
 depend java.awt.Window;
 depend java.awt.event.ActionEvent;
 depend java.awt.event.ActionListener;
 depend java.beans.PropertyChangeListener;
 depend java.beans.PropertyChangeSupport;
 depend javax.swing.JButton;
 depend javax.swing.JPanel;
 depend weka.gui.PropertySheetPanel;
/** 
 * Added ID to avoid warning 
 */
private static final long serialVersionUID=443506897387629418L;

/** 
 * for serialization 
 */
private final PropertyChangeSupport m_pcSupport=new PropertyChangeSupport(this);

private final PropertySheetPanel m_ieEditor=new PropertySheetPanel();

private IncrementalClassifierEvaluator m_evaluator;

private ModifyListener m_modifyListener;

private Window m_parent;

private int m_freqBackup;

private boolean m_perClassBackup;

public IncrementalClassifierEvaluatorCustomizer(){
  setBorder(javax.swing.BorderFactory.createEmptyBorder(0,5,5,5));
  setLayout(new BorderLayout());
  add(m_ieEditor,BorderLayout.CENTER);
  add(new javax.swing.JLabel("IncrementalClassifierEvaluatorCustomizer"),BorderLayout.NORTH);
  addButtons();
}

private void addButtons(){
  JButton okBut=new JButton("OK");
  JButton cancelBut=new JButton("Cancel");
  JPanel butHolder=new JPanel();
  butHolder.setLayout(new GridLayout(1,2));
  butHolder.add(okBut);
  butHolder.add(cancelBut);
  add(butHolder,BorderLayout.SOUTH);
  okBut.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      m_modifyListener.setModifiedStatus(IncrementalClassifierEvaluatorCustomizer.this,true);
      if (m_parent != null) {
        m_parent.dispose();
      }
    }
  }
);
  cancelBut.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      customizerClosing();
      if (m_parent != null) {
        m_parent.dispose();
      }
    }
  }
);
}

@Override public void actionPerformed(ActionEvent e){
  m_modifyListener.setModifiedStatus(IncrementalClassifierEvaluatorCustomizer.this,true);
  if (m_parent != null) {
    m_parent.dispose();
  }
}

@Override public void actionPerformed(ActionEvent e){
  customizerClosing();
  if (m_parent != null) {
    m_parent.dispose();
  }
}

/** 
 * Set the object to be edited
 * @param object a IncrementalClassifierEvaluator object
 */
@Override public void setObject(Object object){
  m_evaluator=((IncrementalClassifierEvaluator)object);
  m_ieEditor.setTarget(m_evaluator);
  m_freqBackup=m_evaluator.getStatusFrequency();
  m_perClassBackup=m_evaluator.getOutputPerClassInfoRetrievalStats();
}

/** 
 * Add a property change listener
 * @param pcl a <code>PropertyChangeListener</code> value
 */
@Override public void addPropertyChangeListener(PropertyChangeListener pcl){
  m_pcSupport.addPropertyChangeListener(pcl);
}

/** 
 * Remove a property change listener
 * @param pcl a <code>PropertyChangeListener</code> value
 */
@Override public void removePropertyChangeListener(PropertyChangeListener pcl){
  m_pcSupport.removePropertyChangeListener(pcl);
}

@Override public void setModifiedListener(ModifyListener l){
  m_modifyListener=l;
}

@Override public void setParentWindow(Window parent){
  m_parent=parent;
}

@Override public void customizerClosing(){
  m_evaluator.setStatusFrequency(m_freqBackup);
  m_evaluator.setOutputPerClassInfoRetrievalStats(m_perClassBackup);
}
}
