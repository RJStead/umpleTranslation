namespace weka.experiment;

class PropertyNode
{
  isA Serializable,RevisionHandler;
 depend java.beans.IntrospectionException;
 depend java.beans.PropertyDescriptor;
 depend java.io.IOException;
 depend java.io.Serializable;
 depend weka.core.RevisionHandler;
 depend weka.core.RevisionUtils;
/** 
 * for serialization 
 */
private static final long serialVersionUID=-8718165742572631384L;

/** 
 * The current property value 
 */
public Object value;

/** 
 * The class of the object with this property 
 */
public Class<?> parentClass;

/** 
 * Other info about the property 
 */
public PropertyDescriptor property;

/** 
 * Creates a mostly empty property.
 * @param pValue a property value.
 */
public PropertyNode(Object pValue){
  this(pValue,null,null);
}

/** 
 * Creates a fully specified property node.
 * @param pValue the current property value.
 * @param prop the PropertyDescriptor.
 * @param pClass the Class of the object with this property.
 */
public PropertyNode(Object pValue,PropertyDescriptor prop,Class<?> pClass){
  value=pValue;
  property=prop;
  parentClass=pClass;
}

/** 
 * Returns a string description of this property.
 * @return a value of type 'String'
 */
@Override public String toString(){
  if (property == null) {
    return "Available properties";
  }
  return property.getDisplayName();
}

private void writeObject(java.io.ObjectOutputStream out) throws IOException {
  try {
    out.writeObject(value);
  }
 catch (  Exception ex) {
    throw new IOException("Can't serialize object: " + ex.getMessage());
  }
  out.writeObject(parentClass);
  out.writeObject(property.getDisplayName());
  out.writeObject(property.getReadMethod().getName());
  out.writeObject(property.getWriteMethod().getName());
}

private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
  value=in.readObject();
  parentClass=(Class<?>)in.readObject();
  String name=(String)in.readObject();
  String getter=(String)in.readObject();
  String setter=(String)in.readObject();
  try {
    property=new PropertyDescriptor(name,parentClass,getter,setter);
  }
 catch (  IntrospectionException ex) {
    throw new ClassNotFoundException("Couldn't create property descriptor: " + parentClass.getName() + "::"+ name);
  }
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10203 $");
}
}
