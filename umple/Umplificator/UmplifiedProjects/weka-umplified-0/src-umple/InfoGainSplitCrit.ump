namespace weka.classifiers.trees.j48;

class InfoGainSplitCrit
{
  isA EntropyBasedSplitCrit;
 depend weka.core.RevisionUtils;
 depend weka.core.Utils;
/** 
 * for serialization 
 */
private static final long serialVersionUID=4892105020180728499L;

/** 
 * This method is a straightforward implementation of the information gain criterion for the given distribution.
 */
@Override public final double splitCritValue(Distribution bags){
  double numerator;
  numerator=oldEnt(bags) - newEnt(bags);
  if (Utils.eq(numerator,0)) {
    return Double.MAX_VALUE;
  }
  return bags.total() / numerator;
}

/** 
 * This method computes the information gain in the same way C4.5 does.
 * @param bags the distribution
 * @param totalNoInst weight of ALL instances (including the ones with missingvalues).
 */
public final double splitCritValue(Distribution bags,double totalNoInst){
  double numerator;
  double noUnknown;
  double unknownRate;
  noUnknown=totalNoInst - bags.total();
  unknownRate=noUnknown / totalNoInst;
  numerator=(oldEnt(bags) - newEnt(bags));
  numerator=(1 - unknownRate) * numerator;
  if (Utils.eq(numerator,0)) {
    return 0;
  }
  return numerator / bags.total();
}

/** 
 * This method computes the information gain in the same way C4.5 does.
 * @param bags the distribution
 * @param totalNoInst weight of ALL instances
 * @param oldEnt entropy with respect to "no-split"-model.
 */
public final double splitCritValue(Distribution bags,double totalNoInst,double oldEnt){
  double numerator;
  double noUnknown;
  double unknownRate;
  noUnknown=totalNoInst - bags.total();
  unknownRate=noUnknown / totalNoInst;
  numerator=(oldEnt - newEnt(bags));
  numerator=(1 - unknownRate) * numerator;
  if (Utils.eq(numerator,0)) {
    return 0;
  }
  return numerator / bags.total();
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10169 $");
}
}
