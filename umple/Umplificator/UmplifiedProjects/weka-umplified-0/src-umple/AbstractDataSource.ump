namespace weka.gui.beans;

class AbstractDataSource
{
  isA DataSource,Visible,Serializable,BeanContextChild;
  isA JPanel;
 depend java.awt.BorderLayout;
 depend java.beans.PropertyChangeListener;
 depend java.beans.VetoableChangeListener;
 depend java.beans.beancontext.BeanContext;
 depend java.beans.beancontext.BeanContextChild;
 depend java.beans.beancontext.BeanContextChildSupport;
 depend java.io.Serializable;
 depend java.util.EventListener;
 depend java.util.Vector;
 depend javax.swing.JPanel;
/** 
 * for serialization 
 */
private static final long serialVersionUID=-4127257701890044793L;

/** 
 * True if this bean's appearance is the design mode appearance
 */
protected boolean m_design;

/** 
 * BeanContex that this bean might be contained within
 */
protected transient BeanContext m_beanContext=null;

/** 
 * BeanContextChild support
 */
protected BeanContextChildSupport m_bcSupport=new BeanContextChildSupport(this);

/** 
 * Default visual for data sources
 */
protected BeanVisual m_visual=new BeanVisual("AbstractDataSource",BeanVisual.ICON_PATH + "DefaultDataSource.gif",BeanVisual.ICON_PATH + "DefaultDataSource_animated.gif");

/** 
 * Objects listening for events from data sources
 */
protected Vector<EventListener> m_listeners;

/** 
 * Creates a new <code>AbstractDataSource</code> instance.
 */
public AbstractDataSource(){
  useDefaultVisual();
  setLayout(new BorderLayout());
  add(m_visual,BorderLayout.CENTER);
  m_listeners=new Vector<EventListener>();
}

/** 
 * Add a listener
 * @param dsl a <code>DataSourceListener</code> value
 */
@Override public synchronized void addDataSourceListener(DataSourceListener dsl){
  m_listeners.addElement(dsl);
}

/** 
 * Remove a listener
 * @param dsl a <code>DataSourceListener</code> value
 */
@Override public synchronized void removeDataSourceListener(DataSourceListener dsl){
  m_listeners.remove(dsl);
}

/** 
 * Add an instance listener
 * @param dsl a <code>InstanceListener</code> value
 */
@Override public synchronized void addInstanceListener(InstanceListener dsl){
  m_listeners.add(dsl);
}

/** 
 * Remove an instance listener
 * @param dsl a <code>InstanceListener</code> value
 */
@Override public synchronized void removeInstanceListener(InstanceListener dsl){
  m_listeners.remove(dsl);
}

/** 
 * Set the visual for this data source
 * @param newVisual a <code>BeanVisual</code> value
 */
@Override public void setVisual(BeanVisual newVisual){
  m_visual=newVisual;
}

/** 
 * Get the visual being used by this data source.
 */
@Override public BeanVisual getVisual(){
  return m_visual;
}

/** 
 * Use the default images for a data source
 */
@Override public void useDefaultVisual(){
  m_visual.loadIcons(BeanVisual.ICON_PATH + "DefaultDataSource.gif",BeanVisual.ICON_PATH + "DefaultDataSource_animated.gif");
}

/** 
 * Set a bean context for this bean
 * @param bc a <code>BeanContext</code> value
 */
@Override public void setBeanContext(BeanContext bc){
  m_beanContext=bc;
  m_design=m_beanContext.isDesignTime();
}

/** 
 * Return the bean context (if any) that this bean is embedded in
 * @return a <code>BeanContext</code> value
 */
@Override public BeanContext getBeanContext(){
  return m_beanContext;
}

/** 
 * Add a property change listener to this bean
 * @param name the name of the property of interest
 * @param pcl a <code>PropertyChangeListener</code> value
 */
@Override public void addPropertyChangeListener(String name,PropertyChangeListener pcl){
  m_bcSupport.addPropertyChangeListener(name,pcl);
}

/** 
 * Remove a property change listener from this bean
 * @param name the name of the property of interest
 * @param pcl a <code>PropertyChangeListener</code> value
 */
@Override public void removePropertyChangeListener(String name,PropertyChangeListener pcl){
  m_bcSupport.removePropertyChangeListener(name,pcl);
}

/** 
 * Add a vetoable change listener to this bean
 * @param name the name of the property of interest
 * @param vcl a <code>VetoableChangeListener</code> value
 */
@Override public void addVetoableChangeListener(String name,VetoableChangeListener vcl){
  m_bcSupport.addVetoableChangeListener(name,vcl);
}

/** 
 * Remove a vetoable change listener from this bean
 * @param name the name of the property of interest
 * @param vcl a <code>VetoableChangeListener</code> value
 */
@Override public void removeVetoableChangeListener(String name,VetoableChangeListener vcl){
  m_bcSupport.removeVetoableChangeListener(name,vcl);
}
}
