namespace weka.classifiers.meta;

class MultiClassClassifierUpdateable
{
  isA OptionHandler,UpdateableClassifier;
  isA MultiClassClassifier;
 depend weka.classifiers.UpdateableClassifier;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.OptionHandler;
 depend weka.core.Range;
 depend weka.core.RevisionUtils;
 depend weka.core.Utils;
 depend weka.filters.unsupervised.instance.RemoveWithValues;
/** 
 * For serialization 
 */
private static final long serialVersionUID=-1619685269774366430L;

/** 
 * Constructor
 */
public MultiClassClassifierUpdateable(){
  m_Classifier=new weka.classifiers.functions.SGD();
}

/** 
 * @return a description of the classifier suitable for displaying in theexplorer/experimenter gui
 */
@Override public String globalInfo(){
  return "A metaclassifier for handling multi-class datasets with 2-class " + "classifiers. This classifier is also capable of " + "applying error correcting output codes for increased accuracy. "+ "The base classifier must be an updateable classifier";
}

@Override public void buildClassifier(Instances insts) throws Exception {
  if (m_Classifier == null) {
    throw new Exception("No base classifier has been set!");
  }
  if (!(m_Classifier instanceof UpdateableClassifier)) {
    throw new Exception("Base classifier must be updateable!");
  }
  super.buildClassifier(insts);
}

/** 
 * Updates the classifier with the given instance.
 * @param instance the new training instance to include in the model
 * @exception Exception if the instance could not be incorporated in themodel.
 */
@Override public void updateClassifier(Instance instance) throws Exception {
  if (!instance.classIsMissing()) {
    if (m_Classifiers.length == 1) {
      ((UpdateableClassifier)m_Classifiers[0]).updateClassifier(instance);
      return;
    }
    for (int i=0; i < m_Classifiers.length; i++) {
      if (m_Classifiers[i] != null) {
        m_ClassFilters[i].input(instance);
        Instance converted=m_ClassFilters[i].output();
        if (converted != null) {
          converted.dataset().setClassIndex(m_ClassAttribute.index());
          ((UpdateableClassifier)m_Classifiers[i]).updateClassifier(converted);
          if (m_Method == METHOD_1_AGAINST_1) {
            m_SumOfWeights[i]+=converted.weight();
          }
        }
      }
    }
  }
}

/** 
 * Returns the distribution for an instance.
 * @param inst the instance to get the distribution for
 * @return the distribution
 * @throws Exception if the distribution can't be computed successfully
 */
@Override public double[] distributionForInstance(Instance inst) throws Exception {
  if (m_Classifiers.length == 1) {
    return m_Classifiers[0].distributionForInstance(inst);
  }
  double[] probs=new double[inst.numClasses()];
  if (m_Method == METHOD_1_AGAINST_1) {
    double[][] r=new double[inst.numClasses()][inst.numClasses()];
    double[][] n=new double[inst.numClasses()][inst.numClasses()];
    for (int i=0; i < m_ClassFilters.length; i++) {
      if (m_Classifiers[i] != null && m_SumOfWeights[i] > 0) {
        Instance tempInst=(Instance)inst.copy();
        tempInst.setDataset(m_TwoClassDataset);
        double[] current=m_Classifiers[i].distributionForInstance(tempInst);
        Range range=new Range(((RemoveWithValues)m_ClassFilters[i]).getNominalIndices());
        range.setUpper(m_ClassAttribute.numValues());
        int[] pair=range.getSelection();
        if (m_pairwiseCoupling && inst.numClasses() > 2) {
          r[pair[0]][pair[1]]=current[0];
          n[pair[0]][pair[1]]=m_SumOfWeights[i];
        }
 else {
          if (current[0] > current[1]) {
            probs[pair[0]]+=1.0;
          }
 else {
            probs[pair[1]]+=1.0;
          }
        }
      }
    }
    if (m_pairwiseCoupling && inst.numClasses() > 2) {
      try {
        return pairwiseCoupling(n,r);
      }
 catch (      IllegalArgumentException ex) {
      }
    }
    if (Utils.gr(Utils.sum(probs),0)) {
      Utils.normalize(probs);
    }
    return probs;
  }
 else {
    probs=super.distributionForInstance(inst);
  }
  return probs;
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 9248 $");
}

/** 
 * Main method for testing this class.
 * @param argv the options
 */
public static void main(String[] argv){
  runClassifier(new MultiClassClassifierUpdateable(),argv);
}
}
