namespace weka.gui;

class PropertySelectorDialog
{
  isA JDialog;
 depend java.awt.BorderLayout;
 depend java.awt.Container;
 depend java.awt.Frame;
 depend java.awt.event.ActionEvent;
 depend java.awt.event.ActionListener;
 depend java.beans.BeanInfo;
 depend java.beans.IntrospectionException;
 depend java.beans.Introspector;
 depend java.beans.PropertyDescriptor;
 depend java.beans.PropertyEditor;
 depend java.beans.PropertyEditorManager;
 depend java.lang.reflect.InvocationTargetException;
 depend java.lang.reflect.Method;
 depend javax.swing.Box;
 depend javax.swing.BoxLayout;
 depend javax.swing.JButton;
 depend javax.swing.JDialog;
 depend javax.swing.JScrollPane;
 depend javax.swing.JTree;
 depend javax.swing.tree.DefaultMutableTreeNode;
 depend javax.swing.tree.TreePath;
 depend javax.swing.tree.TreeSelectionModel;
 depend weka.experiment.PropertyNode;
/** 
 * for serialization 
 */
private static final long serialVersionUID=-3155058124137930518L;

/** 
 * Click to choose the currently selected property 
 */
protected JButton m_SelectBut=new JButton("Select");

/** 
 * Click to cancel the property selection 
 */
protected JButton m_CancelBut=new JButton("Cancel");

/** 
 * The root of the property tree 
 */
protected DefaultMutableTreeNode m_Root;

/** 
 * The object at the root of the tree 
 */
protected Object m_RootObject;

/** 
 * Whether the selection was made or cancelled 
 */
protected int m_Result;

/** 
 * Stores the path to the selected property 
 */
protected Object[] m_ResultPath;

/** 
 * The component displaying the property tree 
 */
protected JTree m_Tree;

/** 
 * Signifies an OK property selection 
 */
public static final int APPROVE_OPTION=0;

/** 
 * Signifies a cancelled property selection 
 */
public static final int CANCEL_OPTION=1;

/** 
 * Create the property selection dialog.
 * @param parentFrame the parent frame of the dialog
 * @param rootObject the object containing properties to select from
 */
public PropertySelectorDialog(Frame parentFrame,Object rootObject){
  super(parentFrame,"Select a property",ModalityType.DOCUMENT_MODAL);
  m_CancelBut.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      m_Result=CANCEL_OPTION;
      setVisible(false);
    }
  }
);
  m_SelectBut.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      TreePath tPath=m_Tree.getSelectionPath();
      if (tPath == null) {
        m_Result=CANCEL_OPTION;
      }
 else {
        m_ResultPath=tPath.getPath();
        if ((m_ResultPath == null) || (m_ResultPath.length < 2)) {
          m_Result=CANCEL_OPTION;
        }
 else {
          m_Result=APPROVE_OPTION;
        }
      }
      setVisible(false);
    }
  }
);
  m_RootObject=rootObject;
  m_Root=new DefaultMutableTreeNode(new PropertyNode(m_RootObject));
  createNodes(m_Root);
  Container c=getContentPane();
  c.setLayout(new BorderLayout());
  Box b1=new Box(BoxLayout.X_AXIS);
  b1.add(m_SelectBut);
  b1.add(Box.createHorizontalStrut(10));
  b1.add(m_CancelBut);
  c.add(b1,BorderLayout.SOUTH);
  m_Tree=new JTree(m_Root);
  m_Tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  c.add(new JScrollPane(m_Tree),BorderLayout.CENTER);
  pack();
}

@Override public void actionPerformed(ActionEvent e){
  m_Result=CANCEL_OPTION;
  setVisible(false);
}

@Override public void actionPerformed(ActionEvent e){
  TreePath tPath=m_Tree.getSelectionPath();
  if (tPath == null) {
    m_Result=CANCEL_OPTION;
  }
 else {
    m_ResultPath=tPath.getPath();
    if ((m_ResultPath == null) || (m_ResultPath.length < 2)) {
      m_Result=CANCEL_OPTION;
    }
 else {
      m_Result=APPROVE_OPTION;
    }
  }
  setVisible(false);
}

/** 
 * Pops up the modal dialog and waits for cancel or a selection.
 * @return either APPROVE_OPTION, or CANCEL_OPTION
 */
public int showDialog(){
  m_Result=CANCEL_OPTION;
  setVisible(true);
  return m_Result;
}

/** 
 * Gets the path of property nodes to the selected property.
 * @return an array of PropertyNodes
 */
public PropertyNode[] getPath(){
  PropertyNode[] result=new PropertyNode[m_ResultPath.length - 1];
  for (int i=0; i < result.length; i++) {
    result[i]=(PropertyNode)((DefaultMutableTreeNode)m_ResultPath[i + 1]).getUserObject();
  }
  return result;
}

/** 
 * Creates the property tree below the current node.
 * @param localNode a value of type 'DefaultMutableTreeNode'
 */
protected void createNodes(DefaultMutableTreeNode localNode){
  PropertyNode pNode=(PropertyNode)localNode.getUserObject();
  Object localObject=pNode.value;
  PropertyDescriptor localProperties[];
  try {
    BeanInfo bi=Introspector.getBeanInfo(localObject.getClass());
    localProperties=bi.getPropertyDescriptors();
  }
 catch (  IntrospectionException ex) {
    System.err.println("PropertySelectorDialog: Couldn't introspect");
    return;
  }
  for (  PropertyDescriptor localPropertie : localProperties) {
    if (localPropertie.isHidden() || localPropertie.isExpert()) {
      continue;
    }
    String name=localPropertie.getDisplayName();
    Class<?> type=localPropertie.getPropertyType();
    Method getter=localPropertie.getReadMethod();
    Method setter=localPropertie.getWriteMethod();
    Object value=null;
    if (getter == null || setter == null) {
      continue;
    }
    try {
      Object args[]={};
      value=getter.invoke(localObject,args);
      PropertyEditor editor=null;
      Class<?> pec=localPropertie.getPropertyEditorClass();
      if (pec != null) {
        try {
          editor=(PropertyEditor)pec.newInstance();
        }
 catch (        Exception ex) {
        }
      }
      if (editor == null) {
        editor=PropertyEditorManager.findEditor(type);
      }
      if ((editor == null) || (value == null)) {
        continue;
      }
    }
 catch (    InvocationTargetException ex) {
      System.err.println("Skipping property " + name + " ; exception on target: "+ ex.getTargetException());
      ex.getTargetException().printStackTrace();
      continue;
    }
catch (    Exception ex) {
      System.err.println("Skipping property " + name + " ; exception: "+ ex);
      ex.printStackTrace();
      continue;
    }
    DefaultMutableTreeNode child=new DefaultMutableTreeNode(new PropertyNode(value,localPropertie,localObject.getClass()));
    localNode.add(child);
    createNodes(child);
  }
}

/** 
 * Tests out the property selector from the command line.
 * @param args ignored
 */
public static void main(String[] args){
  try {
    GenericObjectEditor.registerEditors();
    Object rp=new weka.experiment.AveragingResultProducer();
    final PropertySelectorDialog jd=new PropertySelectorDialog(null,rp);
    int result=jd.showDialog();
    if (result == PropertySelectorDialog.APPROVE_OPTION) {
      System.err.println("Property Selected");
      PropertyNode[] path=jd.getPath();
      for (int i=0; i < path.length; i++) {
        PropertyNode pn=path[i];
        System.err.println("" + (i + 1) + "  "+ pn.toString()+ " "+ pn.value.toString());
      }
    }
 else {
      System.err.println("Cancelled");
    }
    System.exit(0);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.err.println(ex.getMessage());
  }
}
}
