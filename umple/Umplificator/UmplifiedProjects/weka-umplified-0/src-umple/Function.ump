namespace weka.core.pmml;

class Function
{
  isA Serializable;
 depend java.io.Serializable;
 depend java.util.ArrayList;
 depend weka.core.Attribute;
/** 
 * For serialization 
 */
private static final long serialVersionUID=-6997738288201933171L;

/** 
 * The name of this function 
 */
protected String m_functionName;

/** 
 * The structure of the parameters to this function 
 */
protected ArrayList<Attribute> m_parameterDefs=null;

public String getName(){
  return m_functionName;
}

/** 
 * Returns an array of the names of the parameters expected as input by this function. May return null if this function can take an unbounded number of parameters (i.e. min, max, etc.).
 * @return an array of the parameter names or null if there are anunbounded number of parameters.
 */
public abstract String[] getParameterNames();

/** 
 * Set the structure of the parameters that are expected as input by this function. This must be called before getOutputDef() is called.
 * @param paramDefs the structure of the input parameters
 * @throws Exception if the number or types of parameters are not acceptable bythis function
 */
public abstract void setParameterDefs(ArrayList<Attribute> paramDefs) throws Exception ;

/** 
 * Get the structure of the result produced by this function.
 * @return the structure of the result produced by this function.
 */
public abstract Attribute getOutputDef();

/** 
 * Get the result of applying this function.
 * @param incoming the arguments to this function (supplied in order to match thatof the parameter definitions
 * @return the result of applying this function. When the optype iscategorical or ordinal, an index into the values of the output definition is returned.
 * @throws Exception if there is a problem computing the result of this function
 */
public abstract double getResult(double[] incoming) throws Exception ;

/** 
 * Get a built-in PMML Function.
 * @param name the name of the function to get.
 * @return a built-in Function or null if the named function is not known/supported.
 */
public static Function getFunction(String name){
  Function result=null;
  name=name.trim();
  if (name.equals("+")) {
    result=new BuiltInArithmetic(BuiltInArithmetic.Operator.ADDITION);
  }
 else   if (name.equals("-")) {
    result=new BuiltInArithmetic(BuiltInArithmetic.Operator.SUBTRACTION);
  }
 else   if (name.equals("*")) {
    result=new BuiltInArithmetic(BuiltInArithmetic.Operator.MULTIPLICATION);
  }
 else   if (name.equals("/")) {
    result=new BuiltInArithmetic(BuiltInArithmetic.Operator.DIVISION);
  }
 else   if (name.equals(BuiltInMath.MathFunc.MIN.toString())) {
    result=new BuiltInMath(BuiltInMath.MathFunc.MIN);
  }
 else   if (name.equals(BuiltInMath.MathFunc.MAX.toString())) {
    result=new BuiltInMath(BuiltInMath.MathFunc.MAX);
  }
 else   if (name.equals(BuiltInMath.MathFunc.SUM.toString())) {
    result=new BuiltInMath(BuiltInMath.MathFunc.SUM);
  }
 else   if (name.equals(BuiltInMath.MathFunc.AVG.toString())) {
    result=new BuiltInMath(BuiltInMath.MathFunc.AVG);
  }
 else   if (name.equals(BuiltInMath.MathFunc.LOG10.toString())) {
    result=new BuiltInMath(BuiltInMath.MathFunc.LOG10);
  }
 else   if (name.equals(BuiltInMath.MathFunc.LN.toString())) {
    result=new BuiltInMath(BuiltInMath.MathFunc.LN);
  }
 else   if (name.equals(BuiltInMath.MathFunc.SQRT.toString())) {
    result=new BuiltInMath(BuiltInMath.MathFunc.SQRT);
  }
 else   if (name.equals(BuiltInMath.MathFunc.ABS.toString())) {
    result=new BuiltInMath(BuiltInMath.MathFunc.ABS);
  }
 else   if (name.equals(BuiltInMath.MathFunc.EXP.toString())) {
    result=new BuiltInMath(BuiltInMath.MathFunc.EXP);
  }
 else   if (name.equals(BuiltInMath.MathFunc.POW.toString())) {
    result=new BuiltInMath(BuiltInMath.MathFunc.POW);
  }
 else   if (name.equals(BuiltInMath.MathFunc.THRESHOLD.toString())) {
    result=new BuiltInMath(BuiltInMath.MathFunc.THRESHOLD);
  }
 else   if (name.equals(BuiltInMath.MathFunc.FLOOR.toString())) {
    result=new BuiltInMath(BuiltInMath.MathFunc.FLOOR);
  }
 else   if (name.equals(BuiltInMath.MathFunc.CEIL.toString())) {
    result=new BuiltInMath(BuiltInMath.MathFunc.CEIL);
  }
 else   if (name.equals(BuiltInMath.MathFunc.ROUND.toString())) {
    result=new BuiltInMath(BuiltInMath.MathFunc.ROUND);
  }
 else   if (name.equals(BuiltInString.StringFunc.UPPERCASE)) {
    result=new BuiltInString(BuiltInString.StringFunc.UPPERCASE);
  }
 else   if (name.equals(BuiltInString.StringFunc.SUBSTRING)) {
    result=new BuiltInString(BuiltInString.StringFunc.SUBSTRING);
  }
 else   if (name.equals(BuiltInString.StringFunc.TRIMBLANKS)) {
    result=new BuiltInString(BuiltInString.StringFunc.TRIMBLANKS);
  }
  return result;
}

/** 
 * Get either a function. Built-in functions are queried first, and then DefineFunctions in the TransformationDictionary (if any).
 * @param name the name of the function to get.
 * @param transDict the TransformationDictionary (may be null if there isno dictionary).
 * @return the function
 * @throws Exception if the named function is not known/supported.
 */
public static Function getFunction(String name,TransformationDictionary transDict) throws Exception {
  Function result=getFunction(name);
  if (result == null && transDict != null) {
    result=transDict.getFunction(name);
  }
  if (result == null) {
    throw new Exception("[Function] unknown/unsupported function " + name);
  }
  return result;
}

public String toString(){
  return toString("");
}

public String toString(String pad){
  return pad + this.getClass().getName();
}
}
