namespace weka.gui;

class ViewerDialog
{
  isA ChangeListener;
  isA JDialog;
 depend java.awt.BorderLayout;
 depend java.awt.FlowLayout;
 depend java.awt.Frame;
 depend java.awt.event.ActionEvent;
 depend java.awt.event.ActionListener;
 depend javax.swing.JButton;
 depend javax.swing.JDialog;
 depend javax.swing.JPanel;
 depend javax.swing.event.ChangeEvent;
 depend javax.swing.event.ChangeListener;
 depend weka.core.Instances;
 depend weka.gui.arffviewer.ArffPanel;
/** 
 * for serialization 
 */
private static final long serialVersionUID=6747718484736047752L;

/** 
 * Signifies an OK property selection 
 */
public static final int APPROVE_OPTION=0;

/** 
 * Signifies a cancelled property selection 
 */
public static final int CANCEL_OPTION=1;

/** 
 * the result of the user's action, either OK or CANCEL 
 */
protected int m_Result=CANCEL_OPTION;

/** 
 * Click to activate the current set parameters 
 */
protected JButton m_OkButton=new JButton("OK");

/** 
 * Click to cancel the dialog 
 */
protected JButton m_CancelButton=new JButton("Cancel");

/** 
 * Click to undo the last action 
 */
protected JButton m_UndoButton=new JButton("Undo");

/** 
 * the panel to display the Instances-object 
 */
protected ArffPanel m_ArffPanel=new ArffPanel();

/** 
 * initializes the dialog with the given parent
 * @param parent the parent for this dialog
 */
public ViewerDialog(Frame parent){
  super(parent,ModalityType.DOCUMENT_MODAL);
  createDialog();
}

/** 
 * creates all the elements of the dialog
 */
protected void createDialog(){
  JPanel panel;
  setTitle("Viewer");
  getContentPane().setLayout(new BorderLayout());
  m_ArffPanel.addChangeListener(this);
  getContentPane().add(m_ArffPanel,BorderLayout.CENTER);
  panel=new JPanel(new FlowLayout(FlowLayout.RIGHT));
  getContentPane().add(panel,BorderLayout.SOUTH);
  m_UndoButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      undo();
    }
  }
);
  getContentPane().add(panel,BorderLayout.SOUTH);
  m_CancelButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_Result=CANCEL_OPTION;
      setVisible(false);
    }
  }
);
  m_OkButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_Result=APPROVE_OPTION;
      setVisible(false);
    }
  }
);
  panel.add(m_UndoButton);
  panel.add(m_OkButton);
  panel.add(m_CancelButton);
  pack();
}

public void actionPerformed(ActionEvent e){
  undo();
}

public void actionPerformed(ActionEvent e){
  m_Result=CANCEL_OPTION;
  setVisible(false);
}

public void actionPerformed(ActionEvent e){
  m_Result=APPROVE_OPTION;
  setVisible(false);
}

/** 
 * sets the instances to display
 */
public void setInstances(Instances inst){
  m_ArffPanel.setInstances(new Instances(inst));
}

/** 
 * returns the currently displayed instances
 */
public Instances getInstances(){
  return m_ArffPanel.getInstances();
}

/** 
 * sets the state of the buttons 
 */
protected void setButtons(){
  m_OkButton.setEnabled(true);
  m_CancelButton.setEnabled(true);
  m_UndoButton.setEnabled(m_ArffPanel.canUndo());
}

/** 
 * returns whether the data has been changed
 * @return true if the data has been changed
 */
public boolean isChanged(){
  return m_ArffPanel.isChanged();
}

/** 
 * undoes the last action 
 */
private void undo(){
  m_ArffPanel.undo();
}

/** 
 * Invoked when the target of the listener has changed its state.
 */
public void stateChanged(ChangeEvent e){
  setButtons();
}

/** 
 * Pops up the modal dialog and waits for Cancel or OK.
 * @return either APPROVE_OPTION, or CANCEL_OPTION
 */
public int showDialog(){
  m_Result=CANCEL_OPTION;
  setVisible(true);
  setButtons();
  return m_Result;
}

/** 
 * Pops up the modal dialog and waits for Cancel or OK.
 * @param inst the instances to display
 * @return either APPROVE_OPTION, or CANCEL_OPTION
 */
public int showDialog(Instances inst){
  setInstances(inst);
  return showDialog();
}
}
