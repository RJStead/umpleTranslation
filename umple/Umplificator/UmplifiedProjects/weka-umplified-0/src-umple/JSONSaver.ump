namespace weka.core.converters;

class JSONSaver
{
  isA BatchConverter;
  isA AbstractFileSaver;
 depend java.io.File;
 depend java.io.IOException;
 depend java.io.OutputStream;
 depend java.io.PrintWriter;
 depend java.util.Collections;
 depend java.util.Enumeration;
 depend java.util.Vector;
 depend java.util.zip.GZIPOutputStream;
 depend weka.core.Capabilities;
 depend weka.core.Capabilities.Capability;
 depend weka.core.Instances;
 depend weka.core.Option;
 depend weka.core.RevisionUtils;
 depend weka.core.SingleIndex;
 depend weka.core.Utils;
 depend weka.core.json.JSONInstances;
 depend weka.core.json.JSONNode;
/** 
 * for serialization. 
 */
private static final long serialVersionUID=-1047134047244534557L;

/** 
 * the class index. 
 */
protected SingleIndex m_ClassIndex=new SingleIndex();

/** 
 * whether to compress the output. 
 */
protected boolean m_CompressOutput=false;

/** 
 * Constructor.
 */
public JSONSaver(){
  resetOptions();
}

/** 
 * Returns a string describing this Saver.
 * @return a description of the Saver suitable for displaying in theexplorer/experimenter gui
 */
public String globalInfo(){
  return "Writes to a destination that is in JSON format.\n" + "The data can be compressed with gzip, in order to save space.\n\n" + "For more information, see JSON homepage:\n"+ "http://www.json.org/";
}

/** 
 * Returns an enumeration describing the available options.
 * @return an enumeration of all the available options.
 */
@Override public Enumeration<Option> listOptions(){
  Vector<Option> result=new Vector<Option>();
  result.addElement(new Option("\tThe class index (first and last are valid as well).\n" + "\t(default: last)","C",1,"-C <class index>"));
  result.addElement(new Option("\tCompresses the data (uses '" + JSONLoader.FILE_EXTENSION_COMPRESSED + "' as extension instead of '"+ JSONLoader.FILE_EXTENSION+ "')\n"+ "\t(default: off)","compress",0,"-compress"));
  result.addAll(Collections.list(super.listOptions()));
  return result.elements();
}

/** 
 * returns the options of the current setup.
 * @return the current options
 */
@Override public String[] getOptions(){
  Vector<String> result=new Vector<String>();
  if (getClassIndex().length() != 0) {
    result.add("-C");
    result.add(getClassIndex());
  }
  if (getCompressOutput()) {
    result.add("-compress");
  }
  Collections.addAll(result,super.getOptions());
  return result.toArray(new String[result.size()]);
}

/** 
 * Parses the options for this object. <p/> <!-- options-start --> Valid options are: <p/> <pre> -i &lt;the input file&gt; The input file </pre> <pre> -o &lt;the output file&gt; The output file </pre> <pre> -C &lt;class index&gt; The class index (first and last are valid as well). (default: last) </pre> <pre> -compress Compresses the data (uses '.json.gz' as extension instead of '.json') (default: off) </pre> <!-- options-end -->
 * @param options the options to use
 * @throws Exception if setting of options fails
 */
@Override public void setOptions(String[] options) throws Exception {
  String tmpStr;
  tmpStr=Utils.getOption('C',options);
  if (tmpStr.length() != 0) {
    setClassIndex(tmpStr);
  }
 else {
    setClassIndex("last");
  }
  setCompressOutput(Utils.getFlag("compress",options));
  super.setOptions(options);
  Utils.checkForRemainingOptions(options);
}

/** 
 * Returns a description of the file type.
 * @return a short file description
 */
@Override public String getFileDescription(){
  return "JSON data files";
}

/** 
 * Gets all the file extensions used for this type of file.
 * @return the file extensions
 */
@Override public String[] getFileExtensions(){
  return new String[]{JSONLoader.FILE_EXTENSION,JSONLoader.FILE_EXTENSION_COMPRESSED};
}

/** 
 * Sets the destination file.
 * @param outputFile the destination file.
 * @throws IOException throws an IOException if file cannot be set
 */
@Override public void setFile(File outputFile) throws IOException {
  if (outputFile.getAbsolutePath().endsWith(JSONLoader.FILE_EXTENSION_COMPRESSED)) {
    setCompressOutput(true);
  }
  super.setFile(outputFile);
}

/** 
 * Resets the Saver.
 */
@Override public void resetOptions(){
  super.resetOptions();
  if (getCompressOutput()) {
    setFileExtension(JSONLoader.FILE_EXTENSION_COMPRESSED);
  }
 else {
    setFileExtension(JSONLoader.FILE_EXTENSION);
  }
}

/** 
 * Returns the tip text for this property.
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String classIndexTipText(){
  return "Sets the class index (\"first\" and \"last\" are valid values)";
}

/** 
 * Get the index of the class attribute.
 * @return the index of the class attribute
 */
public String getClassIndex(){
  return m_ClassIndex.getSingleIndex();
}

/** 
 * Sets index of the class attribute.
 * @param value the index of the class attribute
 */
public void setClassIndex(String value){
  m_ClassIndex.setSingleIndex(value);
}

/** 
 * Returns the tip text for this property.
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String compressOutputTipText(){
  return "Optional compression of the output data";
}

/** 
 * Gets whether the output data is compressed.
 * @return true if the output data is compressed
 */
public boolean getCompressOutput(){
  return m_CompressOutput;
}

/** 
 * Sets whether to compress the output.
 * @param value if truee the output will be compressed
 */
public void setCompressOutput(boolean value){
  m_CompressOutput=value;
}

/** 
 * Returns the Capabilities of this saver.
 * @return the capabilities of this object
 * @see Capabilities
 */
@Override public Capabilities getCapabilities(){
  Capabilities result=super.getCapabilities();
  result.enable(Capability.NOMINAL_ATTRIBUTES);
  result.enable(Capability.NUMERIC_ATTRIBUTES);
  result.enable(Capability.DATE_ATTRIBUTES);
  result.enable(Capability.STRING_ATTRIBUTES);
  result.enable(Capability.MISSING_VALUES);
  result.enable(Capability.NOMINAL_CLASS);
  result.enable(Capability.NUMERIC_CLASS);
  result.enable(Capability.DATE_CLASS);
  result.enable(Capability.STRING_CLASS);
  result.enable(Capability.MISSING_CLASS_VALUES);
  result.enable(Capability.NO_CLASS);
  return result;
}

/** 
 * Sets instances that should be stored.
 * @param instances the instances
 */
@Override public void setInstances(Instances instances){
  if (m_ClassIndex.getSingleIndex().length() != 0) {
    m_ClassIndex.setUpper(instances.numAttributes() - 1);
    instances.setClassIndex(m_ClassIndex.getIndex());
  }
  super.setInstances(instances);
}

/** 
 * Sets the destination output stream.
 * @param output the output stream.
 * @throws IOException throws an IOException if destination cannot be set
 */
@Override public void setDestination(OutputStream output) throws IOException {
  if (getCompressOutput()) {
    super.setDestination(new GZIPOutputStream(output));
  }
 else {
    super.setDestination(output);
  }
}

/** 
 * Writes a Batch of instances.
 * @throws IOException throws IOException if saving in batch mode is notpossible
 */
@Override public void writeBatch() throws IOException {
  if (getInstances() == null) {
    throw new IOException("No instances to save");
  }
  if (getRetrieval() == INCREMENTAL) {
    throw new IOException("Batch and incremental saving cannot be mixed.");
  }
  setRetrieval(BATCH);
  setWriteMode(WRITE);
  PrintWriter outW;
  if ((retrieveFile() == null) && (getWriter() == null)) {
    outW=new PrintWriter(System.out);
  }
 else {
    outW=new PrintWriter(getWriter());
  }
  JSONNode json=JSONInstances.toJSON(getInstances());
  StringBuffer buffer=new StringBuffer();
  json.toString(buffer);
  outW.println(buffer.toString());
  outW.flush();
  if (getWriter() != null) {
    outW.close();
  }
  setWriteMode(WAIT);
  outW=null;
  resetWriter();
  setWriteMode(CANCEL);
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10203 $");
}

/** 
 * Main method.
 * @param args should contain the options of a Saver.
 */
public static void main(String[] args){
  runFileSaver(new JSONSaver(),args);
}
}
