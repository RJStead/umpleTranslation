namespace weka.classifiers.bayes.net.estimate;

class SimpleEstimator
{
  isA BayesNetEstimator;
 depend java.util.Enumeration;
 depend weka.classifiers.bayes.BayesNet;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.RevisionUtils;
 depend weka.core.Utils;
 depend weka.estimators.Estimator;
/** 
 * for serialization 
 */
static final long serialVersionUID=5874941612331806172L;

/** 
 * Returns a string describing this object
 * @return a description of the classifier suitable for displaying in theexplorer/experimenter gui
 */
@Override public String globalInfo(){
  return "SimpleEstimator is used for estimating the conditional probability " + "tables of a Bayes network once the structure has been learned. " + "Estimates probabilities directly from data.";
}

/** 
 * estimateCPTs estimates the conditional probability tables for the Bayes Net using the network structure.
 * @param bayesNet the bayes net to use
 * @throws Exception if something goes wrong
 */
@Override public void estimateCPTs(BayesNet bayesNet) throws Exception {
  initCPTs(bayesNet);
  Enumeration<Instance> enumInsts=bayesNet.m_Instances.enumerateInstances();
  while (enumInsts.hasMoreElements()) {
    Instance instance=enumInsts.nextElement();
    updateClassifier(bayesNet,instance);
  }
}

/** 
 * Updates the classifier with the given instance.
 * @param bayesNet the bayes net to use
 * @param instance the new training instance to include in the model
 * @throws Exception if the instance could not be incorporated in the model.
 */
@Override public void updateClassifier(BayesNet bayesNet,Instance instance) throws Exception {
  for (int iAttribute=0; iAttribute < bayesNet.m_Instances.numAttributes(); iAttribute++) {
    double iCPT=0;
    for (int iParent=0; iParent < bayesNet.getParentSet(iAttribute).getNrOfParents(); iParent++) {
      int nParent=bayesNet.getParentSet(iAttribute).getParent(iParent);
      iCPT=iCPT * bayesNet.m_Instances.attribute(nParent).numValues() + instance.value(nParent);
    }
    bayesNet.m_Distributions[iAttribute][(int)iCPT].addValue(instance.value(iAttribute),instance.weight());
  }
}

/** 
 * initCPTs reserves space for CPTs and set all counts to zero
 * @param bayesNet the bayes net to use
 * @throws Exception if something goes wrong
 */
@Override public void initCPTs(BayesNet bayesNet) throws Exception {
  Instances instances=bayesNet.m_Instances;
  int nMaxParentCardinality=1;
  for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {
    if (bayesNet.getParentSet(iAttribute).getCardinalityOfParents() > nMaxParentCardinality) {
      nMaxParentCardinality=bayesNet.getParentSet(iAttribute).getCardinalityOfParents();
    }
  }
  bayesNet.m_Distributions=new Estimator[instances.numAttributes()][nMaxParentCardinality];
  for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {
    for (int iParent=0; iParent < bayesNet.getParentSet(iAttribute).getCardinalityOfParents(); iParent++) {
      bayesNet.m_Distributions[iAttribute][iParent]=new DiscreteEstimatorBayes(instances.attribute(iAttribute).numValues(),m_fAlpha);
    }
  }
}

/** 
 * Calculates the class membership probabilities for the given test instance.
 * @param bayesNet the bayes net to use
 * @param instance the instance to be classified
 * @return predicted class probability distribution
 * @throws Exception if there is a problem generating the prediction
 */
@Override public double[] distributionForInstance(BayesNet bayesNet,Instance instance) throws Exception {
  Instances instances=bayesNet.m_Instances;
  int nNumClasses=instances.numClasses();
  double[] fProbs=new double[nNumClasses];
  for (int iClass=0; iClass < nNumClasses; iClass++) {
    fProbs[iClass]=1.0;
  }
  for (int iClass=0; iClass < nNumClasses; iClass++) {
    double logfP=0;
    for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {
      double iCPT=0;
      for (int iParent=0; iParent < bayesNet.getParentSet(iAttribute).getNrOfParents(); iParent++) {
        int nParent=bayesNet.getParentSet(iAttribute).getParent(iParent);
        if (nParent == instances.classIndex()) {
          iCPT=iCPT * nNumClasses + iClass;
        }
 else {
          iCPT=iCPT * instances.attribute(nParent).numValues() + instance.value(nParent);
        }
      }
      if (iAttribute == instances.classIndex()) {
        logfP+=Math.log(bayesNet.m_Distributions[iAttribute][(int)iCPT].getProbability(iClass));
      }
 else {
        logfP+=Math.log(bayesNet.m_Distributions[iAttribute][(int)iCPT].getProbability(instance.value(iAttribute)));
      }
    }
    fProbs[iClass]+=logfP;
  }
  double fMax=fProbs[0];
  for (int iClass=0; iClass < nNumClasses; iClass++) {
    if (fProbs[iClass] > fMax) {
      fMax=fProbs[iClass];
    }
  }
  for (int iClass=0; iClass < nNumClasses; iClass++) {
    fProbs[iClass]=Math.exp(fProbs[iClass] - fMax);
  }
  Utils.normalize(fProbs);
  return fProbs;
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10154 $");
}
}
