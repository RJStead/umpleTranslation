namespace weka.filters.unsupervised.attribute;

class TimeSeriesDeltaTest
{
  isA AbstractTimeSeriesFilterTest;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.filters.AbstractTimeSeriesFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
public TimeSeriesDeltaTest(String name){
  super(name);
}

/** 
 * Creates a default TimeSeriesTranslateFilter 
 */
public Filter getFilter(){
  return getFilter("3");
}

/** 
 * Creates a specialized TimeSeriesTranslateFilter 
 */
public Filter getFilter(String rangelist){
  TimeSeriesDelta af=new TimeSeriesDelta();
  af.setAttributeIndices(rangelist);
  af.setFillWithMissing(false);
  return af;
}

public void testInverted(){
  m_Filter=getFilter("1,2,3,4,5,6");
  ((TimeSeriesDelta)m_Filter).setInvertSelection(true);
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances() - 1,result.numInstances());
  for (int i=0; i < result.numInstances(); i++) {
    Instance in=m_Instances.instance(i + 1);
    Instance out=result.instance(i);
    for (int j=0; j < result.numAttributes(); j++) {
      if ((j != 4) && (j != 5) && (j != 6)) {
        if (in.isMissing(j)) {
          assertTrue("Nonselected missing values should pass through",out.isMissing(j));
        }
 else         if (result.attribute(j).isString()) {
          assertEquals("Nonselected attributes shouldn't change. " + in + " --> "+ out,m_Instances.attribute(j).value((int)in.value(j)),result.attribute(j).value((int)out.value(j)));
        }
 else {
          assertEquals("Nonselected attributes shouldn't change. " + in + " --> "+ out,in.value(j),out.value(j),TOLERANCE);
        }
      }
    }
  }
}

public static Test suite(){
  return new TestSuite(TimeSeriesDeltaTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
