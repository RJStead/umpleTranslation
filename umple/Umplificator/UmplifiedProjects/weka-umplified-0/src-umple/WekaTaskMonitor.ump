namespace weka.gui;

class WekaTaskMonitor
{
  isA TaskLogger;
  isA JPanel;
 depend java.awt.BorderLayout;
 depend java.awt.Dimension;
 depend java.awt.Image;
 depend java.awt.Toolkit;
 depend javax.swing.BorderFactory;
 depend javax.swing.ImageIcon;
 depend javax.swing.JLabel;
 depend javax.swing.JPanel;
 depend javax.swing.SwingConstants;
/** 
 * for serialization 
 */
private static final long serialVersionUID=508309816292197578L;

/** 
 * The number of running weka threads 
 */
private int m_ActiveTasks=0;

/** 
 * The label for displaying info 
 */
private JLabel m_MonitorLabel;

/** 
 * The icon for the stationary bird 
 */
private ImageIcon m_iconStationary;

/** 
 * The icon for the animated bird 
 */
private ImageIcon m_iconAnimated;

/** 
 * True if their are active tasks 
 */
private boolean m_animating=false;

/** 
 * Constructor
 */
public WekaTaskMonitor(){
  java.net.URL imageURL=this.getClass().getClassLoader().getResource("weka/gui/weka_stationary.gif");
  if (imageURL != null) {
    Image pic=Toolkit.getDefaultToolkit().getImage(imageURL);
    imageURL=this.getClass().getClassLoader().getResource("weka/gui/weka_animated.gif");
    Image pic2=Toolkit.getDefaultToolkit().getImage(imageURL);
    m_iconStationary=new ImageIcon(pic);
    m_iconAnimated=new ImageIcon(pic2);
  }
  m_MonitorLabel=new JLabel(" x " + m_ActiveTasks,m_iconStationary,SwingConstants.CENTER);
  setLayout(new BorderLayout());
  Dimension d=m_MonitorLabel.getPreferredSize();
  m_MonitorLabel.setPreferredSize(new Dimension(d.width + 15,d.height));
  m_MonitorLabel.setMinimumSize(new Dimension(d.width + 15,d.height));
  add(m_MonitorLabel,BorderLayout.CENTER);
}

/** 
 * Tells the panel that a new task has been started
 */
public synchronized void taskStarted(){
  m_ActiveTasks++;
  updateMonitor();
}

/** 
 * Tells the panel that a task has completed
 */
public synchronized void taskFinished(){
  m_ActiveTasks--;
  if (m_ActiveTasks < 0) {
    m_ActiveTasks=0;
  }
  updateMonitor();
}

/** 
 * Updates the number of running tasks an the status of the bird image
 */
private void updateMonitor(){
  m_MonitorLabel.setText(" x " + m_ActiveTasks);
  if (m_ActiveTasks > 0 && !m_animating) {
    m_MonitorLabel.setIcon(m_iconAnimated);
    m_animating=true;
  }
  if (m_ActiveTasks == 0 && m_animating) {
    m_MonitorLabel.setIcon(m_iconStationary);
    m_animating=false;
  }
}

/** 
 * Main method for testing this class
 */
public static void main(String[] args){
  try {
    final javax.swing.JFrame jf=new javax.swing.JFrame();
    jf.getContentPane().setLayout(new BorderLayout());
    final WekaTaskMonitor tm=new WekaTaskMonitor();
    tm.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Weka Tasks"),BorderFactory.createEmptyBorder(0,5,5,5)));
    jf.getContentPane().add(tm,BorderLayout.CENTER);
    jf.addWindowListener(new java.awt.event.WindowAdapter(){
      public void windowClosing(      java.awt.event.WindowEvent e){
        jf.dispose();
        System.exit(0);
      }
    }
);
    jf.pack();
    jf.setVisible(true);
    tm.taskStarted();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.err.println(ex.getMessage());
  }
}

public void windowClosing(java.awt.event.WindowEvent e){
  jf.dispose();
  System.exit(0);
}
}
