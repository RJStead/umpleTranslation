namespace weka.filters.unsupervised.instance;

class ReservoirSampleTest
{
  isA AbstractFilterTest;
 depend weka.core.InstanceComparator;
 depend weka.core.Instances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
/** 
 * for comparing the instances 
 */
protected InstanceComparator m_Comparator;

public ReservoirSampleTest(String name){
  super(name);
}

protected void setUp() throws Exception {
  super.setUp();
  m_Comparator=new InstanceComparator(true);
}

/** 
 * Creates a default ReservoirSample 
 */
public Filter getFilter(){
  ReservoirSample r=new ReservoirSample();
  return r;
}

public void testTypical(){
  m_Filter=getFilter();
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  boolean equal=true;
  for (int i=0; i < m_Instances.numInstances(); i++) {
    if (m_Comparator.compare(m_Instances.instance(i),result.instance(i)) != 0) {
      equal=false;
      break;
    }
  }
  if (!equal) {
    fail("Result should be equal");
  }
}

public void testSubSample(){
  m_Filter=getFilter();
  ((ReservoirSample)m_Filter).setSampleSize(10);
  Instances result=useFilter();
  assertEquals(result.numInstances(),10);
  boolean equal=true;
  for (int i=0; i < result.numInstances(); i++) {
    if (m_Comparator.compare(m_Instances.instance(i),result.instance(i)) != 0) {
      equal=false;
      break;
    }
  }
  if (equal) {
    fail("Result should be different than the first 10 instances");
  }
}

public void testHeaderOnlyInput(){
  m_Filter=getFilter();
  m_Instances=new Instances(m_Instances,0);
  Instances result=useFilter();
  assertEquals(result.numInstances(),m_Instances.numInstances());
}

public static Test suite(){
  return new TestSuite(ReservoirSampleTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
