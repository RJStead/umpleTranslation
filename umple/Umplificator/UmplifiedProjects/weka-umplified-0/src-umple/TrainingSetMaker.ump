namespace weka.gui.beans;

class TrainingSetMaker
{
  isA DataSourceListener,TestSetListener,EventConstraints,Serializable,StructureProducer;
  isA AbstractTrainingSetProducer;
 depend java.io.Serializable;
 depend java.util.Vector;
 depend weka.core.Instances;
/** 
 * for serialization 
 */
private static final long serialVersionUID=-6152577265471535786L;

protected boolean m_receivedStopNotification=false;

public TrainingSetMaker(){
  m_visual.loadIcons(BeanVisual.ICON_PATH + "TrainingSetMaker.gif",BeanVisual.ICON_PATH + "TrainingSetMaker_animated.gif");
  m_visual.setText("TrainingSetMaker");
}

/** 
 * Get the structure of the output encapsulated in the named event. If the structure can't be determined in advance of seeing input, or this StructureProducer does not generate the named event, null should be returned.
 * @param eventName the name of the output event that encapsulates therequested output.
 * @return the structure of the output encapsulated in the named event or nullif it can't be determined in advance of seeing input or the named event is not generated by this StructureProduce.
 */
@Override public Instances getStructure(String eventName){
  if (!eventName.equals("dataSet")) {
    return null;
  }
  if (m_listenee == null) {
    return null;
  }
  if (m_listenee != null && m_listenee instanceof StructureProducer) {
    return ((StructureProducer)m_listenee).getStructure("dataSet");
  }
  return null;
}

/** 
 * Set a custom (descriptive) name for this bean
 * @param name the name to use
 */
@Override public void setCustomName(String name){
  m_visual.setText(name);
}

/** 
 * Get the custom (descriptive) name for this bean (if one has been set)
 * @return the custom name (or the default name)
 */
@Override public String getCustomName(){
  return m_visual.getText();
}

/** 
 * Global info for this bean
 * @return a <code>String</code> value
 */
public String globalInfo(){
  return "Designate an incoming data set as a training set.";
}

/** 
 * Accept a data set
 * @param e a <code>DataSetEvent</code> value
 */
@Override public void acceptDataSet(DataSetEvent e){
  m_receivedStopNotification=false;
  TrainingSetEvent tse=new TrainingSetEvent(this,e.getDataSet());
  tse.m_setNumber=1;
  tse.m_maxSetNumber=1;
  notifyTrainingSetProduced(tse);
}

@Override public void acceptTestSet(TestSetEvent e){
  m_receivedStopNotification=false;
  TrainingSetEvent tse=new TrainingSetEvent(this,e.getTestSet());
  tse.m_setNumber=1;
  tse.m_maxSetNumber=1;
  notifyTrainingSetProduced(tse);
}

/** 
 * Inform training set listeners that a training set is available
 * @param tse a <code>TrainingSetEvent</code> value
 */
@SuppressWarnings("unchecked") protected void notifyTrainingSetProduced(TrainingSetEvent tse){
  Vector<TrainingSetListener> l;
synchronized (this) {
    l=(Vector<TrainingSetListener>)m_listeners.clone();
  }
  if (l.size() > 0) {
    for (int i=0; i < l.size(); i++) {
      if (m_receivedStopNotification) {
        if (m_logger != null) {
          m_logger.logMessage("T[rainingSetMaker] " + statusMessagePrefix() + " stopping.");
          m_logger.statusMessage(statusMessagePrefix() + "INTERRUPTED");
        }
        m_receivedStopNotification=false;
        break;
      }
      System.err.println("Notifying listeners (training set maker)");
      l.elementAt(i).acceptTrainingSet(tse);
    }
  }
}

/** 
 * Stop any action
 */
@Override public void stop(){
  m_receivedStopNotification=true;
  if (m_listenee instanceof BeanCommon) {
    ((BeanCommon)m_listenee).stop();
  }
}

/** 
 * Returns true if. at this time, the bean is busy with some (i.e. perhaps a worker thread is performing some calculation).
 * @return true if the bean is busy.
 */
@Override public boolean isBusy(){
  return false;
}

/** 
 * Returns true, if at the current time, the named event could be generated. Assumes that supplied event names are names of events that could be generated by this bean.
 * @param eventName the name of the event in question
 * @return true if the named event could be generated at this point in time
 */
@Override public boolean eventGeneratable(String eventName){
  if (m_listenee == null) {
    return false;
  }
  if (m_listenee instanceof EventConstraints) {
    if (!((EventConstraints)m_listenee).eventGeneratable("dataSet")) {
      return false;
    }
  }
  return true;
}

private String statusMessagePrefix(){
  return getCustomName() + "$" + hashCode()+ "|";
}
}
