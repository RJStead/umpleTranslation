namespace weka.filters.unsupervised.attribute;

class SwapValuesTest
{
  isA AbstractFilterTest;
 depend weka.core.Instances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
public SwapValuesTest(String name){
  super(name);
}

/** 
 * Creates an example SwapValues 
 */
public Filter getFilter(){
  SwapValues f=new SwapValues();
  f.setAttributeIndex("2");
  return f;
}

public void testInvalidAttributeTypes(){
  Instances icopy=new Instances(m_Instances);
  try {
    ((SwapValues)m_Filter).setAttributeIndex("1");
    m_Filter.setInputFormat(icopy);
    fail("Should have thrown an exception selecting a STRING attribute!");
  }
 catch (  Exception ex) {
  }
  try {
    ((SwapValues)m_Filter).setAttributeIndex("3");
    m_Filter.setInputFormat(icopy);
    fail("Should have thrown an exception indicating a NUMERIC attribute!");
  }
 catch (  Exception ex) {
  }
}

public void testTypical(){
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  int first=0, second=2;
  for (int i=0; i < result.numInstances(); i++) {
    if (m_Instances.instance(i).value(1) == first) {
      assertTrue("Value should be swapped",result.instance(i).value(1) == second);
    }
 else     if (m_Instances.instance(i).value(1) == second) {
      assertTrue("Value should be swapped",result.instance(i).value(1) == first);
    }
  }
}

public void testFirstValueIndex(){
  ((SwapValues)m_Filter).setFirstValueIndex("2");
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  int first=1, second=2;
  for (int i=0; i < result.numInstances(); i++) {
    if (m_Instances.instance(i).value(1) == first) {
      assertTrue("Value should be swapped",result.instance(i).value(1) == second);
    }
 else     if (m_Instances.instance(i).value(1) == second) {
      assertTrue("Value should be swapped",result.instance(i).value(1) == first);
    }
  }
}

public void testSecondValueIndex(){
  ((SwapValues)m_Filter).setSecondValueIndex("2");
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  int first=0, second=1;
  for (int i=0; i < result.numInstances(); i++) {
    if (m_Instances.instance(i).value(1) == first) {
      assertTrue("Value should be swapped",result.instance(i).value(1) == second);
    }
 else     if (m_Instances.instance(i).value(1) == second) {
      assertTrue("Value should be swapped",result.instance(i).value(1) == first);
    }
  }
}

public void testAttributeWithMissing(){
  ((SwapValues)m_Filter).setAttributeIndex("5");
  ((SwapValues)m_Filter).setFirstValueIndex("1");
  ((SwapValues)m_Filter).setSecondValueIndex("2");
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  int first=0, second=1;
  for (int i=0; i < result.numInstances(); i++) {
    if (m_Instances.instance(i).isMissing(4)) {
      assertTrue("Missing in input should give missing in result:" + m_Instances.instance(i) + " --> "+ result.instance(i),result.instance(i).isMissing(4));
    }
 else     if (m_Instances.instance(i).value(4) == first) {
      assertTrue("Value should be swapped",result.instance(i).value(4) == second);
    }
 else     if (m_Instances.instance(i).value(4) == second) {
      assertTrue("Value should be swapped",result.instance(i).value(4) == first);
    }
  }
}

/** 
 * tests the filter in conjunction with the FilteredClassifier
 */
public void testFilteredClassifier(){
  try {
    Instances data=getFilteredClassifierData();
    for (int i=0; i < data.numAttributes(); i++) {
      if (data.classIndex() == i)       continue;
      if (data.attribute(i).isNominal()) {
        ((SwapValues)m_FilteredClassifier.getFilter()).setAttributeIndex("" + (i + 1));
        break;
      }
    }
  }
 catch (  Exception e) {
    fail("Problem setting up test for FilteredClassifier: " + e.toString());
  }
  super.testFilteredClassifier();
}

public static Test suite(){
  return new TestSuite(SwapValuesTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
