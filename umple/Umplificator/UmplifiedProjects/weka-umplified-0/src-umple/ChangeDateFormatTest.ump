namespace weka.filters.unsupervised.attribute;

class ChangeDateFormatTest
{
  isA AbstractFilterTest;
 depend weka.core.InstanceComparator;
 depend weka.core.Instances;
 depend weka.core.SparseInstance;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
/** 
 * for comparing the instances 
 */
protected InstanceComparator m_Comparator;

public ChangeDateFormatTest(String name){
  super(name);
}

/** 
 * Need to set class index 
 */
protected void setUp() throws Exception {
  super.setUp();
  m_Instances.setClassIndex(1);
  m_Comparator=new InstanceComparator(true);
}

/** 
 * Creates a default ChangeDateFormat 
 */
public Filter getFilter(){
  ChangeDateFormat f=new ChangeDateFormat();
  return f;
}

/** 
 * format must be different in precision (e.g., yyyy-MM instead of yyyy-MM-dd) from the one in "weka.filters.data.FilterTest.arff", otherwise this test will fail!  Note: Sparse instances are skipped.
 */
public void testTypical(){
  m_Filter=getFilter();
  ((ChangeDateFormat)m_Filter).setDateFormat("yyyy-MM");
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  boolean equal=false;
  for (int i=0; i < m_Instances.numInstances(); i++) {
    if (m_Instances.instance(i) instanceof SparseInstance)     continue;
    if (m_Comparator.compare(m_Instances.instance(i),result.instance(i)) == 0) {
      equal=true;
      break;
    }
  }
  if (equal)   fail("Instances not changed!");
}

/** 
 * format must be the same as in "weka.filters.data.FilterTest.arff", otherwise this test will fail! Note: Sparse instances are skipped.
 */
public void testSameFormat(){
  m_Filter=getFilter();
  ((ChangeDateFormat)m_Filter).setDateFormat("yyyy-MM-dd");
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  boolean equal=true;
  for (int i=0; i < m_Instances.numInstances(); i++) {
    if (m_Instances.instance(i) instanceof SparseInstance)     continue;
    if (m_Comparator.compare(m_Instances.instance(i),result.instance(i)) != 0) {
      equal=false;
      break;
    }
  }
  if (!equal)   fail("Instances modified!");
}

/** 
 * tests the filter in conjunction with the FilteredClassifier
 */
public void testFilteredClassifier(){
  try {
    Instances data=getFilteredClassifierData();
    for (int i=0; i < data.numAttributes(); i++) {
      if (data.classIndex() == i)       continue;
      if (data.attribute(i).isDate()) {
        ((ChangeDateFormat)m_FilteredClassifier.getFilter()).setAttributeIndex("" + (i + 1));
        break;
      }
    }
  }
 catch (  Exception e) {
    fail("Problem setting up test for FilteredClassifier: " + e.toString());
  }
  super.testFilteredClassifier();
}

public static Test suite(){
  return new TestSuite(ChangeDateFormatTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
