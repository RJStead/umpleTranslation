namespace weka.gui.visualize;

class PostscriptWriter
{
  isA JComponentWriter;
 depend java.io.BufferedOutputStream;
 depend java.io.File;
 depend java.io.FileOutputStream;
 depend javax.swing.JComponent;
/** 
 * initializes the object 
 */
public PostscriptWriter(){
  super(null);
}

/** 
 * initializes the object with the given Component
 * @param c         the component to print in the output format
 */
public PostscriptWriter(JComponent c){
  super(c);
}

/** 
 * initializes the object with the given Component and filename
 * @param c         the component to print in the output format
 * @param f         the file to store the output in
 */
public PostscriptWriter(JComponent c,File f){
  super(c,f);
}

/** 
 * returns the name of the writer, to display in the FileChooser. must be overridden in the derived class.
 */
public String getDescription(){
  return "Postscript-File";
}

/** 
 * returns the extension (incl. ".") of the output format, to use in the FileChooser.  must be overridden in the derived class.
 */
public String getExtension(){
  return ".eps";
}

/** 
 * generates the actual output
 * @throws Exception	if something goes wrong
 */
public void generateOutput() throws Exception {
  BufferedOutputStream ostrm;
  PostscriptGraphics psg;
  ostrm=null;
  try {
    ostrm=new BufferedOutputStream(new FileOutputStream(getFile()));
    psg=new PostscriptGraphics(getComponent().getHeight(),getComponent().getWidth(),ostrm);
    psg.setFont(getComponent().getFont());
    psg.scale(getXScale(),getYScale());
    getComponent().printAll(psg);
    psg.finished();
  }
 catch (  Exception e) {
    System.err.println(e);
  }
 finally {
    if (ostrm != null) {
      try {
        ostrm.close();
      }
 catch (      Exception e) {
      }
    }
  }
}

/** 
 * for testing only
 */
public static void main(String[] args) throws Exception {
  System.out.println("building TreeVisualizer...");
  weka.gui.treevisualizer.TreeBuild builder=new weka.gui.treevisualizer.TreeBuild();
  weka.gui.treevisualizer.NodePlace arrange=new weka.gui.treevisualizer.PlaceNode2();
  weka.gui.treevisualizer.Node top=builder.create(new java.io.StringReader("digraph atree { top [label=\"the top\"] a [label=\"the first node\"] b [label=\"the second nodes\"] c [label=\"comes off of first\"] top->a top->b b->c }"));
  weka.gui.treevisualizer.TreeVisualizer tv=new weka.gui.treevisualizer.TreeVisualizer(null,top,arrange);
  tv.setSize(800,600);
  String filename=System.getProperty("java.io.tmpdir") + "test.eps";
  System.out.println("outputting to '" + filename + "'...");
  toOutput(new PostscriptWriter(),tv,new File(filename));
  System.out.println("done!");
}
}
