namespace weka.gui.explorer;

interface LogHandler
{
 depend java.awt.BorderLayout;
 depend java.awt.Image;
 depend java.awt.Toolkit;
 depend java.awt.event.WindowAdapter;
 depend java.awt.event.WindowEvent;
 depend java.beans.PropertyChangeEvent;
 depend java.beans.PropertyChangeListener;
 depend java.io.File;
 depend java.text.SimpleDateFormat;
 depend java.util.Date;
 depend java.util.EventListener;
 depend java.util.HashSet;
 depend java.util.Hashtable;
 depend java.util.Vector;
 depend javax.swing.JFrame;
 depend javax.swing.JPanel;
 depend javax.swing.JTabbedPane;
 depend javax.swing.event.ChangeEvent;
 depend weka.core.Capabilities;
 depend weka.core.Copyright;
 depend weka.core.Instances;
 depend weka.core.Memory;
 depend weka.core.converters.AbstractFileLoader;
 depend weka.core.converters.ConverterUtils;
 depend weka.gui.LogPanel;
 depend weka.gui.Logger;
 depend weka.gui.LookAndFeel;
 depend weka.gui.WekaTaskMonitor;
 depend weka.gui.beans.PluginManager;
/** 
 * for serialization 
 */
private static final long serialVersionUID=-7674003708867909578L;

/** 
 * for serialization 
 */
private static final long serialVersionUID=1194260517270385559L;

/** 
 * the capabilities filter 
 */
protected Capabilities m_Filter;

/** 
 * The panel for preprocessing instances 
 */
protected PreprocessPanel m_PreprocessPanel=new PreprocessPanel();

/** 
 * Contains all the additional panels apart from the pre-processing panel 
 */
protected Vector<ExplorerPanel> m_Panels=new Vector<ExplorerPanel>();

/** 
 * The tabbed pane that controls which sub-pane we are working with 
 */
protected JTabbedPane m_TabbedPane=new JTabbedPane();

/** 
 * The panel for log and status messages 
 */
protected LogPanel m_LogPanel=new LogPanel(new WekaTaskMonitor());

/** 
 * the listeners that listen to filter changes 
 */
protected HashSet<CapabilitiesFilterChangeListener> m_CapabilitiesFilterChangeListeners=new HashSet<CapabilitiesFilterChangeListener>();

/** 
 * variable for the Explorer class which would be set to null by the memory monitoring thread to free up some memory if we running out of memory
 */
private static Explorer m_explorer;

/** 
 * for monitoring the Memory consumption 
 */
protected static Memory m_Memory=new Memory(true);

/** 
 * method gets called in case of a change event
 * @param e the associated change event
 */
public void capabilitiesFilterChanged(CapabilitiesFilterChangeEvent e);

/** 
 * Constructs a GOECapabilitiesFilterChangeEvent object.
 * @param source the Object that is the source of the event
 * @param filter the responsible capabilities filter
 */
public CapabilitiesFilterChangeEvent(Object source,Capabilities filter){
  super(source);
  m_Filter=filter;
}

/** 
 * returns the associated Capabilities filter
 * @return the filter
 */
public Capabilities getFilter(){
  return m_Filter;
}

/** 
 * Sets the Explorer to use as parent frame (used for sending notifications about changes in the data)
 * @param parent the parent frame
 */
public void setExplorer(Explorer parent);

/** 
 * returns the parent Explorer frame
 * @return the parent
 */
public Explorer getExplorer();

/** 
 * Tells the panel to use a new set of instances.
 * @param inst a set of Instances
 */
public void setInstances(Instances inst);

/** 
 * Returns the title for the tab in the Explorer
 * @return the title of this tab
 */
public String getTabTitle();

/** 
 * Returns the tooltip for the tab in the Explorer
 * @return the tooltip of this tab
 */
public String getTabTitleToolTip();

/** 
 * Sets the Logger to receive informational messages
 * @param newLog the Logger that will now get info messages
 */
public void setLog(Logger newLog);

/** 
 * Creates the experiment environment gui with no initial experiment
 */
public Explorer(){
  String date=(new SimpleDateFormat("EEEE, d MMMM yyyy")).format(new Date());
  m_LogPanel.logMessage("Weka Explorer");
  m_LogPanel.logMessage("(c) " + Copyright.getFromYear() + "-"+ Copyright.getToYear()+ " "+ Copyright.getOwner()+ ", "+ Copyright.getAddress());
  m_LogPanel.logMessage("web: " + Copyright.getURL());
  m_LogPanel.logMessage("Started on " + date);
  m_LogPanel.statusMessage("Welcome to the Weka Explorer");
  m_PreprocessPanel.setLog(m_LogPanel);
  m_TabbedPane.addTab(m_PreprocessPanel.getTabTitle(),null,m_PreprocessPanel,m_PreprocessPanel.getTabTitleToolTip());
  String[] tabs=ExplorerDefaults.getTabs();
  Hashtable<String,HashSet<String>> tabOptions=new Hashtable<String,HashSet<String>>();
  for (  String tab : tabs) {
    try {
      String[] optionsStr=tab.split(":");
      String classname=optionsStr[0];
      if (PluginManager.isInDisabledList(classname)) {
        continue;
      }
      HashSet<String> options=new HashSet<String>();
      tabOptions.put(classname,options);
      for (int n=1; n < optionsStr.length; n++) {
        options.add(optionsStr[n]);
      }
      ExplorerPanel panel=(ExplorerPanel)Class.forName(classname).newInstance();
      panel.setExplorer(this);
      m_Panels.add(panel);
      if (panel instanceof LogHandler) {
        ((LogHandler)panel).setLog(m_LogPanel);
      }
      m_TabbedPane.addTab(panel.getTabTitle(),null,(JPanel)panel,panel.getTabTitleToolTip());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  m_TabbedPane.setSelectedIndex(0);
  for (int i=0; i < m_Panels.size(); i++) {
    HashSet<String> options=tabOptions.get(m_Panels.get(i).getClass().getName());
    m_TabbedPane.setEnabledAt(i + 1,options.contains("standalone"));
  }
  m_PreprocessPanel.addPropertyChangeListener(new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent e){
      for (int i=0; i < m_Panels.size(); i++) {
        m_Panels.get(i).setInstances(m_PreprocessPanel.getInstances());
        m_TabbedPane.setEnabledAt(i + 1,true);
      }
    }
  }
);
  m_PreprocessPanel.setExplorer(this);
  addCapabilitiesFilterListener(m_PreprocessPanel);
  for (int i=0; i < m_Panels.size(); i++) {
    if (m_Panels.get(i) instanceof CapabilitiesFilterChangeListener) {
      addCapabilitiesFilterListener((CapabilitiesFilterChangeListener)m_Panels.get(i));
    }
  }
  setLayout(new BorderLayout());
  add(m_TabbedPane,BorderLayout.CENTER);
  add(m_LogPanel,BorderLayout.SOUTH);
}

@Override public void propertyChange(PropertyChangeEvent e){
  for (int i=0; i < m_Panels.size(); i++) {
    m_Panels.get(i).setInstances(m_PreprocessPanel.getInstances());
    m_TabbedPane.setEnabledAt(i + 1,true);
  }
}

/** 
 * returns all the panels, apart from the PreprocessPanel
 * @return the currently displayed panels w/o PreprocessPanel
 */
public Vector<ExplorerPanel> getPanels(){
  return m_Panels;
}

/** 
 * returns the instance of the PreprocessPanel being used in this instance of the Explorer
 * @return the panel
 */
public PreprocessPanel getPreprocessPanel(){
  return m_PreprocessPanel;
}

/** 
 * returns the tabbed pane of the Explorer
 * @return the tabbed pane
 */
public JTabbedPane getTabbedPane(){
  return m_TabbedPane;
}

/** 
 * adds the listener to the list of objects that listen for changes of the CapabilitiesFilter
 * @param l the listener to add
 * @see #m_CapabilitiesFilterChangeListeners
 */
public void addCapabilitiesFilterListener(CapabilitiesFilterChangeListener l){
  m_CapabilitiesFilterChangeListeners.add(l);
}

/** 
 * Removes the specified listener from the set of listeners if it is present.
 * @param l the listener to remove
 * @return true if the listener was registered
 */
public boolean removeCapabilitiesFilterListener(CapabilitiesFilterChangeListener l){
  return m_CapabilitiesFilterChangeListeners.remove(l);
}

/** 
 * notifies all the listeners of a change
 * @param filter the affected filter
 */
public void notifyCapabilitiesFilterListener(Capabilities filter){
  for (  CapabilitiesFilterChangeListener l : m_CapabilitiesFilterChangeListeners) {
    if (l == this) {
      continue;
    }
    l.capabilitiesFilterChanged(new CapabilitiesFilterChangeEvent(this,filter));
  }
}

/** 
 * Tests out the explorer environment.
 * @param args ignored.
 */
public static void main(String[] args){
  weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,"Logging started");
  LookAndFeel.setLookAndFeel();
  weka.gui.GenericObjectEditor.determineClasses();
  try {
    m_explorer=new Explorer();
    final JFrame jf=new JFrame("Weka Explorer");
    jf.getContentPane().setLayout(new BorderLayout());
    jf.getContentPane().add(m_explorer,BorderLayout.CENTER);
    jf.addWindowListener(new WindowAdapter(){
      @Override public void windowClosing(      WindowEvent e){
        jf.dispose();
        System.exit(0);
      }
    }
);
    jf.pack();
    jf.setSize(800,600);
    jf.setVisible(true);
    Image icon=Toolkit.getDefaultToolkit().getImage(m_explorer.getClass().getClassLoader().getResource("weka/gui/weka_icon_new_48.png"));
    jf.setIconImage(icon);
    if (args.length == 1) {
      System.err.println("Loading instances from " + args[0]);
      AbstractFileLoader loader=ConverterUtils.getLoaderForFile(args[0]);
      loader.setFile(new File(args[0]));
      m_explorer.m_PreprocessPanel.setInstancesFromFile(loader);
    }
    Thread memMonitor=new Thread(){
      @Override public void run(){
        while (true) {
          if (m_Memory.isOutOfMemory()) {
            jf.dispose();
            m_explorer=null;
            System.gc();
            System.err.println("\ndisplayed message:");
            m_Memory.showOutOfMemory();
            System.err.println("\nexiting");
            System.exit(-1);
          }
        }
      }
    }
;
    memMonitor.setPriority(Thread.MAX_PRIORITY);
    memMonitor.start();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.err.println(ex.getMessage());
  }
}

@Override public void windowClosing(WindowEvent e){
  jf.dispose();
  System.exit(0);
}

@Override public void run(){
  while (true) {
    if (m_Memory.isOutOfMemory()) {
      jf.dispose();
      m_explorer=null;
      System.gc();
      System.err.println("\ndisplayed message:");
      m_Memory.showOutOfMemory();
      System.err.println("\nexiting");
      System.exit(-1);
    }
  }
}
}