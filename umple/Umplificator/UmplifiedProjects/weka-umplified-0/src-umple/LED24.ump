namespace weka.datagenerators.classifiers.classification;

class LED24
{
  isA TechnicalInformationHandler;
  isA ClassificationGenerator;
 depend java.util.ArrayList;
 depend java.util.Enumeration;
 depend java.util.Random;
 depend java.util.Vector;
 depend weka.core.Attribute;
 depend weka.core.DenseInstance;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.Option;
 depend weka.core.RevisionUtils;
 depend weka.core.TechnicalInformation;
 depend weka.core.TechnicalInformation.Field;
 depend weka.core.TechnicalInformation.Type;
 depend weka.core.TechnicalInformationHandler;
 depend weka.core.Utils;
 depend weka.datagenerators.ClassificationGenerator;
/** 
 * for serialization 
 */
static final long serialVersionUID=-7880209100415868737L;

/** 
 * the noise rate 
 */
protected double m_NoisePercent;

/** 
 * the 7-bit LEDs 
 */
protected static final int m_originalInstances[][]={{1,1,1,0,1,1,1},{0,0,1,0,0,1,0},{1,0,1,1,1,0,1},{1,0,1,1,0,1,1},{0,1,1,1,0,1,0},{1,1,0,1,0,1,1},{1,1,0,1,1,1,1},{1,0,1,0,0,1,0},{1,1,1,1,1,1,1},{1,1,1,1,0,1,1}};

/** 
 * used for generating the output, i.e., the additional noise attributes 
 */
protected int m_numIrrelevantAttributes=17;

/** 
 * initializes the generator with default values
 */
public LED24(){
  super();
  setNoisePercent(defaultNoisePercent());
}

/** 
 * Returns a string describing this data generator.
 * @return a description of the data generator suitable for displaying in theexplorer/experimenter gui
 */
public String globalInfo(){
  return "This generator produces data for a display with 7 LEDs. The original " + "output consists of 10 concepts and 7 boolean attributes. Here, in " + "addition to the 7 necessary boolean attributes, 17 other, irrelevant "+ "boolean attributes with random values are added to make it harder. "+ "By default 10 percent of noise are added to the data.\n"+ "\n"+ "More information can be found here:\n"+ getTechnicalInformation().toString();
}

/** 
 * Returns an instance of a TechnicalInformation object, containing detailed information about the technical background of this class, e.g., paper reference or book this class is based on.
 * @return the technical information about this class
 */
@Override public TechnicalInformation getTechnicalInformation(){
  TechnicalInformation result;
  result=new TechnicalInformation(Type.INBOOK);
  result.setValue(Field.AUTHOR,"L. Breiman J.H. Friedman R.A. Olshen and C.J. Stone");
  result.setValue(Field.YEAR,"1984");
  result.setValue(Field.TITLE,"Classification and Regression Trees");
  result.setValue(Field.PUBLISHER,"Wadsworth International Group");
  result.setValue(Field.ADDRESS,"Belmont, California");
  result.setValue(Field.PAGES,"43-49");
  result.setValue(Field.ISBN,"0412048418");
  result.setValue(Field.URL,"http://www.ics.uci.edu/~mlearn/databases/led-display-creator/");
  return result;
}

/** 
 * Returns an enumeration describing the available options.
 * @return an enumeration of all the available options
 */
@Override public Enumeration<Option> listOptions(){
  Vector<Option> result=enumToVector(super.listOptions());
  result.add(new Option("\tThe noise percentage. (default " + defaultNoisePercent() + ")","N",1,"-N <num>"));
  return result.elements();
}

/** 
 * Parses a list of options for this object. <p/> <!-- options-start --> Valid options are: <p/> <pre> -h Prints this help. </pre> <pre> -o &lt;file&gt; The name of the output file, otherwise the generated data is printed to stdout. </pre> <pre> -r &lt;name&gt; The name of the relation. </pre> <pre> -d Whether to print debug informations. </pre> <pre> -S The seed for random function (default 1) </pre> <pre> -n &lt;num&gt; The number of examples to generate (default 100) </pre> <pre> -N &lt;num&gt; The noise percentage. (default 10.0) </pre> <!-- options-end -->
 * @param options the list of options as an array of strings
 * @throws Exception if an option is not supported
 */
@Override public void setOptions(String[] options) throws Exception {
  String tmpStr;
  super.setOptions(options);
  tmpStr=Utils.getOption('N',options);
  if (tmpStr.length() != 0) {
    setNoisePercent(Double.parseDouble(tmpStr));
  }
 else {
    setNoisePercent(defaultNoisePercent());
  }
}

/** 
 * Gets the current settings of the datagenerator.
 * @return an array of strings suitable for passing to setOptions
 */
@Override public String[] getOptions(){
  Vector<String> result;
  String[] options;
  int i;
  result=new Vector<String>();
  options=super.getOptions();
  for (i=0; i < options.length; i++) {
    result.add(options[i]);
  }
  result.add("-N");
  result.add("" + getNoisePercent());
  return result.toArray(new String[result.size()]);
}

/** 
 * returns the default noise percentage
 * @return the default noise percentage
 */
protected double defaultNoisePercent(){
  return 10;
}

/** 
 * Gets the noise percentage.
 * @return the noise percentage.
 */
public double getNoisePercent(){
  return m_NoisePercent;
}

/** 
 * Sets the noise percentage.
 * @param value the noise percentage.
 */
public void setNoisePercent(double value){
  if ((value >= 0.0) && (value <= 100.0)) {
    m_NoisePercent=value;
  }
 else {
    throw new IllegalArgumentException("Noise percent must be in [0,100] (provided: " + value + ")!");
  }
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String noisePercentTipText(){
  return "The noise percent: 0 <= perc <= 100.";
}

/** 
 * Return if single mode is set for the given data generator mode depends on option setting and or generator type.
 * @return single mode flag
 * @throws Exception if mode is not set yet
 */
@Override public boolean getSingleModeFlag() throws Exception {
  return true;
}

/** 
 * Initializes the format for the dataset produced. Must be called before the generateExample or generateExamples methods are used. Re-initializes the random number generator with the given seed.
 * @return the format for the dataset
 * @throws Exception if the generating of the format failed
 * @see #getSeed()
 */
@Override public Instances defineDataFormat() throws Exception {
  ArrayList<Attribute> atts;
  ArrayList<String> attValues;
  int i;
  int n;
  m_Random=new Random(getSeed());
  setNumExamplesAct(getNumExamples());
  atts=new ArrayList<Attribute>();
  for (n=1; n <= 24; n++) {
    attValues=new ArrayList<String>();
    for (i=0; i < 2; i++) {
      attValues.add("" + i);
    }
    atts.add(new Attribute("att" + n,attValues));
  }
  attValues=new ArrayList<String>();
  for (i=0; i < 10; i++) {
    attValues.add("" + i);
  }
  atts.add(new Attribute("class",attValues));
  m_DatasetFormat=new Instances(getRelationNameToUse(),atts,0);
  return m_DatasetFormat;
}

/** 
 * Generates one example of the dataset.
 * @return the generated example
 * @throws Exception if the format of the dataset is not yet defined
 * @throws Exception if the generator only works with generateExamples whichmeans in non single mode
 */
@Override public Instance generateExample() throws Exception {
  Instance result;
  double[] atts;
  int i;
  int selected;
  Random random;
  result=null;
  random=getRandom();
  if (m_DatasetFormat == null) {
    throw new Exception("Dataset format not defined.");
  }
  atts=new double[m_DatasetFormat.numAttributes()];
  selected=random.nextInt(10);
  for (i=0; i < 7; i++) {
    if ((1 + (random.nextInt(100))) <= getNoisePercent()) {
      atts[i]=m_originalInstances[selected][i] == 0 ? 1 : 0;
    }
 else {
      atts[i]=m_originalInstances[selected][i];
    }
  }
  for (i=0; i < m_numIrrelevantAttributes; i++) {
    atts[i + 7]=random.nextInt(2);
  }
  atts[atts.length - 1]=selected;
  result=new DenseInstance(1.0,atts);
  result.setDataset(m_DatasetFormat);
  return result;
}

/** 
 * Generates all examples of the dataset. Re-initializes the random number generator with the given seed, before generating instances.
 * @return the generated dataset
 * @throws Exception if the format of the dataset is not yet defined
 * @throws Exception if the generator only works with generateExample, whichmeans in single mode
 * @see #getSeed()
 */
@Override public Instances generateExamples() throws Exception {
  Instances result;
  int i;
  result=new Instances(m_DatasetFormat,0);
  m_Random=new Random(getSeed());
  for (i=0; i < getNumExamplesAct(); i++) {
    result.add(generateExample());
  }
  return result;
}

/** 
 * Generates a comment string that documentates the data generator. By default this string is added at the beginning of the produced output as ARFF file type, next after the options.
 * @return string contains info about the generated rules
 */
@Override public String generateStart(){
  return "";
}

/** 
 * Generates a comment string that documentats the data generator. By default this string is added at the end of theproduces output as ARFF file type.
 * @return string contains info about the generated rules
 * @throws Exception if the generating of the documentaion fails
 */
@Override public String generateFinished() throws Exception {
  return "";
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10203 $");
}

/** 
 * Main method for executing this class.
 * @param args should contain arguments for the data producer:
 */
public static void main(String[] args){
  runDataGenerator(new LED24(),args);
}
}
