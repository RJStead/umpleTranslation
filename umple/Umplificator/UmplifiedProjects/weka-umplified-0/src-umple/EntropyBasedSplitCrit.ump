namespace weka.classifiers.trees.j48;

class EntropyBasedSplitCrit
{
  isA SplitCriterion;
 depend weka.core.ContingencyTables;
/** 
 * for serialization 
 */
private static final long serialVersionUID=-2618691439791653056L;

/** 
 * Help method for computing entropy.
 */
public final double lnFunc(double num){
  if (num < 1e-6)   return 0;
 else   return ContingencyTables.lnFunc(num);
}

/** 
 * Computes entropy of distribution before splitting.
 */
public final double oldEnt(Distribution bags){
  double returnValue=0;
  int j;
  for (j=0; j < bags.numClasses(); j++)   returnValue=returnValue + lnFunc(bags.perClass(j));
  return (lnFunc(bags.total()) - returnValue) / ContingencyTables.log2;
}

/** 
 * Computes entropy of distribution after splitting.
 */
public final double newEnt(Distribution bags){
  double returnValue=0;
  int i, j;
  for (i=0; i < bags.numBags(); i++) {
    for (j=0; j < bags.numClasses(); j++)     returnValue=returnValue + lnFunc(bags.perClassPerBag(i,j));
    returnValue=returnValue - lnFunc(bags.perBag(i));
  }
  return -(returnValue / ContingencyTables.log2);
}

/** 
 * Computes entropy after splitting without considering the class values.
 */
public final double splitEnt(Distribution bags){
  double returnValue=0;
  int i;
  for (i=0; i < bags.numBags(); i++)   returnValue=returnValue + lnFunc(bags.perBag(i));
  return (lnFunc(bags.total()) - returnValue) / ContingencyTables.log2;
}
}
