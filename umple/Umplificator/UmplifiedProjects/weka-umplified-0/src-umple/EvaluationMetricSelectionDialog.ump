namespace weka.gui;

class EvaluationMetricSelectionDialog
{
  isA JDialog;
 depend java.awt.BorderLayout;
 depend java.awt.Dialog;
 depend java.awt.Frame;
 depend java.awt.GridLayout;
 depend java.awt.Window;
 depend java.awt.event.ActionEvent;
 depend java.awt.event.ActionListener;
 depend java.util.ArrayList;
 depend java.util.List;
 depend javax.swing.JButton;
 depend javax.swing.JDialog;
 depend javax.swing.JPanel;
 depend weka.classifiers.evaluation.Evaluation;
 depend weka.core.Attribute;
 depend weka.core.Instances;
/** 
 * For serialization 
 */
private static final long serialVersionUID=4451184027143094270L;

/** 
 * The list of selected evaluation metrics 
 */
protected List<String> m_selectedEvalMetrics;

/** 
 * Constructor
 * @param parent parent Dialog
 * @param evalMetrics initial list of selected evaluation metrics
 */
public EvaluationMetricSelectionDialog(Dialog parent,List<String> evalMetrics){
  super(parent,"Manage evaluation metrics",ModalityType.DOCUMENT_MODAL);
  m_selectedEvalMetrics=evalMetrics;
  init();
}

/** 
 * Constructor
 * @param parent parent Window
 * @param evalMetrics initial list of selected evaluation metrics
 */
public EvaluationMetricSelectionDialog(Window parent,List<String> evalMetrics){
  super(parent,"Manage evaluation metrics",ModalityType.DOCUMENT_MODAL);
  m_selectedEvalMetrics=evalMetrics;
  init();
}

/** 
 * Constructor
 * @param parent parent Frame
 * @param evalMetrics initial list of selected evaluation metrics
 */
public EvaluationMetricSelectionDialog(Frame parent,List<String> evalMetrics){
  super(parent,"Manage evaluation metrics",ModalityType.DOCUMENT_MODAL);
  m_selectedEvalMetrics=evalMetrics;
  init();
}

/** 
 * Get the list of selected evaluation metrics
 * @return the list of selected evaluation metrics
 */
public List<String> getSelectedEvalMetrics(){
  return m_selectedEvalMetrics;
}

private void init(){
  final weka.gui.AttributeSelectionPanel evalConfigurer=new weka.gui.AttributeSelectionPanel(true,true,true,true);
  ArrayList<Attribute> atts=new ArrayList<Attribute>();
  List<String> allEvalMetrics=Evaluation.getAllEvaluationMetricNames();
  for (  String s : allEvalMetrics) {
    atts.add(new Attribute(s));
  }
  final Instances metricInstances=new Instances("Metrics",atts,1);
  boolean[] selectedMetrics=new boolean[metricInstances.numAttributes()];
  if (m_selectedEvalMetrics == null) {
    m_selectedEvalMetrics=new ArrayList<String>();
    for (int i=0; i < metricInstances.numAttributes(); i++) {
      m_selectedEvalMetrics.add(metricInstances.attribute(i).name());
    }
  }
  for (int i=0; i < selectedMetrics.length; i++) {
    if (m_selectedEvalMetrics.contains(metricInstances.attribute(i).name())) {
      selectedMetrics[i]=true;
    }
  }
  try {
    evalConfigurer.setInstances(metricInstances);
    evalConfigurer.setSelectedAttributes(selectedMetrics);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return;
  }
  setLayout(new BorderLayout());
  JPanel holder=new JPanel();
  holder.setLayout(new BorderLayout());
  holder.add(evalConfigurer,BorderLayout.CENTER);
  JButton okBut=new JButton("OK");
  JButton cancelBut=new JButton("Cancel");
  JPanel butHolder=new JPanel();
  butHolder.setLayout(new GridLayout(1,2));
  butHolder.add(okBut);
  butHolder.add(cancelBut);
  holder.add(butHolder,BorderLayout.SOUTH);
  okBut.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int[] selected=evalConfigurer.getSelectedAttributes();
      m_selectedEvalMetrics.clear();
      for (int i=0; i < selected.length; i++) {
        m_selectedEvalMetrics.add(metricInstances.attribute(selected[i]).name());
      }
      dispose();
    }
  }
);
  cancelBut.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      dispose();
    }
  }
);
  getContentPane().add(holder,BorderLayout.CENTER);
  pack();
}

@Override public void actionPerformed(ActionEvent e){
  int[] selected=evalConfigurer.getSelectedAttributes();
  m_selectedEvalMetrics.clear();
  for (int i=0; i < selected.length; i++) {
    m_selectedEvalMetrics.add(metricInstances.attribute(selected[i]).name());
  }
  dispose();
}

@Override public void actionPerformed(ActionEvent e){
  dispose();
}
}
