namespace weka.experiment;

class ResultMatrixSignificance
{
  isA ResultMatrix;
 depend weka.core.RevisionUtils;
/** 
 * for serialization. 
 */
private static final long serialVersionUID=-1280545644109764206L;

/** 
 * initializes the matrix as 1x1 matrix.
 */
public ResultMatrixSignificance(){
  this(1,1);
}

/** 
 * initializes the matrix with the given dimensions.
 * @param cols	the number of columns
 * @param rows	the number of rows
 */
public ResultMatrixSignificance(int cols,int rows){
  super(cols,rows);
}

/** 
 * initializes the matrix with the values from the given matrix.
 * @param matrix      the matrix to get the values from
 */
public ResultMatrixSignificance(ResultMatrix matrix){
  super(matrix);
}

/** 
 * Returns a string describing the matrix.
 * @return 		a description suitable fordisplaying in the experimenter gui
 */
public String globalInfo(){
  return "Only outputs the significance indicators. Can be used for spotting patterns.";
}

/** 
 * returns the name of the output format.
 * @return		the display name
 */
public String getDisplayName(){
  return "Significance only";
}

/** 
 * returns the default of whether column names or numbers instead are printed.
 * @return		true if names instead of numbers are printed
 */
public boolean getDefaultPrintColNames(){
  return false;
}

/** 
 * returns the default width for the row names.
 * @return		the width
 */
public int getDefaultRowNameWidth(){
  return 40;
}

/** 
 * returns the default of whether std deviations are displayed or not.
 * @return		true if the std deviations are displayed
 */
public boolean getDefaultShowStdDev(){
  return false;
}

/** 
 * sets whether to display the std deviations or not - always false!
 * @param show	ignored
 */
public void setShowStdDev(boolean show){
}

/** 
 * returns the matrix as plain text.
 * @return		the matrix
 */
public String toStringMatrix(){
  StringBuffer result;
  String[][] cells;
  int i;
  int n;
  int nameWidth;
  String line;
  String colStr;
  int rows;
  result=new StringBuffer();
  cells=toArray();
  nameWidth=getColSize(cells,0);
  for (i=0; i < cells.length - 1; i++)   cells[i][0]=padString(cells[i][0],nameWidth);
  rows=cells.length - 1;
  if (getShowAverage())   rows--;
  for (i=0; i < rows; i++) {
    line="";
    colStr="";
    for (n=0; n < cells[i].length; n++) {
      if (isMean(n) || isRowName(n))       colStr=cells[0][n];
      if ((n > 1) && (!isSignificance(n)))       continue;
      if (n > 0)       line+=" ";
      if ((i > 0) && (n > 1))       line+=" ";
      if (i == 0) {
        line+=colStr;
      }
 else {
        if (n == 0) {
          line+=cells[i][n];
        }
 else         if (n == 1) {
          line+=colStr.replaceAll("."," ");
        }
 else {
          line+=cells[i][n];
          line+=colStr.replaceAll("."," ").substring(2);
        }
      }
    }
    result.append(line + "\n");
    if (i == 0)     result.append(line.replaceAll(".","-") + "\n");
  }
  return result.toString();
}

/** 
 * returns the header of the matrix as a string.
 * @return		the header
 * @see #m_HeaderKeys
 * @see #m_HeaderValues
 */
public String toStringHeader(){
  return new ResultMatrixPlainText(this).toStringHeader();
}

/** 
 * returns returns a key for all the col names, for better readability if the names got cut off.
 * @return		the key
 */
public String toStringKey(){
  return new ResultMatrixPlainText(this).toStringKey();
}

/** 
 * returns the summary as string.
 * @return		the summary
 */
public String toStringSummary(){
  return new ResultMatrixPlainText(this).toStringSummary();
}

/** 
 * returns the ranking in a string representation.
 * @return		the ranking
 */
public String toStringRanking(){
  return new ResultMatrixPlainText(this).toStringRanking();
}

/** 
 * Returns the revision string.
 * @return		the revision
 */
public String getRevision(){
  return RevisionUtils.extract("$Revision: 8034 $");
}

/** 
 * for testing only.
 * @param args	ignored
 */
public static void main(String[] args){
  ResultMatrix matrix;
  int i;
  int n;
  matrix=new ResultMatrixSignificance(3,3);
  matrix.addHeader("header1","value1");
  matrix.addHeader("header2","value2");
  matrix.addHeader("header2","value3");
  for (i=0; i < matrix.getRowCount(); i++) {
    for (n=0; n < matrix.getColCount(); n++) {
      matrix.setMean(n,i,(i + 1) * n);
      matrix.setStdDev(n,i,((double)(i + 1) * n) / 100);
      if (i == n) {
        if (i % 2 == 1)         matrix.setSignificance(n,i,SIGNIFICANCE_WIN);
 else         matrix.setSignificance(n,i,SIGNIFICANCE_LOSS);
      }
    }
  }
  System.out.println("\n\n--> " + matrix.getDisplayName());
  System.out.println("\n1. complete\n");
  System.out.println(matrix.toStringHeader() + "\n");
  System.out.println(matrix.toStringMatrix() + "\n");
  System.out.println(matrix.toStringKey());
  System.out.println("\n2. complete with std deviations\n");
  matrix.setShowStdDev(true);
  System.out.println(matrix.toStringMatrix());
  System.out.println("\n3. cols numbered\n");
  matrix.setPrintColNames(false);
  System.out.println(matrix.toStringMatrix());
  System.out.println("\n4. second col missing\n");
  matrix.setColHidden(1,true);
  System.out.println(matrix.toStringMatrix());
  System.out.println("\n5. last row missing, rows numbered too\n");
  matrix.setRowHidden(2,true);
  matrix.setPrintRowNames(false);
  System.out.println(matrix.toStringMatrix());
  System.out.println("\n6. mean prec to 3\n");
  matrix.setMeanPrec(3);
  matrix.setPrintRowNames(false);
  System.out.println(matrix.toStringMatrix());
}
}
