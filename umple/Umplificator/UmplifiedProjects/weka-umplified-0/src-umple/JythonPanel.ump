namespace weka.gui.scripting;

class JythonPanel
{
  isA FileScriptingPanel;
 depend java.awt.BorderLayout;
 depend java.awt.Color;
 depend java.awt.Font;
 depend java.awt.GridLayout;
 depend java.util.Properties;
 depend javax.swing.BorderFactory;
 depend javax.swing.ImageIcon;
 depend javax.swing.JLabel;
 depend javax.swing.JPanel;
 depend javax.swing.JTextPane;
 depend javax.swing.text.Document;
 depend weka.core.Utils;
 depend weka.gui.BrowserHelper;
 depend weka.gui.ComponentHelper;
 depend weka.gui.visualize.VisualizeUtils;
/** 
 * for serialization. 
 */
private static final long serialVersionUID=-827358576217085413L;

/** 
 * the Groovy setup. 
 */
public final static String PROPERTIES_FILE="weka/gui/scripting/Jython.props";

/** 
 * Creates a new JTextPane for the code.
 * @return		the text pane
 */
protected JTextPane newCodePane(){
  JTextPane result;
  SyntaxDocument doc;
  Properties props;
  try {
    props=Utils.readProperties(PROPERTIES_FILE);
  }
 catch (  Exception e) {
    e.printStackTrace();
    props=new Properties();
  }
  result=new JTextPane();
  if (props.getProperty("Syntax","false").equals("true")) {
    doc=new SyntaxDocument(props);
    result.setDocument(doc);
    result.setBackground(doc.getBackgroundColor());
  }
 else {
    result.setForeground(VisualizeUtils.processColour(props.getProperty("ForegroundColor","black"),Color.BLACK));
    result.setBackground(VisualizeUtils.processColour(props.getProperty("BackgroundColor","white"),Color.WHITE));
    result.setFont(new Font(props.getProperty("FontName","monospaced"),Font.PLAIN,Integer.parseInt(props.getProperty("FontSize","12"))));
  }
  return result;
}

/** 
 * Returns an icon to be used in a frame.
 * @return		the icon
 */
public ImageIcon getIcon(){
  return ComponentHelper.getImageIcon(IMAGES_DIR + "/jython_small.png");
}

/** 
 * Returns a panel to be displayed with the AboutAction.
 * @return		the panel with some information on the scripting panel
 */
protected JPanel getAboutPanel(){
  JPanel result;
  JPanel panel;
  result=new JPanel(new BorderLayout());
  result.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
  result.add(new JLabel(ComponentHelper.getImageIcon(IMAGES_DIR + "/jython_medium.png")),BorderLayout.CENTER);
  panel=new JPanel(new GridLayout(5,1));
  panel.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
  result.add(panel,BorderLayout.SOUTH);
  panel.add(new JLabel("Jython homepage"));
  panel.add(BrowserHelper.createLink("http://www.jython.org/",null));
  panel.add(new JLabel(" "));
  panel.add(new JLabel("Weka and Jython"));
  panel.add(BrowserHelper.createLink("http://weka.wikispaces.com/Using+Weka+from+Jython",null));
  return result;
}

/** 
 * Returns the title (without the filename).
 * @return		the plain title
 */
public String getPlainTitle(){
  return "Jython Console";
}

/** 
 * Returns an initialized script object.
 * @param doc		the document to use as basis
 * @return		the initialized script
 */
protected Script newScript(Document doc){
  return new JythonScript(doc);
}

/** 
 * Displays the panel in a frame.
 * @param args	can take a file as first argument
 */
public static void main(String[] args){
  showPanel(new JythonPanel(),args);
}
}
