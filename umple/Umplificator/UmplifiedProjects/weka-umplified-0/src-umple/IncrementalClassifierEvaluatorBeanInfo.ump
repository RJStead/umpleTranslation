namespace weka.gui.beans;

class IncrementalClassifierEvaluatorBeanInfo
{
  isA SimpleBeanInfo;
 depend java.beans.BeanDescriptor;
 depend java.beans.EventSetDescriptor;
 depend java.beans.PropertyDescriptor;
 depend java.beans.SimpleBeanInfo;
/** 
 * Return the property descriptors for this bean
 * @return a <code>PropertyDescriptor[]</code> value
 */
public PropertyDescriptor[] getPropertyDescriptors(){
  try {
    PropertyDescriptor p1;
    PropertyDescriptor p2;
    PropertyDescriptor p3;
    p1=new PropertyDescriptor("statusFrequency",IncrementalClassifierEvaluator.class);
    p2=new PropertyDescriptor("outputPerClassInfoRetrievalStats",IncrementalClassifierEvaluator.class);
    p3=new PropertyDescriptor("chartingEvalWindowSize",IncrementalClassifierEvaluator.class);
    PropertyDescriptor[] pds={p1,p2,p3};
    return pds;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return null;
}

/** 
 * Get the event set descriptors for this bean
 * @return an <code>EventSetDescriptor[]</code> value
 */
public EventSetDescriptor[] getEventSetDescriptors(){
  try {
    EventSetDescriptor[] esds={new EventSetDescriptor(IncrementalClassifierEvaluator.class,"chart",ChartListener.class,"acceptDataPoint"),new EventSetDescriptor(IncrementalClassifierEvaluator.class,"text",TextListener.class,"acceptText")};
    return esds;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return null;
}

/** 
 * Return the bean descriptor for this bean
 * @return a <code>BeanDescriptor</code> value
 */
public BeanDescriptor getBeanDescriptor(){
  return new BeanDescriptor(weka.gui.beans.IncrementalClassifierEvaluator.class,IncrementalClassifierEvaluatorCustomizer.class);
}
}
