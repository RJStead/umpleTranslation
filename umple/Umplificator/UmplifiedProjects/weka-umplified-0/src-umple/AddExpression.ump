namespace weka.filters.unsupervised.attribute;

class AddExpression
{
  isA UnsupervisedFilter,StreamableFilter,OptionHandler;
  isA Filter;
 depend java.util.Enumeration;
 depend java.util.Vector;
 depend weka.core.Attribute;
 depend weka.core.AttributeExpression;
 depend weka.core.Capabilities;
 depend weka.core.Capabilities.Capability;
 depend weka.core.DenseInstance;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.Option;
 depend weka.core.OptionHandler;
 depend weka.core.RevisionUtils;
 depend weka.core.SparseInstance;
 depend weka.core.Utils;
 depend weka.filters.Filter;
 depend weka.filters.StreamableFilter;
 depend weka.filters.UnsupervisedFilter;
/** 
 * for serialization 
 */
static final long serialVersionUID=402130384261736245L;

/** 
 * The infix expression 
 */
private String m_infixExpression="a1^2";

/** 
 * Name of the new attribute. "expression" length string will use the provided expression as the new attribute name
 */
private String m_attributeName="expression";

/** 
 * If true, makes the attribute name equal to the postfix parse of the expression
 */
private boolean m_Debug=false;

private AttributeExpression m_attributeExpression=null;

/** 
 * Returns a string describing this filter
 * @return a description of the filter suitable for displaying in theexplorer/experimenter gui
 */
public String globalInfo(){
  return "An instance filter that creates a new attribute by applying a " + "mathematical expression to existing attributes. The expression " + "can contain attribute references and numeric constants. Supported "+ "operators are :\n"+ "+, -, *, /, ^, log, abs, cos, exp, sqrt, floor, ceil, rint, tan, "+ "sin, (, )\n"+ "Attributes are specified by prefixing with 'a', eg. a7 is "+ "attribute number 7 (starting from 1).\n"+ "Example expression : a1^2*a5/log(a7*4.0).";
}

/** 
 * Returns an enumeration describing the available options.
 * @return an enumeration of all the available options.
 */
@Override public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(3);
  newVector.addElement(new Option("\tSpecify the expression to apply. Eg a1^2*a5/log(a7*4.0)." + "\n\tSupported opperators: ,+, -, *, /, ^, log, abs, cos, " + "\n\texp, sqrt, floor, ceil, rint, tan, sin, (, )"+ "\n\t(default: a1^2)","E",1,"-E <expression>"));
  newVector.addElement(new Option("\tSpecify the name for the new attribute. (default is the " + "expression provided with -E)","N",1,"-N <name>"));
  newVector.addElement(new Option("\tDebug. Names attribute with the postfix parse of the " + "expression.","D",0,"-D"));
  return newVector.elements();
}

/** 
 * Parses a given list of options. <p/> <!-- options-start --> Valid options are: <p/> <pre> -E &lt;expression&gt; Specify the expression to apply. Eg a1^2*a5/log(a7*4.0). Supported opperators: ,+, -, *, /, ^, log, abs, cos,  exp, sqrt, floor, ceil, rint, tan, sin, (, ) (default: a1^2) </pre> <pre> -N &lt;name&gt; Specify the name for the new attribute. (default is the expression provided with -E) </pre> <pre> -D Debug. Names attribute with the postfix parse of the expression. </pre> <!-- options-end -->
 * @param options the list of options as an array of strings
 * @throws Exception if an option is not supported
 */
@Override public void setOptions(String[] options) throws Exception {
  String expString=Utils.getOption('E',options);
  if (expString.length() != 0) {
    setExpression(expString);
  }
 else {
    setExpression("a1^2");
  }
  String name=Utils.getOption('N',options);
  if (name.length() != 0) {
    setName(name);
  }
  setDebug(Utils.getFlag('D',options));
  Utils.checkForRemainingOptions(options);
}

/** 
 * Gets the current settings of the filter.
 * @return an array of strings suitable for passing to setOptions
 */
@Override public String[] getOptions(){
  Vector<String> options=new Vector<String>();
  options.add("-E");
  options.add(getExpression());
  options.add("-N");
  options.add(getName());
  if (getDebug()) {
    options.add("-D");
  }
  return options.toArray(new String[0]);
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String nameTipText(){
  return "Set the name of the new attribute.";
}

/** 
 * Set the name for the new attribute. The string "expression" can be used to make the name of the new attribute equal to the expression provided.
 * @param name the name of the new attribute
 */
public void setName(String name){
  m_attributeName=name;
}

/** 
 * Returns the name of the new attribute
 * @return the name of the new attribute
 */
public String getName(){
  return m_attributeName;
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String debugTipText(){
  return "Set debug mode. If true then the new attribute will be named with " + "the postfix parse of the supplied expression.";
}

/** 
 * Set debug mode. Causes the new attribute to be named with the postfix parse of the expression
 * @param d true if debug mode is to be used
 */
public void setDebug(boolean d){
  m_Debug=d;
}

/** 
 * Gets whether debug is set
 * @return true if debug is set
 */
public boolean getDebug(){
  return m_Debug;
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String expressionTipText(){
  return "Set the math expression to apply. Eg. a1^2*a5/log(a7*4.0)";
}

/** 
 * Set the expression to apply
 * @param expr a mathematical expression to apply
 */
public void setExpression(String expr){
  m_infixExpression=expr;
}

/** 
 * Get the expression
 * @return the expression
 */
public String getExpression(){
  return m_infixExpression;
}

/** 
 * Returns the Capabilities of this filter.
 * @return the capabilities of this object
 * @see Capabilities
 */
@Override public Capabilities getCapabilities(){
  Capabilities result=super.getCapabilities();
  result.disableAll();
  result.enableAllAttributes();
  result.enable(Capability.MISSING_VALUES);
  result.enableAllClasses();
  result.enable(Capability.MISSING_CLASS_VALUES);
  result.enable(Capability.NO_CLASS);
  return result;
}

/** 
 * Sets the format of the input instances.
 * @param instanceInfo an Instances object containing the input instancestructure (any instances contained in the object are ignored - only the structure is required).
 * @return true if the outputFormat may be collected immediately
 * @throws Exception if the format couldn't be set successfully
 */
@Override public boolean setInputFormat(Instances instanceInfo) throws Exception {
  m_attributeExpression=new AttributeExpression();
  m_attributeExpression.convertInfixToPostfix(new String(m_infixExpression));
  super.setInputFormat(instanceInfo);
  Instances outputFormat=new Instances(instanceInfo,0);
  Attribute newAttribute;
  if (m_Debug) {
    newAttribute=new Attribute(m_attributeExpression.getPostFixExpression());
  }
 else   if (m_attributeName.compareTo("expression") != 0) {
    newAttribute=new Attribute(m_attributeName);
  }
 else {
    newAttribute=new Attribute(m_infixExpression);
  }
  outputFormat.insertAttributeAt(newAttribute,instanceInfo.numAttributes());
  setOutputFormat(outputFormat);
  return true;
}

/** 
 * Input an instance for filtering. Ordinarily the instance is processed and made available for output immediately. Some filters require all instances be read before producing output.
 * @param instance the input instance
 * @return true if the filtered instance may now be collected with output().
 * @throws IllegalStateException if no input format has been defined.
 * @throws Exception if there was a problem during the filtering.
 */
@Override public boolean input(Instance instance) throws Exception {
  if (getInputFormat() == null) {
    throw new IllegalStateException("No input instance format defined");
  }
  if (m_NewBatch) {
    resetQueue();
    m_NewBatch=false;
  }
  double[] vals=new double[instance.numAttributes() + 1];
  for (int i=0; i < instance.numAttributes(); i++) {
    if (instance.isMissing(i)) {
      vals[i]=Utils.missingValue();
    }
 else {
      vals[i]=instance.value(i);
    }
  }
  m_attributeExpression.evaluateExpression(vals);
  Instance inst=null;
  if (instance instanceof SparseInstance) {
    inst=new SparseInstance(instance.weight(),vals);
  }
 else {
    inst=new DenseInstance(instance.weight(),vals);
  }
  inst.setDataset(getOutputFormat());
  copyValues(inst,false,instance.dataset(),getOutputFormat());
  inst.setDataset(getOutputFormat());
  push(inst);
  return true;
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10215 $");
}

/** 
 * Main method for testing this class.
 * @param args should contain arguments to the filter: use -h for help
 */
public static void main(String[] args){
  runFilter(new AddExpression(),args);
}
}
