namespace weka.attributeSelection;

class ASEvaluation
{
  isA Serializable,CapabilitiesHandler,CapabilitiesIgnorer,RevisionHandler;
 depend java.io.Serializable;
 depend weka.core.Capabilities;
 depend weka.core.CapabilitiesHandler;
 depend weka.core.CapabilitiesIgnorer;
 depend weka.core.Instances;
 depend weka.core.RevisionHandler;
 depend weka.core.RevisionUtils;
 depend weka.core.SerializedObject;
 depend weka.core.Utils;
/** 
 * for serialization 
 */
private static final long serialVersionUID=2091705669885950849L;

/** 
 * Whether capabilities should not be checked 
 */
protected boolean m_DoNotCheckCapabilities=false;

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String doNotCheckCapabilitiesTipText(){
  return "If set, evaluator capabilities are not checked before evaluator is built" + " (Use with caution to reduce runtime).";
}

/** 
 * Set whether not to check capabilities.
 * @param doNotCheckCapabilities true if capabilities are not to be checked.
 */
public void setDoNotCheckCapabilities(boolean doNotCheckCapabilities){
  m_DoNotCheckCapabilities=doNotCheckCapabilities;
}

/** 
 * Get whether capabilities checking is turned off.
 * @return true if capabilities checking is turned off.
 */
public boolean getDoNotCheckCapabilities(){
  return m_DoNotCheckCapabilities;
}

/** 
 * Generates a attribute evaluator. Has to initialize all fields of the  evaluator that are not being set via options.
 * @param data set of instances serving as training data 
 * @exception Exception if the evaluator has not been generated successfully
 */
public abstract void buildEvaluator(Instances data) throws Exception ;

/** 
 * Provides a chance for a attribute evaluator to do any special post processing of the selected attribute set.
 * @param attributeSet the set of attributes found by the search
 * @return a possibly ranked list of postprocessed attributes
 * @exception Exception if postprocessing fails for some reason
 */
public int[] postProcess(int[] attributeSet) throws Exception {
  return attributeSet;
}

/** 
 * Creates a new instance of an attribute/subset evaluator  given it's class name and (optional) arguments to pass to it's setOptions method. If the evaluator implements OptionHandler and the options parameter is non-null, the evaluator will have it's options set.
 * @param evaluatorName the fully qualified class name of the evaluator
 * @param options an array of options suitable for passing to setOptions. Maybe null.
 * @return the newly created evaluator, ready for use.
 * @exception Exception if the evaluator name is invalid, or the optionssupplied are not acceptable to the evaluator
 */
public static ASEvaluation forName(String evaluatorName,String[] options) throws Exception {
  return (ASEvaluation)Utils.forName(ASEvaluation.class,evaluatorName,options);
}

/** 
 * Creates copies of the current evaluator. Note that this method now uses Serialization to perform a deep copy, so the evaluator object must be fully Serializable. Any currently built model will now be copied as well.
 * @param model an example evaluator to copy
 * @param num the number of evaluator copies to create.
 * @return an array of evaluators.
 * @exception Exception if an error occurs 
 */
public static ASEvaluation[] makeCopies(ASEvaluation model,int num) throws Exception {
  if (model == null) {
    throw new Exception("No model evaluator set");
  }
  ASEvaluation[] evaluators=new ASEvaluation[num];
  SerializedObject so=new SerializedObject(model);
  for (int i=0; i < evaluators.length; i++) {
    evaluators[i]=(ASEvaluation)so.getObject();
  }
  return evaluators;
}

/** 
 * Returns the capabilities of this evaluator.
 * @return            the capabilities of this evaluator
 * @see Capabilities
 */
public Capabilities getCapabilities(){
  Capabilities result=new Capabilities(this);
  result.enableAll();
  return result;
}

/** 
 * Returns the revision string.
 * @return		the revision
 */
public String getRevision(){
  return RevisionUtils.extract("$Revision: 11006 $");
}

/** 
 * runs the evaluator with the given commandline options
 * @param evaluator	the evaluator to run
 * @param options	the commandline options
 */
public static void runEvaluator(ASEvaluation evaluator,String[] options){
  try {
    System.out.println(AttributeSelection.SelectAttributes(evaluator,options));
  }
 catch (  Exception e) {
    String msg=e.toString().toLowerCase();
    if ((msg.indexOf("help requested") == -1) && (msg.indexOf("no training file given") == -1))     e.printStackTrace();
    System.err.println(e.getMessage());
  }
}
}
