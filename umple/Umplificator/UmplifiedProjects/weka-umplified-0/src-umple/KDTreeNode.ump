namespace weka.core.neighboursearch.kdtrees;

class KDTreeNode
{
  isA Serializable,RevisionHandler;
 depend java.io.Serializable;
 depend weka.core.RevisionHandler;
 depend weka.core.RevisionUtils;
/** 
 * for serialization. 
 */
private static final long serialVersionUID=-3660396067582792648L;

/** 
 * node number (only for debug). 
 */
public int m_NodeNumber;

/** 
 * left subtree; contains instances with smaller or equal to split value. 
 */
public KDTreeNode m_Left=null;

/** 
 * right subtree; contains instances with larger than split value. 
 */
public KDTreeNode m_Right=null;

/** 
 * value to split on. 
 */
public double m_SplitValue;

/** 
 * attribute to split on. 
 */
public int m_SplitDim;

/** 
 * lowest and highest value and width (= high - low) for each dimension.
 */
public double[][] m_NodeRanges;

/** 
 * The lo and high bounds of the hyper rectangle described by the node.
 */
public double[][] m_NodesRectBounds;

/** 
 * The start index of the portion of the master index array,  which stores the indices of the instances/points the node  contains.
 */
public int m_Start=0;

/** 
 * The end index of the portion of the master index array,  which stores indices of the instances/points the node  contains.
 */
public int m_End=0;

/** 
 * Constructor.
 */
public KDTreeNode(){
}

/** 
 * Constructor.
 * @param nodeNum The node number/id.
 * @param startidx The start index of node's portion in master index array.
 * @param endidx The start index of node's portion in master index array.
 * @param nodeRanges The attribute ranges of the Instances/points contained in this node.
 */
public KDTreeNode(int nodeNum,int startidx,int endidx,double[][] nodeRanges){
  m_NodeNumber=nodeNum;
  m_Start=startidx;
  m_End=endidx;
  m_NodeRanges=nodeRanges;
}

/** 
 * @param nodeNum The node number/id.
 * @param startidx The start index of node's portion in master index array.
 * @param endidx The start index of node's portion in master index array.
 * @param nodeRanges The attribute ranges of the Instances/points contained in this node.
 * @param rectBounds The range of the rectangular region in the point space that this node  represents (points inside this rectangular region can have different range).
 */
public KDTreeNode(int nodeNum,int startidx,int endidx,double[][] nodeRanges,double[][] rectBounds){
  m_NodeNumber=nodeNum;
  m_Start=startidx;
  m_End=endidx;
  m_NodeRanges=nodeRanges;
  m_NodesRectBounds=rectBounds;
}

/** 
 * Gets the splitting dimension.
 * @return 		splitting dimension
 */
public int getSplitDim(){
  return m_SplitDim;
}

/** 
 * Gets the splitting value.
 * @return 		splitting value
 */
public double getSplitValue(){
  return m_SplitValue;
}

/** 
 * Checks if node is a leaf.
 * @return 		true if it is a leaf
 */
public boolean isALeaf(){
  return (m_Left == null);
}

/** 
 * Returns the number of Instances  in the rectangular region defined  by this node.
 * @return The number of instances inthis KDTreeNode.
 */
public int numInstances(){
  return (m_End - m_Start + 1);
}

/** 
 * Returns the revision string.
 * @return		the revision
 */
public String getRevision(){
  return RevisionUtils.extract("$Revision: 8034 $");
}
}
