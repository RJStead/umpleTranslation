namespace weka.gui.experiment;

class SetupModePanel
{
  isA JPanel;
 depend java.awt.BorderLayout;
 depend java.awt.GridLayout;
 depend java.awt.event.ActionEvent;
 depend java.awt.event.ActionListener;
 depend java.beans.PropertyChangeListener;
 depend javax.swing.ButtonGroup;
 depend javax.swing.JLabel;
 depend javax.swing.JPanel;
 depend javax.swing.JRadioButton;
 depend weka.experiment.Experiment;
/** 
 * for serialization 
 */
private static final long serialVersionUID=-3758035565520727822L;

/** 
 * The button for choosing simple setup mode 
 */
protected JRadioButton m_SimpleSetupRBut=new JRadioButton("Simple");

/** 
 * The button for choosing advanced setup mode 
 */
protected JRadioButton m_AdvancedSetupRBut=new JRadioButton("Advanced");

/** 
 * The simple setup panel 
 */
protected SimpleSetupPanel m_simplePanel=new SimpleSetupPanel();

/** 
 * The advanced setup panel 
 */
protected SetupPanel m_advancedPanel=new SetupPanel();

/** 
 * Creates the setup panel with no initial experiment.
 */
public SetupModePanel(){
  m_simplePanel.setModePanel(this);
  m_SimpleSetupRBut.setMnemonic('S');
  m_SimpleSetupRBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      switchToSimple(null);
    }
  }
);
  m_AdvancedSetupRBut.setMnemonic('A');
  m_AdvancedSetupRBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      switchToAdvanced(null);
    }
  }
);
  ButtonGroup modeBG=new ButtonGroup();
  modeBG.add(m_SimpleSetupRBut);
  modeBG.add(m_AdvancedSetupRBut);
  m_SimpleSetupRBut.setSelected(true);
  JPanel modeButtons=new JPanel();
  modeButtons.setLayout(new GridLayout(1,0));
  modeButtons.add(m_SimpleSetupRBut);
  modeButtons.add(m_AdvancedSetupRBut);
  JPanel switchPanel=new JPanel();
  switchPanel.setLayout(new GridLayout(1,0));
  switchPanel.add(new JLabel("Experiment Configuration Mode:"));
  switchPanel.add(modeButtons);
  setLayout(new BorderLayout());
  add(switchPanel,BorderLayout.NORTH);
  add(m_simplePanel,BorderLayout.CENTER);
}

public void actionPerformed(ActionEvent e){
  switchToSimple(null);
}

public void actionPerformed(ActionEvent e){
  switchToAdvanced(null);
}

/** 
 * Switches to the advanced setup mode.
 * @param exp the experiment to configure
 */
public void switchToAdvanced(Experiment exp){
  if (exp == null) {
    exp=m_simplePanel.getExperiment();
  }
  if (exp != null) {
    m_AdvancedSetupRBut.setSelected(true);
    m_advancedPanel.setExperiment(exp);
  }
  remove(m_simplePanel);
  m_simplePanel.removeNotesFrame();
  add(m_advancedPanel,BorderLayout.CENTER);
  validate();
  repaint();
}

/** 
 * Switches to the simple setup mode only if allowed to.
 * @param exp the experiment to configure
 */
public void switchToSimple(Experiment exp){
  if (exp == null) {
    exp=m_advancedPanel.getExperiment();
  }
  if (exp != null && !m_simplePanel.setExperiment(exp)) {
    m_AdvancedSetupRBut.setSelected(true);
    switchToAdvanced(exp);
  }
 else {
    remove(m_advancedPanel);
    m_advancedPanel.removeNotesFrame();
    add(m_simplePanel,BorderLayout.CENTER);
    validate();
    repaint();
  }
}

/** 
 * Adds a PropertyChangeListener who will be notified of value changes.
 * @param l a value of type 'PropertyChangeListener'
 */
public void addPropertyChangeListener(PropertyChangeListener l){
  m_simplePanel.addPropertyChangeListener(l);
  m_advancedPanel.addPropertyChangeListener(l);
}

/** 
 * Gets the currently configured experiment.
 * @return the currently configured experiment.
 */
public Experiment getExperiment(){
  if (m_SimpleSetupRBut.isSelected())   return m_simplePanel.getExperiment();
 else   return m_advancedPanel.getExperiment();
}
}
