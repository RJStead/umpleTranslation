namespace weka.gui.visualize;

class PNGWriter
{
  isA JComponentWriter;
 depend java.awt.Color;
 depend java.awt.Graphics;
 depend java.awt.Graphics2D;
 depend java.awt.image.BufferedImage;
 depend java.io.File;
 depend javax.imageio.ImageIO;
 depend javax.swing.JComponent;
/** 
 * the background color. 
 */
protected Color m_Background;

/** 
 * initializes the object.
 */
public PNGWriter(){
  super();
}

/** 
 * initializes the object with the given Component.
 * @param c		the component to print in the output format
 */
public PNGWriter(JComponent c){
  super(c);
}

/** 
 * initializes the object with the given Component and filename.
 * @param c		the component to print in the output format
 * @param f		the file to store the output in
 */
public PNGWriter(JComponent c,File f){
  super(c,f);
}

/** 
 * further initialization.
 */
public void initialize(){
  super.initialize();
  setScalingEnabled(false);
}

/** 
 * returns the name of the writer, to display in the FileChooser. must be overridden in the derived class.
 * @return 		the name of the writer
 */
public String getDescription(){
  return "PNG-Image";
}

/** 
 * returns the extension (incl. ".") of the output format, to use in the FileChooser. 
 * @return 		the file extension
 */
public String getExtension(){
  return ".png";
}

/** 
 * returns the current background color.
 * @return		the current background color
 */
public Color getBackground(){
  return m_Background;
}

/** 
 * sets the background color to use in creating the PNG.
 * @param c 		the color to use for background
 */
public void setBackground(Color c){
  m_Background=c;
}

/** 
 * generates the actual output.
 * @throws Exception	if something goes wrong
 */
public void generateOutput() throws Exception {
  BufferedImage bi;
  Graphics g;
  bi=new BufferedImage(getComponent().getWidth(),getComponent().getHeight(),BufferedImage.TYPE_INT_RGB);
  g=bi.getGraphics();
  g.setPaintMode();
  g.setColor(getBackground());
  if (g instanceof Graphics2D)   ((Graphics2D)g).scale(getXScale(),getYScale());
  g.fillRect(0,0,getComponent().getWidth(),getComponent().getHeight());
  getComponent().printAll(g);
  ImageIO.write(bi,"png",getFile());
}

/** 
 * for testing only.
 * @param args 	the commandline arguments
 * @throws Exception 	if something goes wrong
 */
public static void main(String[] args) throws Exception {
  System.out.println("building TreeVisualizer...");
  weka.gui.treevisualizer.TreeBuild builder=new weka.gui.treevisualizer.TreeBuild();
  weka.gui.treevisualizer.NodePlace arrange=new weka.gui.treevisualizer.PlaceNode2();
  weka.gui.treevisualizer.Node top=builder.create(new java.io.StringReader("digraph atree { top [label=\"the top\"] a [label=\"the first node\"] b [label=\"the second nodes\"] c [label=\"comes off of first\"] top->a top->b b->c }"));
  weka.gui.treevisualizer.TreeVisualizer tv=new weka.gui.treevisualizer.TreeVisualizer(null,top,arrange);
  tv.setSize(800,600);
  String filename=System.getProperty("java.io.tmpdir") + File.separator + "test.png";
  System.out.println("outputting to '" + filename + "'...");
  toOutput(new PNGWriter(),tv,new File(filename));
  System.out.println("done!");
}
}
