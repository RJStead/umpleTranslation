namespace weka.core;

class SingleIndex
{
  isA Serializable,RevisionHandler,CustomDisplayStringProvider;
 depend java.io.Serializable;
/** 
 * for serialization. 
 */
static final long serialVersionUID=5285169134430839303L;

/** 
 * Record the string representation of the number. 
 */
protected String m_IndexString="";

/** 
 * The selected index. 
 */
protected int m_SelectedIndex=-1;

/** 
 * Store the maximum value permitted. -1 indicates that no upper value has been set 
 */
protected int m_Upper=-1;

/** 
 * Default constructor.
 */
public SingleIndex(){
}

/** 
 * Constructor to set initial index.
 * @param index the initial index
 * @throws IllegalArgumentException if the index is invalid
 */
public SingleIndex(String index){
  setSingleIndex(index);
}

/** 
 * Sets the value of "last".
 * @param newUpper the value of "last"
 */
public void setUpper(int newUpper){
  if (newUpper >= 0) {
    m_Upper=newUpper;
    setValue();
  }
}

/** 
 * Gets the string representing the selected range of values.
 * @return the range selection string
 */
public String getSingleIndex(){
  return m_IndexString;
}

/** 
 * Sets the index from a string representation. Note that setUpper() must be called for the value to be actually set
 * @param index the index set
 * @throws IllegalArgumentException if the index was not well formed
 */
public void setSingleIndex(String index){
  m_IndexString=index;
  m_SelectedIndex=-1;
}

/** 
 * Constructs a representation of the current range. Being a string representation, the numbers are based from 1.
 * @return the string representation of the current range
 */
public String toString(){
  if (m_IndexString.equals("")) {
    return "No index set";
  }
  if (m_Upper == -1) {
    throw new RuntimeException("Upper limit has not been specified");
  }
  return m_IndexString;
}

/** 
 * Gets the selected index.
 * @return the selected index
 * @throws RuntimeException if the upper limit of the index hasn't been defined
 */
public int getIndex(){
  if (m_IndexString.equals("")) {
    throw new RuntimeException("No index set");
  }
  if (m_Upper == -1) {
    throw new RuntimeException("No upper limit has been specified for index");
  }
  return m_SelectedIndex;
}

/** 
 * Creates a string representation of the given index.
 * @param index the index to turn into a string.Since the index will typically come from a program, indices are assumed from 0, and thus will have 1 added in the String representation.
 * @return the string representation
 */
public static String indexToString(int index){
  return "" + (index + 1);
}

/** 
 * Translates a single string selection into it's internal 0-based equivalent.
 */
protected void setValue(){
  if (m_IndexString.equals("")) {
    throw new RuntimeException("No index set");
  }
  if (m_IndexString.toLowerCase().equals("first")) {
    m_SelectedIndex=0;
  }
 else   if (m_IndexString.toLowerCase().equals("last")) {
    m_SelectedIndex=m_Upper;
  }
 else {
    m_SelectedIndex=Integer.parseInt(m_IndexString) - 1;
    if (m_SelectedIndex < 0) {
      m_IndexString="";
      throw new IllegalArgumentException("Index must be greater than zero");
    }
    if (m_SelectedIndex > m_Upper) {
      m_IndexString="";
      throw new IllegalArgumentException("Index is too large");
    }
  }
}

/** 
 * Returns the revision string.
 * @return		the revision
 */
public String getRevision(){
  return RevisionUtils.extract("$Revision: 8034 $");
}

/** 
 * Returns the custom display string.
 * @return		the string
 */
public String toDisplay(){
  return getSingleIndex();
}

/** 
 * Main method for testing this class.
 * @param argv one parameter: a test index specification
 */
public static void main(String[] argv){
  try {
    if (argv.length == 0) {
      throw new Exception("Usage: SingleIndex <indexspec>");
    }
    SingleIndex singleIndex=new SingleIndex();
    singleIndex.setSingleIndex(argv[0]);
    singleIndex.setUpper(9);
    System.out.println("Input: " + argv[0] + "\n"+ singleIndex.toString());
    int selectedIndex=singleIndex.getIndex();
    System.out.println(selectedIndex + "");
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.out.println(ex.getMessage());
  }
}
}
