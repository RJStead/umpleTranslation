namespace weka.gui.visualize;

class InstanceInfoFrame
{
  isA InstanceInfo;
  isA JFrame;
 depend java.awt.BorderLayout;
 depend java.awt.Font;
 depend java.util.Vector;
 depend javax.swing.JFrame;
 depend javax.swing.JScrollPane;
 depend javax.swing.JTextArea;
 depend weka.core.Instances;
/** 
 * for serialization. 
 */
private static final long serialVersionUID=4684184733677263009L;

/** 
 * the underlying data. 
 */
protected Vector<Instances> m_Data;

/** 
 * the text area for displaying the info. 
 */
protected JTextArea m_TextInfo;

/** 
 * Initializes the frame.
 */
public InstanceInfoFrame(){
  super("Weka: Instance info");
  initialize();
  initGUI();
  initFinished();
}

/** 
 * Initializes member variables.
 */
protected void initialize(){
  m_Data=new Vector<Instances>();
}

/** 
 * Sets up the GUI components.
 */
protected void initGUI(){
  getContentPane().setLayout(new BorderLayout());
  m_TextInfo=new JTextArea();
  m_TextInfo.setEditable(false);
  m_TextInfo.setFont(new Font("Monospaced",Font.PLAIN,12));
  getContentPane().add(new JScrollPane(m_TextInfo),BorderLayout.CENTER);
  pack();
  setSize(320,400);
}

/** 
 * A hook method after initialize() and initGUI have been called.
 */
protected void initFinished(){
}

/** 
 * Sets the text to display.
 * @param text	the text to display
 */
public void setInfoText(String text){
  m_TextInfo.setText(text);
}

/** 
 * Returns the currently displayed info text.
 * @return		the info text
 */
public String getInfoText(){
  return m_TextInfo.getText();
}

/** 
 * Sets the underlying data.
 * @param data	the data of the info text
 */
public void setInfoData(Vector<Instances> data){
  m_Data=new Vector<Instances>();
  if (data != null)   m_Data.addAll(data);
}

/** 
 * Returns the underlying data.
 * @return		the data of the info text, can be null
 */
public Vector<Instances> getInfoData(){
  return m_Data;
}
}
