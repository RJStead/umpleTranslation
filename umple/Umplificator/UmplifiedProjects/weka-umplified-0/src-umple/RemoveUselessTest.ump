namespace weka.filters.unsupervised.attribute;

class RemoveUselessTest
{
  isA AbstractFilterTest;
 depend weka.core.Instances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
public RemoveUselessTest(String name){
  super(name);
}

/** 
 * Need to remove non-nominal attributes, set class index 
 */
protected void setUp() throws Exception {
  super.setUp();
  m_Instances.setClassIndex(1);
}

/** 
 * Creates a default RemoveUseless 
 */
public Filter getFilter(){
  return getFilter(new RemoveUseless().getMaximumVariancePercentageAllowed());
}

/** 
 * creates a RemoveUseless filter with the given percentage of allowed variance
 */
protected Filter getFilter(double percentage){
  RemoveUseless f=new RemoveUseless();
  f.setMaximumVariancePercentageAllowed(percentage);
  return f;
}

public void testNoneRemoved(){
  m_Filter=getFilter(100);
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
}

public void testSomeRemoved(){
  m_Filter=getFilter(5);
  Instances result=useFilter();
  assertTrue(m_Instances.numAttributes() > result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
}

public static Test suite(){
  return new TestSuite(RemoveUselessTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
