namespace weka.experiment;

class TaskStatusInfo
{
  isA Serializable,RevisionHandler;
 depend java.io.Serializable;
 depend weka.core.RevisionHandler;
 depend weka.core.RevisionUtils;
/** 
 * for serialization 
 */
private static final long serialVersionUID=-6129343303703560015L;

public static final int TO_BE_RUN=0;

public static final int PROCESSING=1;

public static final int FAILED=2;

public static final int FINISHED=3;

/** 
 * Holds current execution status.
 */
private int m_ExecutionStatus=TO_BE_RUN;

/** 
 * Holds current status message.
 */
private String m_StatusMessage="New Task";

/** 
 * Holds task result. Set to null for no returnable result.
 */
private Object m_TaskResult=null;

/** 
 * Set the execution status of this Task.
 * @param newStatus the new execution status code
 */
public void setExecutionStatus(int newStatus){
  m_ExecutionStatus=newStatus;
}

/** 
 * Get the execution status of this Task.
 * @return the execution status
 */
public int getExecutionStatus(){
  return m_ExecutionStatus;
}

/** 
 * Set the status message.
 * @param newMessage the new status message
 */
public void setStatusMessage(String newMessage){
  m_StatusMessage=newMessage;
}

/** 
 * Get the status message.
 * @return the status message
 */
public String getStatusMessage(){
  return m_StatusMessage;
}

/** 
 * Set the returnable result for this task..
 * @param taskResult the new returnable result for the task. null if noresult is returnable.
 */
public void setTaskResult(Object taskResult){
  m_TaskResult=taskResult;
}

/** 
 * Get the returnable result of this task.
 * @return an object encapsulating the result of executing the task. Maybe null if the task has no returnable result (eg. a remote experiment task that sends its results to a data base).
 */
public Object getTaskResult(){
  return m_TaskResult;
}

/** 
 * Returns the revision string.
 * @return		the revision
 */
public String getRevision(){
  return RevisionUtils.extract("$Revision: 8034 $");
}
}
