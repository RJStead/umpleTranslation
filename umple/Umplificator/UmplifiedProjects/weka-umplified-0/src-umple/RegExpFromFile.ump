namespace weka.core.stopwords;

class RegExpFromFile
{
  isA AbstractFileBasedStopwords;
 depend java.util.ArrayList;
 depend java.util.List;
 depend java.util.regex.Pattern;
/** 
 * for serialization. 
 */
private static final long serialVersionUID=-722795295494945193L;

/** 
 * The list of regular expressions. 
 */
protected List<Pattern> m_Patterns;

/** 
 * Returns a string describing the stopwords scheme.
 * @return a description suitable for displaying in the gui
 */
@Override public String globalInfo(){
  return "Uses the regular expressions stored in the file for determining " + "whether a word is a stopword (ignored if " + "pointing to a directory). One expression per line.\n"+ "More information on regular expressions:\n"+ "http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html";
}

/** 
 * Returns the tip text for this property.
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
@Override public String stopwordsTipText(){
  return "The file containing the regular expressions.";
}

/** 
 * Performs intialization of the scheme.
 */
@Override protected void initialize(){
  List<String> patterns;
  super.initialize();
  m_Patterns=new ArrayList<Pattern>();
  patterns=read();
  for (  String pattern : patterns) {
    m_Patterns.add(Pattern.compile(pattern));
  }
}

/** 
 * Returns true if the given string is a stop word.
 * @param word the word to test
 * @return true if the word is a stopword
 */
@Override protected synchronized boolean is(String word){
  for (  Pattern pattern : m_Patterns) {
    if (pattern.matcher(word.trim().toLowerCase()).matches()) {
      if (m_Debug)       debug(pattern.pattern() + " --> true");
      return true;
    }
 else {
      if (m_Debug)       debug(pattern.pattern() + " --> false");
    }
  }
  return false;
}
}
