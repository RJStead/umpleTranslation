namespace weka.filters.unsupervised.attribute;

class AddTest
{
  isA AbstractFilterTest;
 depend weka.core.Attribute;
 depend weka.core.Instances;
 depend weka.core.SelectedTag;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
public AddTest(String name){
  super(name);
}

/** 
 * Creates a default Add 
 */
public Filter getFilter(){
  return new Add();
}

/** 
 * Creates a specialized Add 
 */
public Filter getFilter(int pos){
  Add af=new Add();
  af.setAttributeIndex("" + (pos + 1));
  return af;
}

public void testAddFirst(){
  m_Filter=getFilter(0);
  testBuffered();
}

public void testAddLast(){
  m_Filter=getFilter(m_Instances.numAttributes() - 1);
  testBuffered();
}

/** 
 * Checks the generated attribute type.
 */
protected void testType(int attType){
  Instances icopy=new Instances(m_Instances);
  Instances result=null;
  try {
    m_Filter.setInputFormat(icopy);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());
  }
  try {
    result=Filter.useFilter(icopy,m_Filter);
    assertNotNull(result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on useFilter(): \n" + ex.getMessage());
  }
  assertEquals(attType,result.attribute(result.numAttributes() - 1).type());
}

public void testAddNominal(){
  m_Filter=getFilter();
  ((Add)m_Filter).setNominalLabels("hello,there,bob");
  testBuffered();
  testType(Attribute.NOMINAL);
}

public void testAddString(){
  m_Filter=getFilter();
  ((Add)m_Filter).setAttributeType(new SelectedTag(Attribute.STRING,Add.TAGS_TYPE));
  testBuffered();
  testType(Attribute.STRING);
}

public void testAddDate(){
  m_Filter=getFilter();
  ((Add)m_Filter).setAttributeType(new SelectedTag(Attribute.DATE,Add.TAGS_TYPE));
  testBuffered();
  testType(Attribute.DATE);
}

public static Test suite(){
  return new TestSuite(AddTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
