namespace weka.gui.beans;

class BeansProperties
{
  isA Serializable;
 depend java.io.File;
 depend java.io.FileInputStream;
 depend java.io.Serializable;
 depend java.util.ArrayList;
 depend java.util.Enumeration;
 depend java.util.List;
 depend java.util.Properties;
 depend java.util.SortedSet;
 depend java.util.StringTokenizer;
 depend java.util.TreeSet;
 depend javax.swing.JOptionPane;
 depend weka.core.Utils;
/** 
 * For serialization
 */
private static final long serialVersionUID=7183413615090695785L;

/** 
 * Location of the property file for the KnowledgeFlowApp
 */
protected static final String PROPERTY_FILE="weka/gui/beans/Beans.props";

/** 
 * Location of the property file listing available templates 
 */
protected static final String TEMPLATE_PROPERTY_FILE="weka/gui/beans/templates/templates.props";

/** 
 * The paths to template resources 
 */
protected static List<String> TEMPLATE_PATHS;

/** 
 * Short descriptions for templates suitable for displaying in a menu 
 */
protected static List<String> TEMPLATE_DESCRIPTIONS;

/** 
 * Contains the editor properties 
 */
protected static Properties BEAN_PROPERTIES;

/** 
 * Contains the plugin components properties 
 */
protected static ArrayList<Properties> BEAN_PLUGINS_PROPERTIES=new ArrayList<Properties>();

/** 
 * Contains the user's selection of available perspectives to be visible in the perspectives toolbar
 */
protected static String VISIBLE_PERSPECTIVES_PROPERTIES_FILE="weka/gui/beans/VisiblePerspectives.props";

/** 
 * Those perspectives that the user has opted to have visible in the toolbar 
 */
protected static SortedSet<String> VISIBLE_PERSPECTIVES;

private static boolean s_pluginManagerIntialized=false;

/** 
 * Default metastore for configurations etc. 
 */
protected static KFMetaStore s_kfMetaStore=new XMLFileBasedKFMetaStore();

/** 
 * Get the metastore
 * @return the metastore
 */
public static KFMetaStore getMetaStore(){
  return s_kfMetaStore;
}

public static void addToPluginBeanProps(File beanPropsFile) throws Exception {
  Properties tempP=new Properties();
  tempP.load(new FileInputStream(beanPropsFile));
  if (!BEAN_PLUGINS_PROPERTIES.contains(tempP)) {
    BEAN_PLUGINS_PROPERTIES.add(tempP);
  }
}

public static void removeFromPluginBeanProps(File beanPropsFile) throws Exception {
  Properties tempP=new Properties();
  tempP.load(new FileInputStream(beanPropsFile));
  if (BEAN_PLUGINS_PROPERTIES.contains(tempP)) {
    BEAN_PLUGINS_PROPERTIES.remove(tempP);
  }
}

/** 
 * Loads KnowledgeFlow properties and any plugins (adds jars to the classpath)
 */
public static synchronized void loadProperties(){
  if (BEAN_PROPERTIES == null) {
    weka.core.WekaPackageManager.loadPackages(false);
    weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,"[KnowledgeFlow] Loading properties and plugins...");
    try {
      BEAN_PROPERTIES=Utils.readProperties(PROPERTY_FILE);
      java.util.Enumeration<?> keys=BEAN_PROPERTIES.propertyNames();
      if (!keys.hasMoreElements()) {
        throw new Exception("Could not read a configuration file for the bean\n" + "panel. An example file is included with the Weka distribution.\n" + "This file should be named \"" + PROPERTY_FILE + "\" and\n"+ "should be placed either in your user home (which is set\n"+ "to \""+ System.getProperties().getProperty("user.home")+ "\")\n"+ "or the directory that java was started from\n");
      }
    }
 catch (    Exception ex) {
      JOptionPane.showMessageDialog(null,ex.getMessage(),"KnowledgeFlow",JOptionPane.ERROR_MESSAGE);
    }
    if (VISIBLE_PERSPECTIVES == null) {
      Properties pp=new Properties();
      pp.setProperty("weka.gui.beans.KnowledgeFlow.Perspectives","weka.gui.beans.ScatterPlotMatrix,weka.gui.beans.AttributeSummarizer," + "weka.gui.beans.SQLViewerPerspective");
      BEAN_PLUGINS_PROPERTIES.add(pp);
      VISIBLE_PERSPECTIVES=new TreeSet<String>();
      try {
        Properties visible=Utils.readProperties(VISIBLE_PERSPECTIVES_PROPERTIES_FILE);
        Enumeration<?> keys=visible.propertyNames();
        if (keys.hasMoreElements()) {
          String listedPerspectives=visible.getProperty("weka.gui.beans.KnowledgeFlow.SelectedPerspectives");
          if (listedPerspectives != null && listedPerspectives.length() > 0) {
            StringTokenizer st=new StringTokenizer(listedPerspectives,", ");
            while (st.hasMoreTokens()) {
              String perspectiveName=st.nextToken().trim();
              weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,"Adding perspective " + perspectiveName + " to visible list");
              VISIBLE_PERSPECTIVES.add(perspectiveName);
            }
          }
        }
      }
 catch (      Exception ex) {
        JOptionPane.showMessageDialog(null,ex.getMessage(),"KnowledgeFlow",JOptionPane.ERROR_MESSAGE);
      }
    }
  }
  if (TEMPLATE_PATHS == null) {
    TEMPLATE_PATHS=new ArrayList<String>();
    TEMPLATE_DESCRIPTIONS=new ArrayList<String>();
    try {
      Properties templateProps=Utils.readProperties(TEMPLATE_PROPERTY_FILE);
      String paths=templateProps.getProperty("weka.gui.beans.KnowledgeFlow.templates");
      String descriptions=templateProps.getProperty("weka.gui.beans.KnowledgeFlow.templates.desc");
      if (paths == null || paths.length() == 0) {
        weka.core.logging.Logger.log(weka.core.logging.Logger.Level.WARNING,"[KnowledgeFlow] WARNING: no templates found in classpath");
      }
 else {
        String[] templates=paths.split(",");
        String[] desc=descriptions.split(",");
        if (templates.length != desc.length) {
          throw new Exception("Number of template descriptions does " + "not match number of templates.");
        }
        for (        String template : templates) {
          TEMPLATE_PATHS.add(template.trim());
        }
        for (        String d : desc) {
          TEMPLATE_DESCRIPTIONS.add(d.trim());
        }
      }
    }
 catch (    Exception ex) {
      JOptionPane.showMessageDialog(null,ex.getMessage(),"KnowledgeFlow",JOptionPane.ERROR_MESSAGE);
    }
  }
  if (!s_pluginManagerIntialized && BEAN_PLUGINS_PROPERTIES != null && BEAN_PLUGINS_PROPERTIES.size() > 0) {
    for (int i=0; i < BEAN_PLUGINS_PROPERTIES.size(); i++) {
      Properties tempP=BEAN_PLUGINS_PROPERTIES.get(i);
      String offscreenRenderers=tempP.getProperty("weka.gui.beans.OffscreenChartRenderer");
      if (offscreenRenderers != null && offscreenRenderers.length() > 0) {
        String[] parts=offscreenRenderers.split(",");
        for (        String renderer : parts) {
          renderer=renderer.trim();
          try {
            Object p=Class.forName(renderer).newInstance();
            if (p instanceof OffscreenChartRenderer) {
              String name=((OffscreenChartRenderer)p).rendererName();
              PluginManager.addPlugin("weka.gui.beans.OffscreenChartRenderer",name,renderer);
              weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,"[KnowledgeFlow] registering chart rendering " + "plugin: " + renderer);
            }
          }
 catch (          Exception ex) {
            weka.core.logging.Logger.log(weka.core.logging.Logger.Level.WARNING,"[KnowledgeFlow] WARNING: " + "unable to instantiate chart renderer \"" + renderer + "\"");
            ex.printStackTrace();
          }
        }
      }
      String templatePaths=tempP.getProperty("weka.gui.beans.KnowledgeFlow.templates");
      String templateDesc=tempP.getProperty("weka.gui.beans.KnowledgeFlow.templates.desc");
      if (templatePaths != null && templatePaths.length() > 0 && templateDesc != null && templateDesc.length() > 0) {
        String[] templates=templatePaths.split(",");
        String[] desc=templateDesc.split(",");
        if (templates.length == desc.length) {
          for (int kk=0; kk < templates.length; kk++) {
            String pth=templates[kk];
            String d=desc[kk];
            if (!TEMPLATE_PATHS.contains(pth)) {
              TEMPLATE_PATHS.add(pth.trim());
              TEMPLATE_DESCRIPTIONS.add(d.trim());
            }
          }
        }
      }
    }
    s_pluginManagerIntialized=true;
  }
}
}
