namespace weka.gui.beans;

class InstanceStreamToBatchMaker
{
  isA BeanCommon,Visible,InstanceListener,EventConstraints,DataSource;
  isA JPanel;
 depend java.awt.BorderLayout;
 depend java.beans.EventSetDescriptor;
 depend java.util.ArrayList;
 depend java.util.LinkedList;
 depend java.util.List;
 depend javax.swing.JPanel;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.gui.Logger;
/** 
 * For serialization
 */
private static final long serialVersionUID=-7037141087208627799L;

protected BeanVisual m_visual=new BeanVisual("InstanceStreamToBatchMaker",BeanVisual.ICON_PATH + "InstanceStreamToBatchMaker.gif",BeanVisual.ICON_PATH + "InstanceStreamToBatchMaker_animated.gif");

/** 
 * The log.
 */
private transient Logger m_log;

/** 
 * Component connected to us.
 */
private Object m_listenee;

private final ArrayList<DataSourceListener> m_dataListeners=new ArrayList<DataSourceListener>();

/** 
 * Collects up the instances.
 */
private List<Instance> m_batch;

private Instances m_structure;

public InstanceStreamToBatchMaker(){
  setLayout(new BorderLayout());
  add(m_visual,BorderLayout.CENTER);
}

/** 
 * Accept an instance to add to the batch.
 * @param e an <code>InstanceEvent</code> value
 */
@Override public void acceptInstance(InstanceEvent e){
  if (e.getStatus() == InstanceEvent.FORMAT_AVAILABLE) {
    m_batch=new LinkedList<Instance>();
    m_structure=e.getStructure();
    if (m_log != null) {
      m_log.logMessage("[InstanceStreamToBatch] passing on structure.");
    }
    DataSetEvent dse=new DataSetEvent(this,m_structure);
    notifyDataListeners(dse);
  }
 else   if (e.getStatus() == InstanceEvent.INSTANCE_AVAILABLE) {
    m_batch.add(e.getInstance());
  }
 else {
    if (e.getInstance() != null) {
      m_batch.add(e.getInstance());
    }
    Instances dataSet=new Instances(m_structure,m_batch.size());
    for (    Instance i : m_batch) {
      dataSet.add(i);
    }
    dataSet.compactify();
    m_batch=null;
    if (m_log != null) {
      m_log.logMessage("[InstanceStreamToBatch] sending batch to listeners.");
    }
    DataSetEvent dse=new DataSetEvent(this,dataSet);
    notifyDataListeners(dse);
  }
}

/** 
 * Returns true if, at this time, the object will accept a connection according to the supplied EventSetDescriptor
 * @param esd the EventSetDescriptor
 * @return true if the object will accept a connection
 */
@Override public boolean connectionAllowed(EventSetDescriptor esd){
  return connectionAllowed(esd.getName());
}

/** 
 * Returns true if, at this time, the object will accept a connection with respect to the named event
 * @param eventName the event
 * @return true if the object will accept a connection
 */
@Override public boolean connectionAllowed(String eventName){
  if (m_listenee != null || !eventName.equals("instance")) {
    return false;
  }
  return true;
}

/** 
 * Notify this object that it has been registered as a listener with a source with respect to the named event
 * @param eventName the event
 * @param source the source with which this object has been registered as alistener
 */
@Override public void connectionNotification(String eventName,Object source){
  if (connectionAllowed(eventName)) {
    m_listenee=source;
  }
}

/** 
 * Notify this object that it has been deregistered as a listener with a source with respect to the supplied event name
 * @param eventName the event
 * @param source the source with which this object has been registered as alistener
 */
@Override public void disconnectionNotification(String eventName,Object source){
  m_listenee=null;
}

/** 
 * Returns true if, at the current time, the named event could be generated.
 * @param eventName the name of the event in question
 * @return true if the named event could be generated
 */
@Override public boolean eventGeneratable(String eventName){
  if (!eventName.equals("dataSet")) {
    return false;
  }
  if (m_listenee == null) {
    return false;
  }
  if (m_listenee instanceof EventConstraints) {
    if (!((EventConstraints)m_listenee).eventGeneratable("instance")) {
      return false;
    }
  }
  return true;
}

/** 
 * Get the custom (descriptive) name for this bean (if one has been set)
 * @return the custom name (or the default name)
 */
@Override public String getCustomName(){
  return m_visual.getText();
}

/** 
 * Set a custom (descriptive) name for this bean
 * @param name the name to use
 */
@Override public void setCustomName(String name){
  m_visual.setText(name);
}

/** 
 * Set a logger
 * @param logger a <code>Logger</code> value
 */
@Override public void setLog(Logger logger){
  m_log=logger;
}

/** 
 * Returns true if. at this time, the bean is busy with some (i.e. perhaps a worker thread is performing some calculation).
 * @return true if the bean is busy.
 */
@Override public boolean isBusy(){
  return false;
}

/** 
 * Stop any action (if possible).
 */
@Override public void stop(){
}

/** 
 * Gets the visual appearance of this wrapper bean
 */
@Override public BeanVisual getVisual(){
  return m_visual;
}

/** 
 * Sets the visual appearance of this wrapper bean
 * @param newVisual a <code>BeanVisual</code> value
 */
@Override public void setVisual(BeanVisual newVisual){
  m_visual=newVisual;
}

/** 
 * Use the default visual appearance for this bean
 */
@Override public void useDefaultVisual(){
  m_visual.loadIcons(BeanVisual.ICON_PATH + "InstanceStreamToBatchMaker.gif",BeanVisual.ICON_PATH + "InstanceStreamToBatchMaker_animated.gif");
}

/** 
 * Notify all data source listeners.
 * @param tse the DataSetEvent to pass on.
 */
@SuppressWarnings("unchecked") protected void notifyDataListeners(DataSetEvent tse){
  ArrayList<DataSourceListener> l;
synchronized (this) {
    l=(ArrayList<DataSourceListener>)m_dataListeners.clone();
  }
  if (l.size() > 0) {
    for (int i=0; i < l.size(); i++) {
      l.get(i).acceptDataSet(tse);
    }
  }
}

@Override public synchronized void addDataSourceListener(DataSourceListener tsl){
  m_dataListeners.add(tsl);
  if (m_structure != null) {
    DataSetEvent e=new DataSetEvent(this,m_structure);
    tsl.acceptDataSet(e);
  }
}

@Override public synchronized void removeDataSourceListener(DataSourceListener tsl){
  m_dataListeners.remove(tsl);
}

@Override public synchronized void addInstanceListener(InstanceListener il){
}

@Override public synchronized void removeInstanceListener(InstanceListener il){
}
}
