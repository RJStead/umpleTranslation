namespace weka.classifiers.trees.j48;

class C45ModelSelection
{
  isA ModelSelection;
 depend java.util.Enumeration;
 depend weka.core.Attribute;
 depend weka.core.Instances;
 depend weka.core.RevisionUtils;
 depend weka.core.Utils;
/** 
 * for serialization 
 */
private static final long serialVersionUID=3372204862440821989L;

/** 
 * Minimum number of objects in interval. 
 */
protected final int m_minNoObj;

/** 
 * Use MDL correction? 
 */
protected final boolean m_useMDLcorrection;

/** 
 * All the training data 
 */
protected Instances m_allData;

/** 
 * Do not relocate split point to actual data value 
 */
protected final boolean m_doNotMakeSplitPointActualValue;

/** 
 * Initializes the split selection method with the given parameters.
 * @param minNoObj minimum number of instances that have to occur in at leasttwo subsets induced by split
 * @param allData FULL training dataset (necessary for selection of splitpoints).
 * @param useMDLcorrection whether to use MDL adjustement when finding splitson numeric attributes
 * @param doNotMakeSplitPointActualValue if true, split point is not relocatedby scanning the entire dataset for the closest data value
 */
public C45ModelSelection(int minNoObj,Instances allData,boolean useMDLcorrection,boolean doNotMakeSplitPointActualValue){
  m_minNoObj=minNoObj;
  m_allData=allData;
  m_useMDLcorrection=useMDLcorrection;
  m_doNotMakeSplitPointActualValue=doNotMakeSplitPointActualValue;
}

/** 
 * Sets reference to training data to null.
 */
public void cleanup(){
  m_allData=null;
}

/** 
 * Selects C4.5-type split for the given dataset.
 */
@Override public final ClassifierSplitModel selectModel(Instances data){
  double minResult;
  C45Split[] currentModel;
  C45Split bestModel=null;
  NoSplit noSplitModel=null;
  double averageInfoGain=0;
  int validModels=0;
  boolean multiVal=true;
  Distribution checkDistribution;
  Attribute attribute;
  double sumOfWeights;
  int i;
  try {
    checkDistribution=new Distribution(data);
    noSplitModel=new NoSplit(checkDistribution);
    if (Utils.sm(checkDistribution.total(),2 * m_minNoObj) || Utils.eq(checkDistribution.total(),checkDistribution.perClass(checkDistribution.maxClass()))) {
      return noSplitModel;
    }
    if (m_allData != null) {
      Enumeration<Attribute> enu=data.enumerateAttributes();
      while (enu.hasMoreElements()) {
        attribute=enu.nextElement();
        if ((attribute.isNumeric()) || (Utils.sm(attribute.numValues(),(0.3 * m_allData.numInstances())))) {
          multiVal=false;
          break;
        }
      }
    }
    currentModel=new C45Split[data.numAttributes()];
    sumOfWeights=data.sumOfWeights();
    for (i=0; i < data.numAttributes(); i++) {
      if (i != (data).classIndex()) {
        currentModel[i]=new C45Split(i,m_minNoObj,sumOfWeights,m_useMDLcorrection);
        currentModel[i].buildClassifier(data);
        if (currentModel[i].checkModel()) {
          if (m_allData != null) {
            if ((data.attribute(i).isNumeric()) || (multiVal || Utils.sm(data.attribute(i).numValues(),(0.3 * m_allData.numInstances())))) {
              averageInfoGain=averageInfoGain + currentModel[i].infoGain();
              validModels++;
            }
          }
 else {
            averageInfoGain=averageInfoGain + currentModel[i].infoGain();
            validModels++;
          }
        }
      }
 else {
        currentModel[i]=null;
      }
    }
    if (validModels == 0) {
      return noSplitModel;
    }
    averageInfoGain=averageInfoGain / validModels;
    minResult=0;
    for (i=0; i < data.numAttributes(); i++) {
      if ((i != (data).classIndex()) && (currentModel[i].checkModel())) {
        if ((currentModel[i].infoGain() >= (averageInfoGain - 1E-3)) && Utils.gr(currentModel[i].gainRatio(),minResult)) {
          bestModel=currentModel[i];
          minResult=currentModel[i].gainRatio();
        }
      }
    }
    if (Utils.eq(minResult,0)) {
      return noSplitModel;
    }
    bestModel.distribution().addInstWithUnknown(data,bestModel.attIndex());
    if ((m_allData != null) && (!m_doNotMakeSplitPointActualValue)) {
      bestModel.setSplitPoint(m_allData);
    }
    return bestModel;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}

/** 
 * Selects C4.5-type split for the given dataset.
 */
@Override public final ClassifierSplitModel selectModel(Instances train,Instances test){
  return selectModel(train);
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10531 $");
}
}
