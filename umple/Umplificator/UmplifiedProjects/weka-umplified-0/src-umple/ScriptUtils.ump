namespace weka.gui.scripting;

class ScriptUtils
{
 depend java.io.BufferedReader;
 depend java.io.BufferedWriter;
 depend java.io.File;
 depend java.io.FileInputStream;
 depend java.io.FileOutputStream;
 depend java.io.FileReader;
 depend java.io.FileWriter;
 depend java.io.IOException;
 depend java.io.InputStream;
 depend java.io.OutputStream;
/** 
 * Copies or moves files and directories (recursively). If targetLocation does not exist, it will be created. <p/> Original code from <a href="http://www.java-tips.org/java-se-tips/java.io/how-to-copy-a-directory-from-one-location-to-another-loc.html" target="_blank">Java-Tips.org</a>.
 * @param sourceLocation	the source file/dir
 * @param targetLocation	the target file/dir
 * @param move		if true then the source files/dirs get deletedas soon as copying finished
 * @throws IOException	if copying/moving fails
 */
protected static void copyOrMove(File sourceLocation,File targetLocation,boolean move) throws IOException {
  String[] children;
  int i;
  InputStream in;
  OutputStream out;
  byte[] buf;
  int len;
  if (sourceLocation.isDirectory()) {
    if (!targetLocation.exists())     targetLocation.mkdir();
    children=sourceLocation.list();
    for (i=0; i < children.length; i++) {
      copyOrMove(new File(sourceLocation,children[i]),new File(targetLocation,children[i]),move);
    }
    if (move)     sourceLocation.delete();
  }
 else {
    in=new FileInputStream(sourceLocation);
    if (targetLocation.isDirectory())     out=new FileOutputStream(targetLocation.getAbsolutePath() + File.separator + sourceLocation.getName());
 else     out=new FileOutputStream(targetLocation);
    buf=new byte[1024];
    while ((len=in.read(buf)) > 0)     out.write(buf,0,len);
    in.close();
    out.close();
    if (move)     sourceLocation.delete();
  }
}

/** 
 * Copies the file/directory (recursively).
 * @param sourceLocation	the source file/dir
 * @param targetLocation	the target file/dir
 * @throws IOException	if copying fails
 */
public static void copy(File sourceLocation,File targetLocation) throws IOException {
  copyOrMove(sourceLocation,targetLocation,false);
}

/** 
 * Moves the file/directory (recursively).
 * @param sourceLocation	the source file/dir
 * @param targetLocation	the target file/dir
 * @throws IOException	if moving fails
 */
public static void move(File sourceLocation,File targetLocation) throws IOException {
  copyOrMove(sourceLocation,targetLocation,true);
}

/** 
 * Saves the content to a file.
 * @param file		the file to save to
 * @param content		the content to save
 * @return			true if successfully saved
 */
public static boolean save(File file,String content){
  boolean result;
  BufferedWriter writer;
  writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(file));
    writer.write(content);
    writer.flush();
    result=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=false;
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return result;
}

/** 
 * Tries to load the file and return its content.
 * @param file	the file to open
 * @return		the content, otherwise null
 */
public static String load(File file){
  StringBuffer result;
  BufferedReader reader;
  String line;
  String newLine;
  result=new StringBuffer();
  newLine=System.getProperty("line.separator");
  reader=null;
  try {
    reader=new BufferedReader(new FileReader(file));
    while ((line=reader.readLine()) != null) {
      result.append(line);
      result.append(newLine);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=null;
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return ((result != null) ? result.toString() : null);
}
}
