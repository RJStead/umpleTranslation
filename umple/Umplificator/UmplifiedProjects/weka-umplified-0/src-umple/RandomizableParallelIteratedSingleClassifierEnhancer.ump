namespace weka.classifiers;

class RandomizableParallelIteratedSingleClassifierEnhancer
{
  isA Randomizable;
  isA ParallelIteratedSingleClassifierEnhancer;
 depend java.util.Collections;
 depend java.util.Enumeration;
 depend java.util.Vector;
 depend weka.core.Option;
 depend weka.core.Randomizable;
 depend weka.core.Utils;
/** 
 * For serialization
 */
private static final long serialVersionUID=1298141000373615374L;

/** 
 * The random number seed. 
 */
protected int m_Seed=1;

/** 
 * Returns an enumeration describing the available options.
 * @return an enumeration of all the available options.
 */
public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(1);
  newVector.addElement(new Option("\tRandom number seed.\n" + "\t(default 1)","S",1,"-S <num>"));
  newVector.addAll(Collections.list(super.listOptions()));
  return newVector.elements();
}

/** 
 * Parses a given list of options. Valid options are:<p> -W classname <br> Specify the full class name of the base learner.<p> -I num <br> Set the number of iterations (default 10). <p> -S num <br> Set the random number seed (default 1). <p> Options after -- are passed to the designated classifier.<p>
 * @param options the list of options as an array of strings
 * @exception Exception if an option is not supported
 */
public void setOptions(String[] options) throws Exception {
  String seed=Utils.getOption('S',options);
  if (seed.length() != 0) {
    setSeed(Integer.parseInt(seed));
  }
 else {
    setSeed(1);
  }
  super.setOptions(options);
}

/** 
 * Gets the current settings of the classifier.
 * @return an array of strings suitable for passing to setOptions
 */
public String[] getOptions(){
  Vector<String> options=new Vector<String>();
  options.add("-S");
  options.add("" + getSeed());
  Collections.addAll(options,super.getOptions());
  return options.toArray(new String[0]);
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable fordisplaying in the explorer/experimenter gui
 */
public String seedTipText(){
  return "The random number seed to be used.";
}

/** 
 * Set the seed for random number generation.
 * @param seed the seed
 */
public void setSeed(int seed){
  m_Seed=seed;
}

/** 
 * Gets the seed for the random number generations
 * @return the seed for the random number generation
 */
public int getSeed(){
  return m_Seed;
}
}
