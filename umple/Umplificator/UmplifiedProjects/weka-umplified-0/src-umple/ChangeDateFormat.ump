namespace weka.filters.unsupervised.attribute;

class ChangeDateFormat
{
  isA UnsupervisedFilter,StreamableFilter,OptionHandler;
  isA Filter;
 depend java.text.ParseException;
 depend java.text.SimpleDateFormat;
 depend java.util.ArrayList;
 depend java.util.Enumeration;
 depend java.util.Vector;
 depend weka.core.Attribute;
 depend weka.core.Capabilities;
 depend weka.core.Capabilities.Capability;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.Option;
 depend weka.core.OptionHandler;
 depend weka.core.RevisionUtils;
 depend weka.core.SingleIndex;
 depend weka.core.UnsupportedAttributeTypeException;
 depend weka.core.Utils;
 depend weka.filters.Filter;
 depend weka.filters.StreamableFilter;
 depend weka.filters.UnsupervisedFilter;
/** 
 * for serialization 
 */
static final long serialVersionUID=-1609344074013448737L;

/** 
 * The default output date format. Corresponds to ISO-8601 format. 
 */
private static final SimpleDateFormat DEFAULT_FORMAT=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

/** 
 * The attribute's index setting. 
 */
private final SingleIndex m_AttIndex=new SingleIndex("last");

/** 
 * The output date format. 
 */
private SimpleDateFormat m_DateFormat=DEFAULT_FORMAT;

/** 
 * The output attribute. 
 */
private Attribute m_OutputAttribute;

/** 
 * Returns a string describing this filter
 * @return a description of the filter suitable for displaying in theexplorer/experimenter gui
 */
public String globalInfo(){
  return "Changes the date format used by a date attribute. This is most " + "useful for converting to a format with less precision, for example, " + "from an absolute date to day of year, etc. This changes the format "+ "string, and changes the date values to those that would be parsed "+ "by the new format.";
}

/** 
 * Returns the Capabilities of this filter.
 * @return the capabilities of this object
 * @see Capabilities
 */
@Override public Capabilities getCapabilities(){
  Capabilities result=super.getCapabilities();
  result.disableAll();
  result.enableAllAttributes();
  result.enable(Capability.MISSING_VALUES);
  result.enableAllClasses();
  result.enable(Capability.MISSING_CLASS_VALUES);
  result.enable(Capability.NO_CLASS);
  return result;
}

/** 
 * Sets the format of the input instances.
 * @param instanceInfo an Instances object containing the input instancestructure (any instances contained in the object are ignored - only the structure is required).
 * @return true if the outputFormat may be collected immediately
 * @throws Exception if the input format can't be set successfully
 */
@Override public boolean setInputFormat(Instances instanceInfo) throws Exception {
  super.setInputFormat(instanceInfo);
  m_AttIndex.setUpper(instanceInfo.numAttributes() - 1);
  if (!instanceInfo.attribute(m_AttIndex.getIndex()).isDate()) {
    throw new UnsupportedAttributeTypeException("Chosen attribute not date.");
  }
  setOutputFormat();
  return true;
}

/** 
 * Input an instance for filtering.
 * @param instance the input instance
 * @return true if the filtered instance may now be collected with output().
 * @throws Exception if the input format was not set or the date format cannotbe parsed
 */
@Override public boolean input(Instance instance) throws Exception {
  if (getInputFormat() == null) {
    throw new IllegalStateException("No input instance format defined");
  }
  if (m_NewBatch) {
    resetQueue();
    m_NewBatch=false;
  }
  Instance newInstance=(Instance)instance.copy();
  int index=m_AttIndex.getIndex();
  if (!newInstance.isMissing(index)) {
    double value=instance.value(index);
    try {
      value=m_OutputAttribute.parseDate(m_OutputAttribute.formatDate(value));
    }
 catch (    ParseException pe) {
      throw new RuntimeException("Output date format couldn't parse its own output!!");
    }
    newInstance.setValue(index,value);
  }
  push(newInstance);
  return true;
}

/** 
 * Returns an enumeration describing the available options
 * @return an enumeration of all the available options
 */
@Override public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(2);
  newVector.addElement(new Option("\tSets the attribute index (default last).","C",1,"-C <col>"));
  newVector.addElement(new Option("\tSets the output date format string (default corresponds to ISO-8601).","F",1,"-F <value index>"));
  return newVector.elements();
}

/** 
 * Parses a given list of options. <p/> <!-- options-start --> Valid options are: <p/> <pre> -C &lt;col&gt; Sets the attribute index (default last). </pre> <pre> -F &lt;value index&gt; Sets the output date format string (default corresponds to ISO-8601). </pre> <!-- options-end -->
 * @param options the list of options as an array of strings
 * @throws Exception if an option is not supported
 */
@Override public void setOptions(String[] options) throws Exception {
  String attIndex=Utils.getOption('C',options);
  if (attIndex.length() != 0) {
    setAttributeIndex(attIndex);
  }
 else {
    setAttributeIndex("last");
  }
  String formatString=Utils.getOption('F',options);
  if (formatString.length() != 0) {
    setDateFormat(formatString);
  }
 else {
    setDateFormat(DEFAULT_FORMAT);
  }
  if (getInputFormat() != null) {
    setInputFormat(getInputFormat());
  }
  Utils.checkForRemainingOptions(options);
}

/** 
 * Gets the current settings of the filter.
 * @return an array of strings suitable for passing to setOptions
 */
@Override public String[] getOptions(){
  Vector<String> options=new Vector<String>();
  options.add("-C");
  options.add("" + getAttributeIndex());
  options.add("-F");
  options.add("" + getDateFormat().toPattern());
  return options.toArray(new String[0]);
}

/** 
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String attributeIndexTipText(){
  return "Sets which attribute to process. This " + "attribute must be of type date (\"first\" and \"last\" are valid values)";
}

/** 
 * Gets the index of the attribute converted.
 * @return the index of the attribute
 */
public String getAttributeIndex(){
  return m_AttIndex.getSingleIndex();
}

/** 
 * Sets the index of the attribute used.
 * @param attIndex the index of the attribute
 */
public void setAttributeIndex(String attIndex){
  m_AttIndex.setSingleIndex(attIndex);
}

/** 
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String dateFormatTipText(){
  return "The date format to change to. This should be a " + "format understood by Java's SimpleDateFormat class.";
}

/** 
 * Get the date format used in output.
 * @return the output date format.
 */
public SimpleDateFormat getDateFormat(){
  return m_DateFormat;
}

/** 
 * Sets the output date format.
 * @param dateFormat the output date format.
 */
public void setDateFormat(String dateFormat){
  setDateFormat(new SimpleDateFormat(dateFormat));
}

/** 
 * Sets the output date format.
 * @param dateFormat the output date format.
 */
public void setDateFormat(SimpleDateFormat dateFormat){
  if (dateFormat == null) {
    throw new NullPointerException();
  }
  m_DateFormat=dateFormat;
}

/** 
 * Set the output format. Changes the format of the specified date attribute.
 */
private void setOutputFormat(){
  ArrayList<Attribute> newAtts=new ArrayList<Attribute>(getInputFormat().numAttributes());
  for (int j=0; j < getInputFormat().numAttributes(); j++) {
    Attribute att=getInputFormat().attribute(j);
    if (j == m_AttIndex.getIndex()) {
      newAtts.add(new Attribute(att.name(),getDateFormat().toPattern()));
    }
 else {
      newAtts.add((Attribute)att.copy());
    }
  }
  Instances newData=new Instances(getInputFormat().relationName(),newAtts,0);
  newData.setClassIndex(getInputFormat().classIndex());
  m_OutputAttribute=newData.attribute(m_AttIndex.getIndex());
  setOutputFormat(newData);
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10215 $");
}

/** 
 * Main method for testing this class.
 * @param argv should contain arguments to the filter: use -h for help
 */
public static void main(String[] argv){
  runFilter(new ChangeDateFormat(),argv);
}
}
