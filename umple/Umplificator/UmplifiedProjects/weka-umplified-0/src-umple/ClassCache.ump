namespace weka.core;

class DirectoryFilter
{
  isA FileFilter;
 depend java.io.File;
 depend java.io.FileFilter;
 depend java.net.URISyntaxException;
 depend java.net.URL;
 depend java.net.URLClassLoader;
 depend java.util.ArrayList;
 depend java.util.Collections;
 depend java.util.Enumeration;
 depend java.util.HashSet;
 depend java.util.Hashtable;
 depend java.util.Iterator;
 depend java.util.jar.Attributes;
 depend java.util.jar.JarEntry;
 depend java.util.jar.JarFile;
 depend java.util.jar.Manifest;
/** 
 * whether to output some debug information. 
 */
public final static boolean VERBOSE=false;

/** 
 * the key for the default package. 
 */
public final static String DEFAULT_PACKAGE="DEFAULT";

/** 
 * for caching all classes on the class path (package-name &lt;-&gt; HashSet with classnames).
 */
protected Hashtable<String,HashSet<String>> m_Cache;

/** 
 * Checks whether the file is a class.
 * @param pathname the file to check
 * @return true if a class file
 */
@Override public boolean accept(File pathname){
  return pathname.getName().endsWith(".class");
}

/** 
 * Checks whether the file is a directory.
 * @param pathname the file to check
 * @return true if a directory
 */
@Override public boolean accept(File pathname){
  return pathname.isDirectory();
}

/** 
 * Initializes the cache.
 */
public ClassCache(){
  super();
  initialize();
}

/** 
 * Fixes the classname, turns "/" and "\" into "." and removes ".class".
 * @param classname the classname to process
 * @return the processed classname
 */
protected String cleanUp(String classname){
  String result;
  result=classname;
  if (result.indexOf("/") > -1) {
    result=result.replace("/",".");
  }
  if (result.indexOf("\\") > -1) {
    result=result.replace("\\",".");
  }
  if (result.endsWith(".class")) {
    result=result.substring(0,result.length() - 6);
  }
  return result;
}

/** 
 * Extracts the package name from the (clean) classname.
 * @param classname the classname to extract the package from
 * @return the package name
 */
protected String extractPackage(String classname){
  if (classname.indexOf(".") > -1) {
    return classname.substring(0,classname.lastIndexOf("."));
  }
 else {
    return DEFAULT_PACKAGE;
  }
}

/** 
 * Adds the classname to the cache.
 * @param classname the classname, automatically removes ".class" and turns"/" or "\" into "."
 * @return true if adding changed the cache
 */
public boolean add(String classname){
  String pkgname;
  HashSet<String> names;
  classname=cleanUp(classname);
  pkgname=extractPackage(classname);
  if (!m_Cache.containsKey(pkgname)) {
    m_Cache.put(pkgname,new HashSet<String>());
  }
  names=m_Cache.get(pkgname);
  return names.add(classname);
}

/** 
 * Removes the classname from the cache.
 * @param classname the classname to remove
 * @return true if the removal changed the cache
 */
public boolean remove(String classname){
  String pkgname;
  HashSet<String> names;
  classname=cleanUp(classname);
  pkgname=extractPackage(classname);
  names=m_Cache.get(pkgname);
  if (names != null) {
    return names.remove(classname);
  }
 else {
    return false;
  }
}

/** 
 * Fills the class cache with classes in the specified directory.
 * @param prefix the package prefix so far, null for default package
 * @param dir the directory to search
 */
protected void initFromDir(String prefix,File dir){
  File[] files;
  files=dir.listFiles(new ClassFileFilter());
  for (  File file : files) {
    if (prefix == null) {
      add(file.getName());
    }
 else {
      add(prefix + "." + file.getName());
    }
  }
  files=dir.listFiles(new DirectoryFilter());
  for (  File file : files) {
    if (prefix == null) {
      initFromDir(file.getName(),file);
    }
 else {
      initFromDir(prefix + "." + file.getName(),file);
    }
  }
}

/** 
 * Fills the class cache with classes in the specified directory.
 * @param dir the directory to search
 */
protected void initFromDir(File dir){
  if (VERBOSE) {
    System.out.println("Analyzing directory: " + dir);
  }
  initFromDir(null,dir);
}

/** 
 * Analyzes the MANIFEST.MF file of a jar whether additional jars are listed in the "Class-Path" key.
 * @param manifest the manifest to analyze
 */
protected void initFromManifest(Manifest manifest){
  Attributes atts;
  String cp;
  String[] parts;
  atts=manifest.getMainAttributes();
  cp=atts.getValue("Class-Path");
  if (cp == null) {
    return;
  }
  parts=cp.split(" ");
  for (  String part : parts) {
    if (part.trim().length() == 0) {
      return;
    }
    if (part.toLowerCase().endsWith(".jar")) {
      initFromClasspathPart(part);
    }
  }
}

/** 
 * Fills the class cache with classes from the specified jar.
 * @param file the jar to inspect
 */
protected void initFromJar(File file){
  JarFile jar;
  JarEntry entry;
  Enumeration<JarEntry> enm;
  if (VERBOSE) {
    System.out.println("Analyzing jar: " + file);
  }
  if (!file.exists()) {
    System.out.println("Jar does not exist: " + file);
    return;
  }
  try {
    jar=new JarFile(file);
    enm=jar.entries();
    while (enm.hasMoreElements()) {
      entry=enm.nextElement();
      if (entry.getName().endsWith(".class")) {
        add(entry.getName());
      }
    }
    initFromManifest(jar.getManifest());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}

/** 
 * Returns all the stored packages.
 * @return the package names
 */
public Enumeration<String> packages(){
  return m_Cache.keys();
}

/** 
 * Returns all the classes for the given package.
 * @param pkgname the package to get the classes for
 * @return the classes (sorted by name)
 */
public HashSet<String> getClassnames(String pkgname){
  if (m_Cache.containsKey(pkgname)) {
    return m_Cache.get(pkgname);
  }
 else {
    return new HashSet<String>();
  }
}

/** 
 * Analyzes a part of the classpath.
 * @param part the part to analyze
 */
protected void initFromClasspathPart(String part){
  File file;
  file=null;
  if (part.startsWith("file:")) {
    part=part.replace(" ","%20");
    try {
      file=new File(new java.net.URI(part));
    }
 catch (    URISyntaxException e) {
      System.err.println("Failed to generate URI: " + part);
      e.printStackTrace();
    }
  }
 else {
    file=new File(part);
  }
  if (file == null) {
    System.err.println("Skipping: " + part);
    return;
  }
  if (file.isDirectory()) {
    initFromDir(file);
  }
 else   if (file.exists()) {
    initFromJar(file);
  }
}

/** 
 * Initializes the cache.
 */
protected void initialize(){
  String part;
  URLClassLoader sysLoader;
  URL[] urls;
  m_Cache=new Hashtable<String,HashSet<String>>();
  sysLoader=(URLClassLoader)getClass().getClassLoader();
  urls=sysLoader.getURLs();
  for (  URL url : urls) {
    if (VERBOSE) {
      System.out.println("Classpath-part: " + part);
    }
    part=url.toString();
    initFromClasspathPart(part);
  }
}

/** 
 * Find all classes that have the supplied matchText String in their suffix.
 * @param matchText the text to match
 * @return an array list of matching fully qualified class names.
 */
public ArrayList<String> find(String matchText){
  ArrayList<String> result;
  Enumeration<String> packages;
  Iterator<String> names;
  String name;
  result=new ArrayList<String>();
  packages=m_Cache.keys();
  while (packages.hasMoreElements()) {
    names=m_Cache.get(packages.nextElement()).iterator();
    while (names.hasNext()) {
      name=names.next();
      if (name.contains(matchText)) {
        result.add(name);
      }
    }
  }
  if (result.size() > 1) {
    Collections.sort(result);
  }
  return result;
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10528 $");
}

/** 
 * For testing only.
 * @param args ignored
 */
public static void main(String[] args){
  ClassCache cache=new ClassCache();
  Enumeration<String> packages=cache.packages();
  while (packages.hasMoreElements()) {
    String key=packages.nextElement();
    System.out.println(key + ": " + cache.getClassnames(key).size());
  }
}
}
