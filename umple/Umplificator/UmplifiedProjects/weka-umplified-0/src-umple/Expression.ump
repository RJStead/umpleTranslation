namespace weka.datagenerators.classifiers.regression;

class Expression
{
  isA MexicanHat;
 depend java.util.ArrayList;
 depend java.util.Collections;
 depend java.util.Enumeration;
 depend java.util.Random;
 depend java.util.Vector;
 depend weka.core.Attribute;
 depend weka.core.DenseInstance;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.Option;
 depend weka.core.RevisionUtils;
 depend weka.core.Utils;
 depend weka.filters.unsupervised.attribute.AddExpression;
/** 
 * for serialization 
 */
static final long serialVersionUID=-4237047357682277211L;

/** 
 * the expression for computing y 
 */
protected String m_Expression;

/** 
 * the filter for generating y out of x 
 */
protected AddExpression m_Filter;

/** 
 * the input data structure for the filter 
 */
protected Instances m_RawData;

/** 
 * initializes the generator
 */
public Expression(){
  super();
  setExpression(defaultExpression());
}

/** 
 * Returns a string describing this data generator.
 * @return a description of the data generator suitable for displaying in theexplorer/experimenter gui
 */
@Override public String globalInfo(){
  return "A data generator for generating y according to a given expression " + "out of randomly generated x.\n" + "E.g., the mexican hat can be generated like this:\n"+ "   sin(abs(a1)) / abs(a1)\n"+ "In addition to this function, the amplitude can be changed and "+ "gaussian noise can be added.";
}

/** 
 * Returns an enumeration describing the available options.
 * @return an enumeration of all the available options
 */
@Override public Enumeration<Option> listOptions(){
  Vector<Option> result=enumToVector(super.listOptions());
  result.addElement(new Option("\tThe expression to use for generating y out of x \n" + "\t(default " + defaultExpression() + ").","E",1,"-E <expression>"));
  return result.elements();
}

/** 
 * Parses a list of options for this object. <p/> <!-- options-start --> Valid options are: <p/> <pre> -h Prints this help. </pre> <pre> -o &lt;file&gt; The name of the output file, otherwise the generated data is printed to stdout. </pre> <pre> -r &lt;name&gt; The name of the relation. </pre> <pre> -d Whether to print debug informations. </pre> <pre> -S The seed for random function (default 1) </pre> <pre> -n &lt;num&gt; The number of examples to generate (default 100) </pre> <pre> -A &lt;num&gt; The amplitude multiplier (default 1.0). </pre> <pre> -R &lt;num&gt;..&lt;num&gt; The range x is randomly drawn from (default -10.0..10.0). </pre> <pre> -N &lt;num&gt; The noise rate (default 0.0). </pre> <pre> -V &lt;num&gt; The noise variance (default 1.0). </pre> <pre> -E &lt;expression&gt; The expression to use for generating y out of x  (default sin(abs(a1)) / abs(a1)). </pre> <!-- options-end -->
 * @param options the list of options as an array of strings
 * @exception Exception if an option is not supported
 */
@Override public void setOptions(String[] options) throws Exception {
  String tmpStr;
  super.setOptions(options);
  tmpStr=Utils.getOption('E',options);
  if (tmpStr.length() != 0) {
    setExpression(tmpStr);
  }
 else {
    setExpression(defaultExpression());
  }
}

/** 
 * Gets the current settings of the datagenerator BIRCHCluster.
 * @return an array of strings suitable for passing to setOptions
 */
@Override public String[] getOptions(){
  Vector<String> result;
  String[] options;
  result=new Vector<String>();
  options=super.getOptions();
  Collections.addAll(result,options);
  result.add("-E");
  result.add("" + getExpression());
  return result.toArray(new String[result.size()]);
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
@Override public String amplitudeTipText(){
  return "The amplitude to multiply the y value with.";
}

/** 
 * returns the default expression
 * @return the default expression
 */
protected String defaultExpression(){
  return "sin(abs(a1)) / abs(a1)";
}

/** 
 * Gets the mathematical expression for generating y out of x
 * @return the expression for computing y
 */
public String getExpression(){
  return m_Expression;
}

/** 
 * Sets the mathematical expression to generate y out of x.
 * @param value the expression for computing y
 */
public void setExpression(String value){
  if (value.length() != 0) {
    m_Expression=value;
  }
 else {
    throw new IllegalArgumentException("An expression has to be provided!");
  }
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String expressionTipText(){
  return "The expression for generating y out of x.";
}

/** 
 * Return if single mode is set for the given data generator mode depends on option setting and or generator type.
 * @return single mode flag
 * @throws Exception if mode is not set yet
 */
@Override public boolean getSingleModeFlag() throws Exception {
  return true;
}

/** 
 * Initializes the format for the dataset produced. Must be called before the generateExample or generateExamples methods are used. Re-initializes the random number generator with the given seed.
 * @return the format for the dataset
 * @throws Exception if the generating of the format failed
 * @see #getSeed()
 */
@Override public Instances defineDataFormat() throws Exception {
  ArrayList<Attribute> atts;
  atts=new ArrayList<Attribute>();
  atts.add(new Attribute("x"));
  m_RawData=new Instances(getRelationNameToUse(),atts,0);
  m_Filter=new AddExpression();
  m_Filter.setName("y");
  m_Filter.setExpression(getExpression());
  m_Filter.setInputFormat(m_RawData);
  return super.defineDataFormat();
}

/** 
 * Generates one example of the dataset.
 * @return the generated example
 * @throws Exception if the format of the dataset is not yet defined
 * @throws Exception if the generator only works with generateExamples whichmeans in non single mode
 */
@Override public Instance generateExample() throws Exception {
  Instance result;
  Random rand;
  double x;
  double y;
  double[] atts;
  Instance inst;
  result=null;
  rand=getRandom();
  if (m_DatasetFormat == null) {
    throw new Exception("Dataset format not defined.");
  }
  x=rand.nextDouble();
  x=x * (getMaxRange() - getMinRange()) + getMinRange();
  atts=new double[1];
  atts[0]=x;
  inst=new DenseInstance(1.0,atts);
  m_Filter.input(inst);
  m_Filter.batchFinished();
  inst=m_Filter.output();
  y=inst.value(1) + getAmplitude() * m_NoiseRandom.nextGaussian() * getNoiseRate()* getNoiseVariance();
  atts=new double[m_DatasetFormat.numAttributes()];
  atts[0]=x;
  atts[1]=y;
  result=new DenseInstance(1.0,atts);
  result.setDataset(m_DatasetFormat);
  return result;
}

/** 
 * Generates all examples of the dataset. Re-initializes the random number generator with the given seed, before generating instances.
 * @return the generated dataset
 * @throws Exception if the format of the dataset is not yet defined
 * @throws Exception if the generator only works with generateExample, whichmeans in single mode
 * @see #getSeed()
 */
@Override public Instances generateExamples() throws Exception {
  Instances result;
  int i;
  result=new Instances(m_DatasetFormat,0);
  m_Random=new Random(getSeed());
  for (i=0; i < getNumExamplesAct(); i++) {
    result.add(generateExample());
  }
  return result;
}

/** 
 * Generates a comment string that documentates the data generator. By default this string is added at the beginning of the produced output as ARFF file type, next after the options.
 * @return string contains info about the generated rules
 */
@Override public String generateStart(){
  return "";
}

/** 
 * Generates a comment string that documentats the data generator. By default this string is added at the end of theproduces output as ARFF file type.
 * @return string contains info about the generated rules
 * @throws Exception if the generating of the documentaion fails
 */
@Override public String generateFinished() throws Exception {
  return "";
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10203 $");
}

/** 
 * Main method for testing this class.
 * @param args should contain arguments for the data producer:
 */
public static void main(String[] args){
  runDataGenerator(new Expression(),args);
}
}
