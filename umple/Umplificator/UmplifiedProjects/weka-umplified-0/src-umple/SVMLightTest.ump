namespace weka.core.converters;

class SVMLightTest
{
  isA AbstractFileConverterTest;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
/** 
 * Constructs the <code>SVMLightTest</code>.
 * @param name the name of the test class
 */
public SVMLightTest(String name){
  super(name);
}

/** 
 * returns the loader used in the tests.
 * @return the configured loader
 */
public AbstractLoader getLoader(){
  return new SVMLightLoader();
}

/** 
 * returns the saver used in the tests.
 * @return the configured saver
 */
public AbstractSaver getSaver(){
  return new SVMLightSaver();
}

/** 
 * Compare two datasets to see if they differ. Skips the equalHeaders method, since the SVMLight format doesn't have any notion of attribute names.
 * @param data1 one set of instances
 * @param data2 the other set of instances
 * @throws Exception if the datasets differ
 */
protected void compareDatasets(Instances data1,Instances data2) throws Exception {
  if (!(data2.numInstances() == data1.numInstances())) {
    throw new Exception("number of instances has changed");
  }
  for (int i=0; i < data2.numInstances(); i++) {
    Instance orig=data1.instance(i);
    Instance copy=data2.instance(i);
    for (int j=0; j < orig.numAttributes(); j++) {
      if (orig.isMissing(j)) {
        if (!copy.isMissing(j)) {
          throw new Exception("instances have changed");
        }
      }
 else       if (orig.value(j) != copy.value(j)) {
        throw new Exception("instances have changed");
      }
      if (orig.weight() != copy.weight()) {
        throw new Exception("instance weights have changed");
      }
    }
  }
}

/** 
 * returns a test suite.
 * @return the test suite
 */
public static Test suite(){
  return new TestSuite(SVMLightTest.class);
}

/** 
 * for running the test from commandline.
 * @param args the commandline arguments - ignored
 */
public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
