namespace weka.gui.beans;

class XMLFileBasedKFMetaStore
{
  isA KFMetaStore;
 depend java.io.File;
 depend java.io.IOException;
 depend java.util.HashSet;
 depend java.util.LinkedHashMap;
 depend java.util.Map;
 depend java.util.Set;
 depend weka.core.WekaPackageManager;
 depend weka.core.xml.XMLBasicSerialization;
/** 
 * The default location for the XML files 
 */
public static final String DEFAULT_STORE_LOCATION=WekaPackageManager.WEKA_HOME.toString() + File.separator + "kfMetaStore";

/** 
 * The current home of the store 
 */
protected File m_storeHome=new File(DEFAULT_STORE_LOCATION);

/** 
 * True if the store home has been successfully established 
 */
protected boolean m_storeDirOK;

/** 
 * Lookup for entries in the stores - just holds entry names and File paths 
 */
protected Map<String,Map<String,File>> m_stores=new LinkedHashMap<String,Map<String,File>>();

/** 
 * Establish the home directory for the store
 * @throws IOException if a problem occurs
 */
protected synchronized void establishStoreHome() throws IOException {
  if (m_storeDirOK) {
    return;
  }
  if (!m_storeHome.exists()) {
    if (!m_storeHome.mkdir()) {
      throw new IOException("Unable to create the metastore directory: " + m_storeHome.toString());
    }
  }
  if (!m_storeHome.isDirectory()) {
    throw new IOException("The metastore (" + m_storeHome + ") seems to exist, but it isn't a directory!");
  }
  m_storeDirOK=true;
  lockStore();
  File[] contents=m_storeHome.listFiles();
  for (  File f : contents) {
    if (f.isDirectory()) {
      Map<String,File> store=new LinkedHashMap<String,File>();
      m_stores.put(f.getName(),store);
      File[] storeEntries=f.listFiles();
      for (      File se : storeEntries) {
        store.put(se.getName(),se);
      }
    }
  }
  unlockStore();
}

@Override public Set<String> listMetaStores() throws IOException {
  return m_stores.keySet();
}

@Override public Set<String> listMetaStoreEntries(String storeName) throws IOException {
  establishStoreHome();
  Set<String> results=new HashSet<String>();
  Map<String,File> store=m_stores.get(storeName);
  if (store != null) {
    results.addAll(store.keySet());
  }
  return results;
}

@Override public synchronized Set<String> listMetaStoreEntries(String storeName,String prefix) throws IOException {
  establishStoreHome();
  Set<String> matches=new HashSet<String>();
  Map<String,File> store=m_stores.get(storeName);
  if (store != null) {
    for (    Map.Entry<String,File> e : store.entrySet()) {
      if (e.getKey().startsWith(prefix)) {
        matches.add(e.getKey());
      }
    }
  }
  return matches;
}

@Override public Object getEntry(String storeName,String name,Class<?> clazz) throws IOException {
  establishStoreHome();
  Map<String,File> store=m_stores.get(storeName);
  if (store != null) {
    if (store.containsKey(name)) {
      File toLoad=store.get(name);
      try {
        lockStore();
        XMLBasicSerialization deserializer=new XMLBasicSerialization();
        Object loaded=deserializer.read(toLoad);
        if (loaded.getClass().equals(clazz)) {
          throw new IOException("Deserialized entry (" + loaded.getClass().getName() + ") was not "+ "the expected class: "+ clazz.getName());
        }
        return loaded;
      }
 catch (      Exception ex) {
        throw new IOException(ex);
      }
 finally {
        unlockStore();
      }
    }
  }
  return null;
}

@Override public void createStore(String storeName) throws IOException {
  File store=new File(m_storeHome,storeName);
  if (store.exists()) {
    throw new IOException("Meta store '" + storeName + "' already exists!");
  }
  lockStore();
  try {
    if (!store.mkdir()) {
      throw new IOException("Unable to create meta store '" + storeName + "'");
    }
  }
  finally {
    unlockStore();
  }
}

@Override public synchronized void storeEntry(String storeName,String name,Object toStore) throws IOException {
  establishStoreHome();
  Map<String,File> store=m_stores.get(storeName);
  if (store == null) {
    createStore(storeName);
    store=new LinkedHashMap<String,File>();
    m_stores.put(storeName,store);
  }
  File loc=new File(m_storeHome.toString() + File.separator + storeName,name);
  store.put(name,loc);
  try {
    lockStore();
    XMLBasicSerialization serializer=new XMLBasicSerialization();
    serializer.write(loc,toStore);
  }
 catch (  Exception ex) {
    throw new IOException(ex);
  }
 finally {
    unlockStore();
  }
}

/** 
 * Lock the store
 * @throws IOException if a problem occurs
 */
protected void lockStore() throws IOException {
  int totalWaitTime=0;
  while (true) {
    File lock=new File(m_storeHome,".lock");
    if (lock.createNewFile()) {
      return;
    }
    try {
      Thread.sleep(200);
    }
 catch (    InterruptedException ex) {
      throw new RuntimeException(ex);
    }
    totalWaitTime+=200;
    if (totalWaitTime > 5000) {
      throw new IOException("Unable to lock store within 5 seconds");
    }
  }
}

protected void unlockStore(){
  File lock=new File(m_storeHome,".lock");
  lock.delete();
}
}
