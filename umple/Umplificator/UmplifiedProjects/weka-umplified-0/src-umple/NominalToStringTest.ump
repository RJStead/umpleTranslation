namespace weka.filters.unsupervised.attribute;

class NominalToStringTest
{
  isA AbstractFilterTest;
 depend weka.classifiers.meta.FilteredClassifier;
 depend weka.classifiers.rules.ZeroR;
 depend weka.core.Attribute;
 depend weka.core.Instances;
 depend weka.core.TestInstances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
public NominalToStringTest(String name){
  super(name);
}

/** 
 * Creates an example NominalToString 
 */
public Filter getFilter(){
  NominalToString f=new NominalToString();
  f.setAttributeIndexes("2");
  return f;
}

/** 
 * returns the configured FilteredClassifier. Since the base classifier is determined heuristically, derived tests might need to adjust it.
 * @return the configured FilteredClassifier
 */
protected FilteredClassifier getFilteredClassifier(){
  FilteredClassifier result;
  result=super.getFilteredClassifier();
  ((NominalToString)result.getFilter()).setAttributeIndexes("1");
  result.setClassifier(new ZeroR());
  return result;
}

/** 
 * returns data generated for the FilteredClassifier test
 * @return		the dataset for the FilteredClassifier
 * @throws Exception	if generation of data fails
 */
protected Instances getFilteredClassifierData() throws Exception {
  TestInstances test;
  Instances result;
  test=TestInstances.forCapabilities(m_FilteredClassifier.getCapabilities());
  test.setNumRelational(0);
  test.setClassIndex(TestInstances.CLASS_IS_LAST);
  result=test.generate();
  return result;
}

public void testTypical(){
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  assertEquals("Attribute type should now be STRING",Attribute.STRING,result.attribute(1).type());
  assertEquals(4,result.attribute(1).numValues());
}

public void testMissing(){
  ((NominalToString)m_Filter).setAttributeIndexes("5");
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  assertEquals("Attribute type should now be STRING",Attribute.STRING,result.attribute(4).type());
  assertEquals(5,result.attribute(4).numValues());
  for (int i=0; i < result.numInstances(); i++) {
    assertTrue("Missing values should be preserved",m_Instances.instance(i).isMissing(4) == result.instance(i).isMissing(4));
  }
}

/** 
 * tests the filter in conjunction with the FilteredClassifier
 */
public void testFilteredClassifier(){
  try {
    Instances data=getFilteredClassifierData();
    for (int i=0; i < data.numAttributes(); i++) {
      if (data.classIndex() == i)       continue;
      if (data.attribute(i).isNominal()) {
        ((NominalToString)m_FilteredClassifier.getFilter()).setAttributeIndexes("" + (i + 1));
        break;
      }
    }
  }
 catch (  Exception e) {
    fail("Problem setting up test for FilteredClassifier: " + e.toString());
  }
  super.testFilteredClassifier();
}

public static Test suite(){
  return new TestSuite(NominalToStringTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
