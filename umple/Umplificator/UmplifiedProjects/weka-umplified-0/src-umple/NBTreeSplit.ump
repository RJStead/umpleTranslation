namespace weka.classifiers.trees.j48;

class NBTreeSplit
{
  isA ClassifierSplitModel;
 depend java.util.Random;
 depend weka.classifiers.bayes.NaiveBayesUpdateable;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.RevisionUtils;
 depend weka.filters.Filter;
 depend weka.filters.supervised.attribute.Discretize;
/** 
 * for serialization 
 */
private static final long serialVersionUID=8922627123884975070L;

/** 
 * Desired number of branches. 
 */
protected int m_complexityIndex;

/** 
 * Attribute to split on. 
 */
protected final int m_attIndex;

/** 
 * The sum of the weights of the instances. 
 */
protected final double m_sumOfWeights;

/** 
 * The weight of the instances incorrectly classified by the naive bayes models arising from this split
 */
protected double m_errors;

protected C45Split m_c45S;

/** 
 * The global naive bayes model for this node 
 */
NBTreeNoSplit m_globalNB;

/** 
 * Initializes the split model.
 */
public NBTreeSplit(int attIndex,int minNoObj,double sumOfWeights){
  m_attIndex=attIndex;
  m_sumOfWeights=sumOfWeights;
}

/** 
 * Creates a NBTree-type split on the given data. Assumes that none of the class values is missing.
 * @exception Exception if something goes wrong
 */
@Override public void buildClassifier(Instances trainInstances) throws Exception {
  m_numSubsets=0;
  m_errors=0;
  if (m_globalNB != null) {
    m_errors=m_globalNB.getErrors();
  }
  if (trainInstances.attribute(m_attIndex).isNominal()) {
    m_complexityIndex=trainInstances.attribute(m_attIndex).numValues();
    handleEnumeratedAttribute(trainInstances);
  }
 else {
    m_complexityIndex=2;
    trainInstances.sort(trainInstances.attribute(m_attIndex));
    handleNumericAttribute(trainInstances);
  }
}

/** 
 * Returns index of attribute for which split was generated.
 */
public final int attIndex(){
  return m_attIndex;
}

/** 
 * Creates split on enumerated attribute.
 * @exception Exception if something goes wrong
 */
private void handleEnumeratedAttribute(Instances trainInstances) throws Exception {
  m_c45S=new C45Split(m_attIndex,2,m_sumOfWeights,true);
  m_c45S.buildClassifier(trainInstances);
  if (m_c45S.numSubsets() == 0) {
    return;
  }
  m_errors=0;
  Instance instance;
  Instances[] trainingSets=new Instances[m_complexityIndex];
  for (int i=0; i < m_complexityIndex; i++) {
    trainingSets[i]=new Instances(trainInstances,0);
  }
  int subset;
  for (int i=0; i < trainInstances.numInstances(); i++) {
    instance=trainInstances.instance(i);
    subset=m_c45S.whichSubset(instance);
    if (subset > -1) {
      trainingSets[subset].add((Instance)instance.copy());
    }
 else {
      double[] weights=m_c45S.weights(instance);
      for (int j=0; j < m_complexityIndex; j++) {
        try {
          Instance temp=(Instance)instance.copy();
          if (weights.length == m_complexityIndex) {
            temp.setWeight(temp.weight() * weights[j]);
          }
 else {
            temp.setWeight(temp.weight() / m_complexityIndex);
          }
          trainingSets[j].add(temp);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
          System.err.println("*** " + m_complexityIndex);
          System.err.println(weights.length);
          System.exit(1);
        }
      }
    }
  }
  Random r=new Random(1);
  int minNumCount=0;
  for (int i=0; i < m_complexityIndex; i++) {
    if (trainingSets[i].numInstances() >= 5) {
      minNumCount++;
      Discretize disc=new Discretize();
      disc.setInputFormat(trainingSets[i]);
      trainingSets[i]=Filter.useFilter(trainingSets[i],disc);
      trainingSets[i].randomize(r);
      trainingSets[i].stratify(5);
      NaiveBayesUpdateable fullModel=new NaiveBayesUpdateable();
      fullModel.buildClassifier(trainingSets[i]);
      m_errors+=NBTreeNoSplit.crossValidate(fullModel,trainingSets[i],r);
    }
 else {
      for (int j=0; j < trainingSets[i].numInstances(); j++) {
        m_errors+=trainingSets[i].instance(j).weight();
      }
    }
  }
  if (minNumCount > 1) {
    m_numSubsets=m_complexityIndex;
  }
}

/** 
 * Creates split on numeric attribute.
 * @exception Exception if something goes wrong
 */
private void handleNumericAttribute(Instances trainInstances) throws Exception {
  m_c45S=new C45Split(m_attIndex,2,m_sumOfWeights,true);
  m_c45S.buildClassifier(trainInstances);
  if (m_c45S.numSubsets() == 0) {
    return;
  }
  m_errors=0;
  Instances[] trainingSets=new Instances[m_complexityIndex];
  trainingSets[0]=new Instances(trainInstances,0);
  trainingSets[1]=new Instances(trainInstances,0);
  int subset=-1;
  for (int i=0; i < trainInstances.numInstances(); i++) {
    Instance instance=trainInstances.instance(i);
    subset=m_c45S.whichSubset(instance);
    if (subset != -1) {
      trainingSets[subset].add((Instance)instance.copy());
    }
 else {
      double[] weights=m_c45S.weights(instance);
      for (int j=0; j < m_complexityIndex; j++) {
        Instance temp=(Instance)instance.copy();
        if (weights.length == m_complexityIndex) {
          temp.setWeight(temp.weight() * weights[j]);
        }
 else {
          temp.setWeight(temp.weight() / m_complexityIndex);
        }
        trainingSets[j].add(temp);
      }
    }
  }
  Random r=new Random(1);
  int minNumCount=0;
  for (int i=0; i < m_complexityIndex; i++) {
    if (trainingSets[i].numInstances() > 5) {
      minNumCount++;
      Discretize disc=new Discretize();
      disc.setInputFormat(trainingSets[i]);
      trainingSets[i]=Filter.useFilter(trainingSets[i],disc);
      trainingSets[i].randomize(r);
      trainingSets[i].stratify(5);
      NaiveBayesUpdateable fullModel=new NaiveBayesUpdateable();
      fullModel.buildClassifier(trainingSets[i]);
      m_errors+=NBTreeNoSplit.crossValidate(fullModel,trainingSets[i],r);
    }
 else {
      for (int j=0; j < trainingSets[i].numInstances(); j++) {
        m_errors+=trainingSets[i].instance(j).weight();
      }
    }
  }
  if (minNumCount > 1) {
    m_numSubsets=m_complexityIndex;
  }
}

/** 
 * Returns index of subset instance is assigned to. Returns -1 if instance is assigned to more than one subset.
 * @exception Exception if something goes wrong
 */
@Override public final int whichSubset(Instance instance) throws Exception {
  return m_c45S.whichSubset(instance);
}

/** 
 * Returns weights if instance is assigned to more than one subset. Returns null if instance is only assigned to one subset.
 */
@Override public final double[] weights(Instance instance){
  return m_c45S.weights(instance);
}

/** 
 * Returns a string containing java source code equivalent to the test made at this node. The instance being tested is called "i".
 * @param index index of the nominal value tested
 * @param data the data containing instance structure info
 * @return a value of type 'String'
 */
@Override public final String sourceExpression(int index,Instances data){
  return m_c45S.sourceExpression(index,data);
}

/** 
 * Prints the condition satisfied by instances in a subset.
 * @param index of subset
 * @param data training set.
 */
@Override public final String rightSide(int index,Instances data){
  return m_c45S.rightSide(index,data);
}

/** 
 * Prints left side of condition..
 * @param data training set.
 */
@Override public final String leftSide(Instances data){
  return m_c45S.leftSide(data);
}

/** 
 * Return the probability for a class value
 * @param classIndex the index of the class value
 * @param instance the instance to generate a probability for
 * @param theSubset the subset to consider
 * @return a probability
 * @exception Exception if an error occurs
 */
@Override public double classProb(int classIndex,Instance instance,int theSubset) throws Exception {
  if (theSubset > -1) {
    return m_globalNB.classProb(classIndex,instance,theSubset);
  }
 else {
    throw new Exception("This shouldn't happen!!!");
  }
}

/** 
 * Return the global naive bayes model for this node
 * @return a <code>NBTreeNoSplit</code> value
 */
public NBTreeNoSplit getGlobalModel(){
  return m_globalNB;
}

/** 
 * Set the global naive bayes model for this node
 * @param global a <code>NBTreeNoSplit</code> value
 */
public void setGlobalModel(NBTreeNoSplit global){
  m_globalNB=global;
}

/** 
 * Return the errors made by the naive bayes models arising from this split.
 * @return a <code>double</code> value
 */
public double getErrors(){
  return m_errors;
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10531 $");
}
}
