namespace weka.filters.unsupervised.instance;

class ResampleTest
{
  isA AbstractFilterTest;
 depend weka.core.Instances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
public ResampleTest(String name){
  super(name);
}

/** 
 * Creates a default Resample 
 */
public Filter getFilter(){
  Resample f=new Resample();
  f.setSampleSizePercent(50);
  return f;
}

public void testSampleSizePercent(){
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals("Expecting output to be 50% of input",m_Instances.numInstances() / 2,result.numInstances());
  ((Resample)m_Filter).setSampleSizePercent(200);
  result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals("Expecting output to be 200% of input",m_Instances.numInstances() * 2,result.numInstances());
}

public void testSampleSizePercentNoReplacement(){
  ((Resample)m_Filter).setSampleSizePercent(20);
  ((Resample)m_Filter).setNoReplacement(true);
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals("Expecting output to be 20% of input",(int)(m_Instances.numInstances() * 20.0 / 100),result.numInstances());
}

public void testSampleSizePercentNoReplacementInverted(){
  ((Resample)m_Filter).setSampleSizePercent(20);
  ((Resample)m_Filter).setNoReplacement(true);
  ((Resample)m_Filter).setInvertSelection(true);
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals("Expecting output to be 80% of input (20% inverted)",m_Instances.numInstances() - (int)(m_Instances.numInstances() * 20.0 / 100),result.numInstances());
}

public static Test suite(){
  return new TestSuite(ResampleTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
