namespace weka.core;

class SystemInfo
{
  isA RevisionHandler;
 depend java.util.Collections;
 depend java.util.Enumeration;
 depend java.util.Hashtable;
 depend java.util.Properties;
 depend java.util.Vector;
 depend weka.gui.LookAndFeel;
/** 
 * for storing the information 
 */
private Hashtable<String,String> m_Info=null;

/** 
 * initializes the object and reads the system information
 */
public SystemInfo(){
  m_Info=new Hashtable<String,String>();
  readProperties();
}

/** 
 * reads all the properties and stores them in the hashtable
 */
private void readProperties(){
  Properties props;
  Enumeration<?> enm;
  String name;
  String[] laf;
  String tmpStr;
  int i;
  Memory mem;
  m_Info.clear();
  props=System.getProperties();
  enm=props.propertyNames();
  while (enm.hasMoreElements()) {
    name=(String)enm.nextElement();
    m_Info.put(name,(String)props.get(name));
  }
  m_Info.put("weka.version",Version.VERSION);
  laf=LookAndFeel.getInstalledLookAndFeels();
  tmpStr="";
  for (i=0; i < laf.length; i++) {
    if (i > 0) {
      tmpStr+=",";
    }
    tmpStr+=laf[i];
  }
  m_Info.put("ui.installedLookAndFeels",tmpStr);
  m_Info.put("ui.currentLookAndFeel",LookAndFeel.getSystemLookAndFeel());
  mem=new Memory();
  m_Info.put("memory.initial","" + Utils.doubleToString(Memory.toMegaByte(mem.getInitial()),1) + "MB"+ " ("+ mem.getInitial()+ ")");
  m_Info.put("memory.max","" + Utils.doubleToString(Memory.toMegaByte(mem.getMax()),1) + "MB"+ " ("+ mem.getMax()+ ")");
}

/** 
 * returns a copy of the system info. the key is the name of the property and the associated object is the value of the property (a string).
 */
public Hashtable<String,String> getSystemInfo(){
  return new Hashtable<String,String>(m_Info);
}

/** 
 * returns a string representation of all the system properties
 */
@Override public String toString(){
  Enumeration<String> enm;
  String result;
  String key;
  Vector<String> keys;
  int i;
  String value;
  result="";
  keys=new Vector<String>();
  enm=m_Info.keys();
  while (enm.hasMoreElements()) {
    keys.add(enm.nextElement());
  }
  Collections.sort(keys);
  for (i=0; i < keys.size(); i++) {
    key=keys.get(i).toString();
    value=m_Info.get(key).toString();
    if (key.equals("line.separator")) {
      value=Utils.backQuoteChars(value);
    }
    result+=key + ": " + value+ "\n";
  }
  return result;
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10203 $");
}

/** 
 * for printing the system info to stdout.
 */
public static void main(String[] args){
  System.out.println(new SystemInfo());
}
}
