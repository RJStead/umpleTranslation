namespace weka.filters.unsupervised.attribute;

class NumericTransform
{
  isA UnsupervisedFilter,StreamableFilter,OptionHandler;
  isA Filter;
 depend java.lang.reflect.InvocationTargetException;
 depend java.lang.reflect.Method;
 depend java.util.Enumeration;
 depend java.util.Vector;
 depend weka.core.Capabilities;
 depend weka.core.Capabilities.Capability;
 depend weka.core.DenseInstance;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.Option;
 depend weka.core.OptionHandler;
 depend weka.core.Range;
 depend weka.core.RevisionUtils;
 depend weka.core.SparseInstance;
 depend weka.core.Utils;
 depend weka.filters.Filter;
 depend weka.filters.StreamableFilter;
 depend weka.filters.UnsupervisedFilter;
/** 
 * for serialization 
 */
static final long serialVersionUID=-8561413333351366934L;

/** 
 * Stores which columns to transform. 
 */
private final Range m_Cols=new Range();

/** 
 * Class containing transformation method. 
 */
private String m_Class;

/** 
 * Transformation method. 
 */
private String m_Method;

/** 
 * Returns a string describing this filter
 * @return a description of the filter suitable for displaying in theexplorer/experimenter gui
 */
public String globalInfo(){
  return "Transforms numeric attributes using a given transformation method.";
}

/** 
 * Default constructor -- sets the default transform method to java.lang.Math.abs().
 */
public NumericTransform(){
  m_Class="java.lang.Math";
  m_Method="abs";
}

/** 
 * Returns the Capabilities of this filter.
 * @return the capabilities of this object
 * @see Capabilities
 */
@Override public Capabilities getCapabilities(){
  Capabilities result=super.getCapabilities();
  result.disableAll();
  result.enableAllAttributes();
  result.enable(Capability.MISSING_VALUES);
  result.enableAllClasses();
  result.enable(Capability.MISSING_CLASS_VALUES);
  result.enable(Capability.NO_CLASS);
  return result;
}

/** 
 * Sets the format of the input instances.
 * @param instanceInfo an Instances object containing the input instancestructure (any instances contained in the object are ignored - only the structure is required).
 * @return true if the outputFormat may be collected immediately
 * @throws Exception if the input format can't be set successfully
 */
@Override public boolean setInputFormat(Instances instanceInfo) throws Exception {
  if (m_Class == null) {
    throw new IllegalStateException("No class has been set.");
  }
  if (m_Method == null) {
    throw new IllegalStateException("No method has been set.");
  }
  super.setInputFormat(instanceInfo);
  m_Cols.setUpper(instanceInfo.numAttributes() - 1);
  setOutputFormat(instanceInfo);
  return true;
}

/** 
 * Input an instance for filtering. The instance is processed and made available for output immediately.
 * @param instance the input instance
 * @return true if the filtered instance may now be collected with output().
 * @throws IllegalStateException if no input format has been set.
 * @throws InvocationTargetException if there is a problem applying theconfigured transform method.
 */
@Override public boolean input(Instance instance) throws Exception {
  if (getInputFormat() == null) {
    throw new IllegalStateException("No input instance format defined");
  }
  if (m_NewBatch) {
    resetQueue();
    m_NewBatch=false;
  }
  Method m=(Class.forName(m_Class)).getMethod(m_Method,new Class[]{Double.TYPE});
  double[] vals=new double[instance.numAttributes()];
  Double[] params=new Double[1];
  Double newVal;
  for (int i=0; i < instance.numAttributes(); i++) {
    if (instance.isMissing(i)) {
      vals[i]=Utils.missingValue();
    }
 else {
      if (m_Cols.isInRange(i) && instance.attribute(i).isNumeric()) {
        params[0]=new Double(instance.value(i));
        newVal=(Double)m.invoke(null,(Object[])params);
        if (newVal.isNaN() || newVal.isInfinite()) {
          vals[i]=Utils.missingValue();
        }
 else {
          vals[i]=newVal.doubleValue();
        }
      }
 else {
        vals[i]=instance.value(i);
      }
    }
  }
  Instance inst=null;
  if (instance instanceof SparseInstance) {
    inst=new SparseInstance(instance.weight(),vals);
  }
 else {
    inst=new DenseInstance(instance.weight(),vals);
  }
  inst.setDataset(instance.dataset());
  push(inst);
  return true;
}

/** 
 * Returns an enumeration describing the available options.
 * @return an enumeration of all the available options.
 */
@Override public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(4);
  newVector.addElement(new Option("\tSpecify list of columns to transform. First and last are\n" + "\tvalid indexes (default none). Non-numeric columns are \n" + "\tskipped.","R",1,"-R <index1,index2-index4,...>"));
  newVector.addElement(new Option("\tInvert matching sense.","V",0,"-V"));
  newVector.addElement(new Option("\tSets the class containing transformation method.\n" + "\t(default java.lang.Math)","C",1,"-C <string>"));
  newVector.addElement(new Option("\tSets the method. (default abs)","M",1,"-M <string>"));
  return newVector.elements();
}

/** 
 * Parses a given list of options. <p/> <!-- options-start --> Valid options are: <p/> <pre> -R &lt;index1,index2-index4,...&gt; Specify list of columns to transform. First and last are valid indexes (default none). Non-numeric columns are  skipped. </pre> <pre> -V Invert matching sense. </pre> <pre> -C &lt;string&gt; Sets the class containing transformation method. (default java.lang.Math) </pre> <pre> -M &lt;string&gt; Sets the method. (default abs) </pre> <!-- options-end -->
 * @param options the list of options as an array of strings
 * @throws Exception if an option is not supported
 */
@Override public void setOptions(String[] options) throws Exception {
  setAttributeIndices(Utils.getOption('R',options));
  setInvertSelection(Utils.getFlag('V',options));
  String classString=Utils.getOption('C',options);
  if (classString.length() != 0) {
    setClassName(classString);
  }
  String methodString=Utils.getOption('M',options);
  if (methodString.length() != 0) {
    setMethodName(methodString);
  }
  if (getInputFormat() != null) {
    setInputFormat(getInputFormat());
  }
  Utils.checkForRemainingOptions(options);
}

/** 
 * Gets the current settings of the filter.
 * @return an array of strings suitable for passing to setOptions
 */
@Override public String[] getOptions(){
  Vector<String> options=new Vector<String>();
  if (getInvertSelection()) {
    options.add("-V");
  }
  if (!getAttributeIndices().equals("")) {
    options.add("-R");
    options.add(getAttributeIndices());
  }
  if (m_Class != null) {
    options.add("-C");
    options.add(getClassName());
  }
  if (m_Method != null) {
    options.add("-M");
    options.add(getMethodName());
  }
  return options.toArray(new String[0]);
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String classNameTipText(){
  return "Name of the class containing the method used for the transformation.";
}

/** 
 * Get the class containing the transformation method.
 * @return string describing the class
 */
public String getClassName(){
  return m_Class;
}

/** 
 * Sets the class containing the transformation method.
 * @param name the name of the class
 * @throws ClassNotFoundException if class can't be found
 */
public void setClassName(String name) throws ClassNotFoundException {
  m_Class=name;
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String methodNameTipText(){
  return "Name of the method used for the transformation.";
}

/** 
 * Get the transformation method.
 * @return string describing the transformation method.
 */
public String getMethodName(){
  return m_Method;
}

/** 
 * Set the transformation method.
 * @param name the name of the method
 * @throws NoSuchMethodException if method can't be found in class
 */
public void setMethodName(String name) throws NoSuchMethodException {
  m_Method=name;
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String invertSelectionTipText(){
  return "Whether to process the inverse of the given attribute ranges.";
}

/** 
 * Get whether the supplied columns are to be transformed or not
 * @return true if the supplied columns will be kept
 */
public boolean getInvertSelection(){
  return m_Cols.getInvert();
}

/** 
 * Set whether selected columns should be transformed or not.
 * @param invert the new invert setting
 */
public void setInvertSelection(boolean invert){
  m_Cols.setInvert(invert);
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String attributeIndicesTipText(){
  return "Specify range of attributes to act on." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\".";
}

/** 
 * Get the current range selection
 * @return a string containing a comma separated list of ranges
 */
public String getAttributeIndices(){
  return m_Cols.getRanges();
}

/** 
 * Set which attributes are to be transformed (or kept if invert is true).
 * @param rangeList a string representing the list of attributes. Since thestring will typically come from a user, attributes are indexed from 1. <br> eg: first-3,5,6-last
 * @throws InvalidArgumentException if an invalid range list is supplied
 */
public void setAttributeIndices(String rangeList){
  m_Cols.setRanges(rangeList);
}

/** 
 * Set which attributes are to be transformed (or kept if invert is true)
 * @param attributes an array containing indexes of attributes to select.Since the array will typically come from a program, attributes are indexed from 0.
 * @throws InvalidArgumentException if an invalid set of ranges is supplied
 */
public void setAttributeIndicesArray(int[] attributes){
  setAttributeIndices(Range.indicesToRangeList(attributes));
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10215 $");
}

/** 
 * Main method for testing this class.
 * @param argv should contain arguments to the filter: use -h for help
 */
public static void main(String[] argv){
  runFilter(new NumericTransform(),argv);
}
}
