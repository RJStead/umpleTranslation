namespace weka.filters.unsupervised.instance;

class RemovePercentage
{
  isA UnsupervisedFilter,OptionHandler;
  isA Filter;
 depend java.util.Enumeration;
 depend java.util.Vector;
 depend weka.core.Capabilities;
 depend weka.core.Capabilities.Capability;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.Option;
 depend weka.core.OptionHandler;
 depend weka.core.RevisionUtils;
 depend weka.core.Utils;
 depend weka.filters.Filter;
 depend weka.filters.UnsupervisedFilter;
/** 
 * for serialization 
 */
static final long serialVersionUID=2150341191158533133L;

/** 
 * Percentage of instances to select. 
 */
private double m_Percentage=50;

/** 
 * Indicates if inverse of selection is to be output. 
 */
private boolean m_Inverse=false;

/** 
 * Gets an enumeration describing the available options..
 * @return an enumeration of all the available options.
 */
@Override public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(2);
  newVector.addElement(new Option("\tSpecifies percentage of instances to select. (default 50)\n","P",1,"-P <percentage>"));
  newVector.addElement(new Option("\tSpecifies if inverse of selection is to be output.\n","V",0,"-V"));
  return newVector.elements();
}

/** 
 * Parses a given list of options. <p/> <!-- options-start --> Valid options are: <p/> <pre> -P &lt;percentage&gt; Specifies percentage of instances to select. (default 50) </pre> <pre> -V Specifies if inverse of selection is to be output. </pre> <!-- options-end -->
 * @param options the list of options as an array of strings
 * @throws Exception if an option is not supported
 */
@Override public void setOptions(String[] options) throws Exception {
  String percent=Utils.getOption('P',options);
  if (percent.length() != 0) {
    setPercentage(Double.parseDouble(percent));
  }
 else {
    setPercentage(50.0);
  }
  setInvertSelection(Utils.getFlag('V',options));
  if (getInputFormat() != null) {
    setInputFormat(getInputFormat());
  }
  Utils.checkForRemainingOptions(options);
}

/** 
 * Gets the current settings of the filter.
 * @return an array of strings suitable for passing to setOptions
 */
@Override public String[] getOptions(){
  Vector<String> options=new Vector<String>();
  options.add("-P");
  options.add("" + getPercentage());
  if (getInvertSelection()) {
    options.add("-V");
  }
  return options.toArray(new String[0]);
}

/** 
 * Returns a string describing this filter
 * @return a description of the filter suitable for displaying in theexplorer/experimenter gui
 */
public String globalInfo(){
  return "A filter that removes a given percentage of a dataset.";
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String percentageTipText(){
  return "The percentage of the data to select.";
}

/** 
 * Gets the percentage of instances to select.
 * @return the percentage.
 */
public double getPercentage(){
  return m_Percentage;
}

/** 
 * Sets the percentage of intances to select.
 * @param percent the percentage
 * @throws IllegalArgumentException if percentage out of range
 */
public void setPercentage(double percent){
  if (percent < 0 || percent > 100) {
    throw new IllegalArgumentException("Percentage must be between 0 and 100.");
  }
  m_Percentage=percent;
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String invertSelectionTipText(){
  return "Whether to invert the selection.";
}

/** 
 * Gets if selection is to be inverted.
 * @return true if the selection is to be inverted
 */
public boolean getInvertSelection(){
  return m_Inverse;
}

/** 
 * Sets if selection is to be inverted.
 * @param inverse true if inversion is to be performed
 */
public void setInvertSelection(boolean inverse){
  m_Inverse=inverse;
}

/** 
 * Returns the Capabilities of this filter.
 * @return the capabilities of this object
 * @see Capabilities
 */
@Override public Capabilities getCapabilities(){
  Capabilities result=super.getCapabilities();
  result.disableAll();
  result.enableAllAttributes();
  result.enable(Capability.MISSING_VALUES);
  result.enableAllClasses();
  result.enable(Capability.MISSING_CLASS_VALUES);
  result.enable(Capability.NO_CLASS);
  return result;
}

/** 
 * Sets the format of the input instances.
 * @param instanceInfo an Instances object containing the input instancestructure (any instances contained in the object are ignored - only the structure is required).
 * @return true because outputFormat can be collected immediately
 * @throws Exception if the input format can't be set successfully
 */
@Override public boolean setInputFormat(Instances instanceInfo) throws Exception {
  super.setInputFormat(instanceInfo);
  setOutputFormat(instanceInfo);
  return true;
}

/** 
 * Input an instance for filtering. Ordinarily the instance is processed and made available for output immediately. Some filters require all instances be read before producing output.
 * @param instance the input instance
 * @return true if the filtered instance may now be collected with output().
 * @throws IllegalStateException if no input format has been set.
 */
@Override public boolean input(Instance instance){
  if (getInputFormat() == null) {
    throw new IllegalStateException("No input instance format defined");
  }
  if (m_NewBatch) {
    resetQueue();
    m_NewBatch=false;
  }
  if (isFirstBatchDone()) {
    push(instance);
    return true;
  }
 else {
    bufferInput(instance);
    return false;
  }
}

/** 
 * Signify that this batch of input to the filter is finished. Output() may now be called to retrieve the filtered instances.
 * @return true if there are instances pending output
 * @throws IllegalStateException if no input structure has been defined
 */
@Override public boolean batchFinished(){
  if (getInputFormat() == null) {
    throw new IllegalStateException("No input instance format defined");
  }
  Instances toFilter=getInputFormat();
  int cutOff=(int)Math.round(toFilter.numInstances() * m_Percentage / 100);
  if (m_Inverse) {
    for (int i=0; i < cutOff; i++) {
      push(toFilter.instance(i));
    }
  }
 else {
    for (int i=cutOff; i < toFilter.numInstances(); i++) {
      push(toFilter.instance(i));
    }
  }
  flushInput();
  m_NewBatch=true;
  m_FirstBatchDone=true;
  return (numPendingOutput() != 0);
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10215 $");
}

/** 
 * Main method for testing this class.
 * @param argv should contain arguments to the filter: use -h for help
 */
public static void main(String[] argv){
  runFilter(new RemovePercentage(),argv);
}
}
