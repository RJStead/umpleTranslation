namespace weka.classifiers;

class IteratedSingleClassifierEnhancer
{
  isA SingleClassifierEnhancer;
 depend java.util.Collections;
 depend java.util.Enumeration;
 depend java.util.Vector;
 depend weka.core.Instances;
 depend weka.core.Option;
 depend weka.core.Utils;
/** 
 * for serialization 
 */
private static final long serialVersionUID=-6217979135443319724L;

/** 
 * Array for storing the generated base classifiers. 
 */
protected Classifier[] m_Classifiers;

/** 
 * The number of iterations. 
 */
protected int m_NumIterations=10;

/** 
 * Stump method for building the classifiers.
 * @param data the training data to be used for generating thebagged classifier.
 * @exception Exception if the classifier could not be built successfully
 */
public void buildClassifier(Instances data) throws Exception {
  if (m_Classifier == null) {
    throw new Exception("A base classifier has not been specified!");
  }
  m_Classifiers=AbstractClassifier.makeCopies(m_Classifier,m_NumIterations);
}

/** 
 * Returns an enumeration describing the available options.
 * @return an enumeration of all the available options.
 */
public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(2);
  newVector.addElement(new Option("\tNumber of iterations.\n" + "\t(default 10)","I",1,"-I <num>"));
  newVector.addAll(Collections.list(super.listOptions()));
  return newVector.elements();
}

/** 
 * Parses a given list of options. Valid options are:<p> -W classname <br> Specify the full class name of the base learner.<p> -I num <br> Set the number of iterations (default 10). <p> Options after -- are passed to the designated classifier.<p>
 * @param options the list of options as an array of strings
 * @exception Exception if an option is not supported
 */
public void setOptions(String[] options) throws Exception {
  String iterations=Utils.getOption('I',options);
  if (iterations.length() != 0) {
    setNumIterations(Integer.parseInt(iterations));
  }
 else {
    setNumIterations(10);
  }
  super.setOptions(options);
}

/** 
 * Gets the current settings of the classifier.
 * @return an array of strings suitable for passing to setOptions
 */
public String[] getOptions(){
  String[] superOptions=super.getOptions();
  String[] options=new String[superOptions.length + 2];
  int current=0;
  options[current++]="-I";
  options[current++]="" + getNumIterations();
  System.arraycopy(superOptions,0,options,current,superOptions.length);
  return options;
}

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable fordisplaying in the explorer/experimenter gui
 */
public String numIterationsTipText(){
  return "The number of iterations to be performed.";
}

/** 
 * Sets the number of bagging iterations
 */
public void setNumIterations(int numIterations){
  m_NumIterations=numIterations;
}

/** 
 * Gets the number of bagging iterations
 * @return the maximum number of bagging iterations
 */
public int getNumIterations(){
  return m_NumIterations;
}
}
