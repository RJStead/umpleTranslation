namespace weka.core;

class MathematicalExpressionTest
{
  isA TestCase;
 depend java.util.HashMap;
 depend junit.framework.Test;
 depend junit.framework.TestCase;
 depend junit.framework.TestSuite;
/** 
 * Constructs the <code>MathematicalExpresionTest</code>.
 * @param name the name of the test class
 */
public MathematicalExpressionTest(String name){
  super(name);
}

/** 
 * Called by JUnit before each test method.
 * @throws Exception if an error occurs
 */
@Override protected void setUp() throws Exception {
  super.setUp();
}

/** 
 * Called by JUnit after each test method 
 */
@Override protected void tearDown() throws Exception {
  super.tearDown();
}

public static Test suite(){
  return new TestSuite(MathematicalExpressionTest.class);
}

protected double getExpressionResult(String expression) throws Exception {
  HashMap<String,Double> symbols=new HashMap<String,Double>();
  symbols.put("A",new Double(4));
  symbols.put("B",new Double(2));
  symbols.put("C",new Double(2));
  return MathematicalExpression.evaluate(expression,symbols);
}

public void testAddSub() throws Exception {
  double result=getExpressionResult("A-B+C");
  assertEquals(4.0,result);
}

public void testOperatorOrder() throws Exception {
  double result=getExpressionResult("A-B*C");
  assertEquals(0.0,result);
}

public void testBrackets() throws Exception {
  double result=getExpressionResult("(A-B)*C");
  assertEquals(4.0,result);
}

public void testExpressionWithConstants() throws Exception {
  double result=getExpressionResult("A-B*(C+5)");
  assertEquals(-10.0,result);
}

public void testExpressionWithFunction() throws Exception {
  double result=getExpressionResult("pow(A,B*1)-C*2");
  assertEquals(12.0,result);
}

public void testExpressionWithIFELSE() throws Exception {
  double result=getExpressionResult("ifelse((C<1000|C>5000),(A+B),C+C)");
  assertEquals(6.0,result);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
