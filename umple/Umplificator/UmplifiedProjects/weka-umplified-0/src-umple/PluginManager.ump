namespace weka.gui.beans;

class PluginManager
{
 depend java.io.BufferedInputStream;
 depend java.io.File;
 depend java.io.FileInputStream;
 depend java.io.InputStream;
 depend java.util.HashMap;
 depend java.util.HashSet;
 depend java.util.Iterator;
 depend java.util.List;
 depend java.util.Map;
 depend java.util.Properties;
 depend java.util.Set;
 depend java.util.TreeMap;
/** 
 * Global map that is keyed by plugin base class/interface type. The inner Map then stores individual plugin instances of the interface type, keyed by plugin name/short title with values the actual fully qualified class name
 */
protected static Map<String,Map<String,String>> PLUGINS=new HashMap<String,Map<String,String>>();

/** 
 * Set of concrete fully qualified class names or abstract/interface base types to "disable". Entries in this list wont ever be returned by any of the getPlugin() methods. Registering an abstract/interface base name will disable all concrete implementations of that type
 */
protected static Set<String> DISABLED=new HashSet<String>();

/** 
 * Add the supplied list of fully qualified class names to the disabled list
 * @param classnames a list of class names to add
 */
public static synchronized void addToDisabledList(List<String> classnames){
  for (  String s : classnames) {
    addToDisabledList(s);
  }
}

/** 
 * Add the supplied fully qualified class name to the list of disabled plugins
 * @param classname the fully qualified name of a class to add
 */
public static synchronized void addToDisabledList(String classname){
  DISABLED.add(classname);
}

/** 
 * Remove the supplied list of fully qualified class names to the disabled list
 * @param classnames a list of class names to remove
 */
public static synchronized void removeFromDisabledList(List<String> classnames){
  for (  String s : classnames) {
    removeFromDisabledList(s);
  }
}

/** 
 * Remove the supplied fully qualified class name from the list of disabled plugins
 * @param classname the fully qualified name of a class to remove
 */
public static synchronized void removeFromDisabledList(String classname){
  DISABLED.remove(classname);
}

/** 
 * Returns true if the supplied fully qualified class name is in the disabled list
 * @param classname the name of the class to check
 * @return true if the supplied class name is in the disabled list
 */
public static boolean isInDisabledList(String classname){
  return DISABLED.contains(classname);
}

/** 
 * Add all key value pairs from the supplied property file
 * @param propsFile the properties file to add
 * @throws Exception if a problem occurs
 */
public static synchronized void addFromProperties(File propsFile) throws Exception {
  BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile));
  addFromProperties(bi);
}

/** 
 * Add all key value pairs from the supplied properties stream
 * @param propsStream an input stream to a properties file
 * @throws Exception if a problem occurs
 */
public static synchronized void addFromProperties(InputStream propsStream) throws Exception {
  Properties expProps=new Properties();
  expProps.load(propsStream);
  propsStream.close();
  propsStream=null;
  addFromProperties(expProps);
}

/** 
 * Add all key value pairs from the supplied properties object
 * @param props a Properties object
 * @throws Exception if a problem occurs
 */
public static synchronized void addFromProperties(Properties props) throws Exception {
  Set<Object> keys=props.keySet();
  Iterator<Object> keysI=keys.iterator();
  while (keysI.hasNext()) {
    String baseType=(String)keysI.next();
    String implementations=props.getProperty(baseType);
    if (implementations != null && implementations.length() > 0) {
      String[] parts=implementations.split(",");
      for (      String impl : parts) {
        PluginManager.addPlugin(baseType,impl.trim(),impl.trim());
      }
    }
  }
}

/** 
 * Get a set of names of plugins that implement the supplied interface.
 * @param interfaceName the fully qualified name of the interface to listplugins for
 * @return a set of names of plugins
 */
public static Set<String> getPluginNamesOfType(String interfaceName){
  if (PLUGINS.get(interfaceName) != null) {
    Set<String> match=PLUGINS.get(interfaceName).keySet();
    Set<String> result=new HashSet<String>();
    for (    String s : match) {
      String impl=PLUGINS.get(interfaceName).get(s);
      if (!DISABLED.contains(impl)) {
        result.add(s);
      }
    }
    return result;
  }
  return null;
}

/** 
 * Add a plugin.
 * @param interfaceName the fully qualified interface name that the pluginimplements
 * @param name the name/short description of the plugin
 * @param concreteType the fully qualified class name of the actual concreteimplementation
 */
public static void addPlugin(String interfaceName,String name,String concreteType){
  if (PLUGINS.get(interfaceName) == null) {
    Map<String,String> pluginsOfInterfaceType=new TreeMap<String,String>();
    pluginsOfInterfaceType.put(name,concreteType);
    PLUGINS.put(interfaceName,pluginsOfInterfaceType);
  }
 else {
    PLUGINS.get(interfaceName).put(name,concreteType);
  }
}

/** 
 * Remove plugins of a specific type.
 * @param interfaceName the fully qualified interface name that the plugins tobe remove implement
 * @param names a list of named plugins to remove
 */
public static void removePlugins(String interfaceName,List<String> names){
  for (  String name : names) {
    removePlugin(interfaceName,name);
  }
}

/** 
 * Remove a plugin.
 * @param interfaceName the fully qualified interface name that the pluginimplements
 * @param name the name/short description of the plugin
 */
public static void removePlugin(String interfaceName,String name){
  if (PLUGINS.get(interfaceName) != null) {
    PLUGINS.get(interfaceName).remove(name);
  }
}

/** 
 * Get an instance of a concrete implementation of a plugin type
 * @param interfaceType the fully qualified interface name of the plugin type
 * @param name the name/short description of the plugin to get
 * @return the concrete plugin or null if the plugin is disabled
 * @throws Exception if the plugin can't be found or instantiated
 */
public static Object getPluginInstance(String interfaceType,String name) throws Exception {
  if (PLUGINS.get(interfaceType) == null || PLUGINS.get(interfaceType).size() == 0) {
    throw new Exception("No plugins of interface type: " + interfaceType + " available!!");
  }
  Map<String,String> pluginsOfInterfaceType=PLUGINS.get(interfaceType);
  if (pluginsOfInterfaceType.get(name) == null) {
    throw new Exception("Can't find named plugin '" + name + "' of type '"+ interfaceType+ "'!");
  }
  String concreteImpl=pluginsOfInterfaceType.get(name);
  Object plugin=null;
  if (!DISABLED.contains(concreteImpl)) {
    plugin=Class.forName(concreteImpl).newInstance();
  }
  return plugin;
}
}
