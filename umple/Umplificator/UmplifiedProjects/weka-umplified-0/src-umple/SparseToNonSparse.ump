namespace weka.filters.unsupervised.instance;

class SparseToNonSparse
{
  isA UnsupervisedFilter,StreamableFilter;
  isA Filter;
 depend weka.core.Capabilities;
 depend weka.core.Capabilities.Capability;
 depend weka.core.DenseInstance;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.RevisionUtils;
 depend weka.core.SparseInstance;
 depend weka.filters.Filter;
 depend weka.filters.StreamableFilter;
 depend weka.filters.UnsupervisedFilter;
/** 
 * for serialization 
 */
static final long serialVersionUID=2481634184210236074L;

/** 
 * Returns a string describing this filter
 * @return a description of the filter suitable fordisplaying in the explorer/experimenter gui
 */
public String globalInfo(){
  return "An instance filter that converts all incoming sparse instances" + " into non-sparse format.";
}

/** 
 * Returns the Capabilities of this filter.
 * @return            the capabilities of this object
 * @see Capabilities
 */
public Capabilities getCapabilities(){
  Capabilities result=super.getCapabilities();
  result.disableAll();
  result.enableAllAttributes();
  result.enable(Capability.MISSING_VALUES);
  result.enableAllClasses();
  result.enable(Capability.MISSING_CLASS_VALUES);
  result.enable(Capability.NO_CLASS);
  return result;
}

/** 
 * Sets the format of the input instances.
 * @param instanceInfo an Instances object containing the input instancestructure (any instances contained in the object are ignored - only the structure is required).
 * @return true if the outputFormat may be collected immediately
 * @throws Exception if format cannot be processed
 */
public boolean setInputFormat(Instances instanceInfo) throws Exception {
  super.setInputFormat(instanceInfo);
  setOutputFormat(instanceInfo);
  return true;
}

/** 
 * Input an instance for filtering. Ordinarily the instance is processed and made available for output immediately. Some filters require all instances be read before producing output.
 * @param instance the input instance
 * @return true if the filtered instance may now becollected with output().
 * @throws IllegalStateException if no input structure has been defined
 */
public boolean input(Instance instance){
  if (getInputFormat() == null) {
    throw new IllegalStateException("No input instance format defined");
  }
  if (m_NewBatch) {
    resetQueue();
    m_NewBatch=false;
  }
  Instance inst=null;
  if (instance instanceof SparseInstance) {
    inst=new DenseInstance(instance.weight(),instance.toDoubleArray());
    inst.setDataset(instance.dataset());
  }
 else {
    inst=instance;
  }
  push(inst);
  return true;
}

/** 
 * Returns the revision string.
 * @return		the revision
 */
public String getRevision(){
  return RevisionUtils.extract("$Revision: 8034 $");
}

/** 
 * Main method for testing this class.
 * @param argv should contain arguments to the filter: use -h for help
 */
public static void main(String[] argv){
  runFilter(new SparseToNonSparse(),argv);
}
}
