namespace weka.gui.explorer;

class DataGeneratorPanel
{
  isA JPanel;
 depend java.awt.BorderLayout;
 depend java.beans.PropertyChangeEvent;
 depend java.beans.PropertyChangeListener;
 depend java.io.PrintWriter;
 depend java.io.StringReader;
 depend java.io.StringWriter;
 depend javax.swing.JOptionPane;
 depend javax.swing.JPanel;
 depend weka.core.Instances;
 depend weka.core.OptionHandler;
 depend weka.core.Utils;
 depend weka.datagenerators.DataGenerator;
 depend weka.gui.GenericObjectEditor;
 depend weka.gui.Logger;
 depend weka.gui.PropertyPanel;
 depend weka.gui.SysErrLog;
/** 
 * for serialization 
 */
private static final long serialVersionUID=-2520408165350629380L;

/** 
 * the GOE for the generators 
 */
protected GenericObjectEditor m_GeneratorEditor=new GenericObjectEditor();

/** 
 * the generated Instances 
 */
protected Instances m_Instances=null;

/** 
 * the generated output (as text) 
 */
protected StringWriter m_Output=new StringWriter();

/** 
 * The destination for log/status messages 
 */
protected Logger m_Log=new SysErrLog();

/** 
 * creates the panel
 */
public DataGeneratorPanel(){
  setLayout(new BorderLayout());
  add(new PropertyPanel(m_GeneratorEditor),BorderLayout.CENTER);
  m_GeneratorEditor.setClassType(DataGenerator.class);
  m_GeneratorEditor.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent e){
      repaint();
    }
  }
);
  setGenerator(null);
}

public void propertyChange(PropertyChangeEvent e){
  repaint();
}

/** 
 * Sets the Logger to receive informational messages
 * @param value 	the Logger that will now get info messages
 */
public void setLog(Logger value){
  m_Log=value;
}

/** 
 * returns the generated instances, null if the process was cancelled.
 * @return the generated Instances
 */
public Instances getInstances(){
  return m_Instances;
}

/** 
 * returns the generated output as text
 * @return		the generated output
 */
public String getOutput(){
  return m_Output.toString();
}

/** 
 * sets the generator to use initially
 * @param value	the data generator to use
 */
public void setGenerator(DataGenerator value){
  if (value != null)   m_GeneratorEditor.setValue(value);
 else   m_GeneratorEditor.setValue(new weka.datagenerators.classifiers.classification.RDG1());
}

/** 
 * returns the currently selected DataGenerator
 * @return		the current data generator
 */
public DataGenerator getGenerator(){
  return (DataGenerator)m_GeneratorEditor.getValue();
}

/** 
 * generates the instances, returns TRUE if successful
 * @return		TRUE if successful
 * @see #getInstances()
 */
public boolean execute(){
  DataGenerator generator;
  boolean result;
  String relName;
  String cname;
  String cmd;
  result=true;
  generator=(DataGenerator)m_GeneratorEditor.getValue();
  relName=generator.getRelationName();
  cname=generator.getClass().getName().replaceAll(".*\\.","");
  cmd=generator.getClass().getName();
  if (generator instanceof OptionHandler)   cmd+=" " + Utils.joinOptions(((OptionHandler)generator).getOptions());
  try {
    m_Log.logMessage("Started " + cname);
    m_Log.logMessage("Command: " + cmd);
    m_Output=new StringWriter();
    generator.setOutput(new PrintWriter(m_Output));
    DataGenerator.makeData(generator,generator.getOptions());
    m_Instances=new Instances(new StringReader(getOutput()));
    m_Log.logMessage("Finished " + cname);
  }
 catch (  Exception e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this,"Error generating data:\n" + e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
    m_Instances=null;
    m_Output=new StringWriter();
    result=false;
  }
  generator.setRelationName(relName);
  return result;
}
}
