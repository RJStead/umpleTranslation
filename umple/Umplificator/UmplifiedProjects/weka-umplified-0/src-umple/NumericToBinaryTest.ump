namespace weka.filters.unsupervised.attribute;

class NumericToBinaryTest
{
  isA AbstractFilterTest;
 depend weka.core.Instances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
public NumericToBinaryTest(String name){
  super(name);
}

/** 
 * Creates an example NumericToBinary 
 */
public Filter getFilter(){
  NumericToBinary f=new NumericToBinary();
  return f;
}

public void testTypical(){
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  for (int j=0; j < result.numAttributes(); j++) {
    if (m_Instances.attribute(j).isNumeric()) {
      assertTrue("Numeric attribute should now be nominal",result.attribute(j).isNominal());
      for (int i=0; i < result.numInstances(); i++) {
        if (m_Instances.instance(i).isMissing(j)) {
          assertTrue(result.instance(i).isMissing(j));
        }
 else         if (m_Instances.instance(i).value(j) == 0) {
          assertTrue("Output value should be 0",result.instance(i).value(j) == 0);
        }
 else {
          assertTrue("Output value should be 1",result.instance(i).value(j) == 1);
        }
      }
    }
  }
}

public static Test suite(){
  return new TestSuite(NumericToBinaryTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
