namespace weka.classifiers.misc;

class SerializedClassifierTest
{
  isA TestCase;
 depend java.io.File;
 depend java.util.ArrayList;
 depend junit.framework.Test;
 depend junit.framework.TestCase;
 depend junit.framework.TestSuite;
 depend weka.classifiers.Classifier;
 depend weka.classifiers.evaluation.EvaluationUtils;
 depend weka.classifiers.evaluation.Prediction;
 depend weka.core.Attribute;
 depend weka.core.CheckOptionHandler;
 depend weka.core.Instances;
 depend weka.core.SerializationHelper;
 depend weka.core.TestInstances;
 depend weka.test.Regression;
/** 
 * the filename for temporary serialized models 
 */
public final static String MODEL_FILENAME=System.getProperty("user.dir") + "/" + "temp.model";

/** 
 * the setup classifier 
 */
protected SerializedClassifier m_Classifier;

/** 
 * the OptionHandler tester 
 */
protected CheckOptionHandler m_OptionTester;

/** 
 * initializes the test
 * @param name the name of the test
 */
public SerializedClassifierTest(String name){
  super(name);
}

/** 
 * Called by JUnit before each test method.
 * @throws Exception if an error occurs reading the example instances.
 */
@Override protected void setUp() throws Exception {
  m_Classifier=null;
  m_OptionTester=new CheckOptionHandler();
  m_OptionTester.setSilent(true);
  File file=new File(MODEL_FILENAME);
  if (file.exists()) {
    file.delete();
  }
}

/** 
 * Called by JUnit after each test method
 */
@Override protected void tearDown(){
  m_Classifier=null;
  m_OptionTester=null;
  File file=new File(MODEL_FILENAME);
  if (file.exists()) {
    file.delete();
  }
}

/** 
 * creates a classifier, trains and serializes it
 * @param data the data to use (J48 with nominal class, M5P with numericclass)
 * @return the results for the data
 */
protected double[] trainAndSerializeClassifier(Instances data){
  Classifier classifier;
  double[] result;
  int i;
  try {
    if (data.classAttribute().isNominal()) {
      classifier=new weka.classifiers.trees.J48();
    }
 else {
      classifier=new weka.classifiers.trees.M5P();
    }
    classifier.buildClassifier(data);
    result=new double[data.numInstances()];
    for (i=0; i < result.length; i++) {
      result[i]=classifier.classifyInstance(data.instance(i));
    }
    SerializationHelper.write(MODEL_FILENAME,classifier);
  }
 catch (  Exception e) {
    fail("Training base classifier failed: " + e);
    return null;
  }
  return result;
}

/** 
 * performs the actual test
 * @param nomClass whether to use a nominal class with J48 (TRUE) or a numericone with M5P (FALSE)
 */
protected void performTest(boolean nomClass){
  TestInstances test;
  Instances data;
  double[] originalResults;
  double[] testResults;
  int i;
  try {
    test=new TestInstances();
    if (nomClass) {
      test.setClassType(Attribute.NOMINAL);
      test.setNumNominal(5);
      test.setNumNominalValues(4);
      test.setNumNumeric(0);
    }
 else {
      test.setClassType(Attribute.NUMERIC);
      test.setNumNominal(0);
      test.setNumNumeric(5);
    }
    test.setNumDate(0);
    test.setNumString(0);
    test.setNumRelational(0);
    test.setNumInstances(100);
    data=test.generate();
  }
 catch (  Exception e) {
    fail("Generating test data failed: " + e);
    return;
  }
  try {
    originalResults=trainAndSerializeClassifier(data);
  }
 catch (  Exception e) {
    fail("Training base classifier failed: " + e);
    return;
  }
  try {
    m_Classifier=new SerializedClassifier();
    m_Classifier.setModelFile(new File(MODEL_FILENAME));
    m_Classifier.buildClassifier(data);
  }
 catch (  Exception e) {
    fail("Loading/testing of classifier failed: " + e);
  }
  try {
    testResults=new double[data.numInstances()];
    for (i=0; i < testResults.length; i++) {
      testResults[i]=m_Classifier.classifyInstance(data.instance(i));
    }
    for (i=0; i < originalResults.length; i++) {
      if (originalResults[i] != testResults[i]) {
        throw new Exception("Result #" + (i + 1) + " differs!");
      }
    }
  }
 catch (  Exception e) {
    fail("Comparing results failed: " + e);
  }
}

/** 
 * tests a serialized classifier (J48) handling nominal classes
 */
public void testNominalClass(){
  performTest(true);
}

/** 
 * tests a serialized classifier (M5P) handling numeric classes
 */
public void testNumericClass(){
  performTest(true);
}

/** 
 * Returns a string containing all the predictions.
 * @param predictions a <code>FastVector</code> containing the predictions
 * @return a <code>String</code> representing the vector of predictions.
 */
protected String predictionsToString(ArrayList<Prediction> predictions){
  StringBuffer sb=new StringBuffer();
  sb.append(predictions.size()).append(" predictions\n");
  for (int i=0; i < predictions.size(); i++) {
    sb.append(predictions.get(i)).append('\n');
  }
  return sb.toString();
}

/** 
 * Runs a regression test -- this checks that the output of the tested object matches that in a reference version. When this test is run without any pre-existing reference output, the reference version is created. Uses J48 for this purpose.
 */
public void testRegression(){
  Regression reg;
  Instances train;
  Instances test;
  Instances data;
  TestInstances testInst;
  int tot;
  int mid;
  EvaluationUtils evaluation;
  ArrayList<Prediction> regressionResults;
  reg=new Regression(this.getClass());
  try {
    testInst=new TestInstances();
    testInst.setClassType(Attribute.NOMINAL);
    testInst.setNumNominal(5);
    testInst.setNumNominalValues(4);
    testInst.setNumNumeric(0);
    testInst.setNumDate(0);
    testInst.setNumString(0);
    testInst.setNumRelational(0);
    testInst.setNumInstances(100);
    data=testInst.generate();
  }
 catch (  Exception e) {
    fail("Failed generating data: " + e);
    return;
  }
  tot=data.numInstances();
  mid=tot / 2;
  train=null;
  test=null;
  try {
    train=new Instances(data,0,mid);
    test=new Instances(data,mid,tot - mid);
    m_Classifier=new SerializedClassifier();
    m_Classifier.setModelFile(new File(MODEL_FILENAME));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Problem setting up to use classifier: " + e);
  }
  evaluation=new EvaluationUtils();
  try {
    trainAndSerializeClassifier(train);
    regressionResults=evaluation.getTrainTestPredictions(m_Classifier,train,test);
    reg.println(predictionsToString(regressionResults));
  }
 catch (  Exception e) {
    fail("Failed obtaining classifier predictions: " + e);
  }
  try {
    String diff=reg.diff();
    if (diff == null) {
      System.err.println("Warning: No reference available, creating.");
    }
 else     if (!diff.equals("")) {
      fail("Regression test failed. Difference:\n" + diff);
    }
  }
 catch (  java.io.IOException ex) {
    fail("Problem during regression testing.\n" + ex);
  }
}

/** 
 * tests the listing of the options
 */
public void testListOptions(){
  if (!m_OptionTester.checkListOptions()) {
    fail("Options cannot be listed via listOptions.");
  }
}

/** 
 * tests the setting of the options
 */
public void testSetOptions(){
  if (!m_OptionTester.checkSetOptions()) {
    fail("setOptions method failed.");
  }
}

/** 
 * tests whether there are any remaining options
 */
public void testRemainingOptions(){
  if (!m_OptionTester.checkRemainingOptions()) {
    fail("There were 'left-over' options.");
  }
}

/** 
 * tests the whether the user-supplied options stay the same after setting. getting, and re-setting again.
 */
public void testCanonicalUserOptions(){
  if (!m_OptionTester.checkCanonicalUserOptions()) {
    fail("setOptions method failed");
  }
}

/** 
 * tests the resetting of the options to the default ones
 */
public void testResettingOptions(){
  if (!m_OptionTester.checkSetOptions()) {
    fail("Resetting of options failed");
  }
}

public static Test suite(){
  return new TestSuite(SerializedClassifierTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
