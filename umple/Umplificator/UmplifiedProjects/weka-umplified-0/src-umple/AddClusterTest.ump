namespace weka.filters.unsupervised.attribute;

class AddClusterTest
{
  isA AbstractFilterTest;
 depend weka.classifiers.meta.FilteredClassifier;
 depend weka.clusterers.Clusterer;
 depend weka.clusterers.EM;
 depend weka.core.Attribute;
 depend weka.core.Instances;
 depend weka.core.TestInstances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
public AddClusterTest(String name){
  super(name);
}

/** 
 * Need to remove attributes that are not nominal/numeric 
 */
protected void setUp() throws Exception {
  super.setUp();
  int i=0;
  while (i < m_Instances.numAttributes()) {
    if ((!m_Instances.attribute(i).isNominal() && !m_Instances.attribute(i).isNumeric()) || m_Instances.attribute(i).isDate())     m_Instances.deleteAttributeAt(i);
 else     i++;
  }
}

/** 
 * returns a configured cluster algorithm
 */
protected Clusterer getClusterer(){
  EM c=new EM();
  try {
    c.setOptions(new String[0]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return c;
}

/** 
 * Creates a default AddCluster, with SimpleKMeans as cluster
 * @see #getClusterer 
 */
public Filter getFilter(){
  AddCluster f=new AddCluster();
  f.setClusterer(getClusterer());
  return f;
}

/** 
 * returns the configured FilteredClassifier. Since the base classifier is determined heuristically, derived tests might need to adjust it.
 * @return the configured FilteredClassifier
 */
protected FilteredClassifier getFilteredClassifier(){
  FilteredClassifier result;
  result=new FilteredClassifier();
  result.setFilter(getFilter());
  result.setClassifier(new weka.classifiers.trees.J48());
  return result;
}

/** 
 * returns data generated for the FilteredClassifier test
 * @return		the dataset for the FilteredClassifier
 * @throws Exception	if generation of data fails
 */
protected Instances getFilteredClassifierData() throws Exception {
  TestInstances test;
  Instances result;
  test=TestInstances.forCapabilities(m_FilteredClassifier.getCapabilities());
  test.setClassType(Attribute.NOMINAL);
  test.setClassIndex(TestInstances.CLASS_IS_LAST);
  result=test.generate();
  return result;
}

public void testTypical(){
  m_Filter=getFilter();
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes() + 1,result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
}

public static Test suite(){
  return new TestSuite(AddClusterTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
