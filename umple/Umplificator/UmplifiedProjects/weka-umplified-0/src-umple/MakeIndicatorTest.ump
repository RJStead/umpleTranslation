namespace weka.filters.unsupervised.attribute;

class MakeIndicatorTest
{
  isA AbstractFilterTest;
 depend weka.core.Attribute;
 depend weka.core.Instances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
public MakeIndicatorTest(String name){
  super(name);
}

/** 
 * Creates an example MakeIndicator 
 */
public Filter getFilter(){
  MakeIndicator f=new MakeIndicator();
  f.setAttributeIndex("2");
  return f;
}

public void testInvalidAttributeTypes(){
  Instances icopy=new Instances(m_Instances);
  try {
    ((MakeIndicator)m_Filter).setAttributeIndex("1");
    m_Filter.setInputFormat(icopy);
    fail("Should have thrown an exception selecting a STRING attribute!");
  }
 catch (  Exception ex) {
  }
  try {
    ((MakeIndicator)m_Filter).setAttributeIndex("3");
    m_Filter.setInputFormat(icopy);
    fail("Should have thrown an exception indicating a NUMERIC attribute!");
  }
 catch (  Exception ex) {
  }
}

public void testDefault(){
  ((MakeIndicator)m_Filter).setAttributeIndex("2");
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  assertEquals("Default attribute encoding should be NUMERIC",Attribute.NUMERIC,result.attribute(1).type());
  for (int i=0; i < result.numInstances(); i++) {
    assertTrue("Checking indicator for instance: " + (i + 1),(m_Instances.instance(i).value(1) == 2) == (result.instance(i).value(1) == 1));
  }
}

public void testNominalEncoding(){
  ((MakeIndicator)m_Filter).setAttributeIndex("2");
  ((MakeIndicator)m_Filter).setNumeric(false);
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  assertEquals("New attribute encoding should be NOMINAL",Attribute.NOMINAL,result.attribute(1).type());
  for (int i=0; i < result.numInstances(); i++) {
    assertTrue("Checking indicator for instance: " + (i + 1),(m_Instances.instance(i).value(1) == 2) == (result.instance(i).value(1) == 1));
  }
}

public void testMultiValueIndication(){
  ((MakeIndicator)m_Filter).setAttributeIndex("2");
  try {
    ((MakeIndicator)m_Filter).setValueIndices("1,3");
  }
 catch (  Exception ex) {
    fail("Is Range broken?");
  }
  ((MakeIndicator)m_Filter).setNumeric(false);
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  assertEquals("New attribute encoding should be NOMINAL",Attribute.NOMINAL,result.attribute(1).type());
  for (int i=0; i < result.numInstances(); i++) {
    assertTrue("Checking indicator for instance: " + (i + 1),((m_Instances.instance(i).value(1) == 0) || (m_Instances.instance(i).value(1) == 2)) == (result.instance(i).value(1) == 1));
  }
}

/** 
 * tests the filter in conjunction with the FilteredClassifier
 */
public void testFilteredClassifier(){
  try {
    Instances data=getFilteredClassifierData();
    for (int i=0; i < data.numAttributes(); i++) {
      if (data.classIndex() == i)       continue;
      if (data.attribute(i).isNominal()) {
        ((MakeIndicator)m_FilteredClassifier.getFilter()).setAttributeIndex("" + (i + 1));
        break;
      }
    }
  }
 catch (  Exception e) {
    fail("Problem setting up test for FilteredClassifier: " + e.toString());
  }
  super.testFilteredClassifier();
}

public static Test suite(){
  return new TestSuite(MakeIndicatorTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
