namespace weka.experiment.xml;

class XMLExperiment
{
  isA XMLBasicSerialization;
 depend java.beans.PropertyDescriptor;
 depend java.io.BufferedInputStream;
 depend java.io.BufferedOutputStream;
 depend java.io.FileInputStream;
 depend java.io.FileOutputStream;
 depend java.io.ObjectInputStream;
 depend java.io.ObjectOutputStream;
 depend java.util.Vector;
 depend org.w3c.dom.Element;
 depend weka.core.RevisionUtils;
 depend weka.core.xml.XMLBasicSerialization;
 depend weka.core.xml.XMLDocument;
 depend weka.experiment.Experiment;
 depend weka.experiment.PropertyNode;
/** 
 * the name of the classFirst property 
 */
public final static String NAME_CLASSFIRST="classFirst";

/** 
 * PropertyNode member 
 */
public final static String NAME_PROPERTYNODE_VALUE="value";

/** 
 * PropertyNode member 
 */
public final static String NAME_PROPERTYNODE_PARENTCLASS="parentClass";

/** 
 * PropertyNode member 
 */
public final static String NAME_PROPERTYNODE_PROPERTY="property";

/** 
 * initializes the serialization
 * @throws Exception if initialization fails
 */
public XMLExperiment() throws Exception {
  super();
}

/** 
 * generates internally a new XML document and clears also the IgnoreList and the mappings for the Read/Write-Methods
 * @throws Exception if initializing fails
 */
@Override public void clear() throws Exception {
  super.clear();
  m_Properties.addIgnored(VAL_ROOT + ".options");
  m_Properties.addIgnored(Experiment.class,"options");
  m_Properties.addAllowed(weka.classifiers.Classifier.class,"debug");
  m_Properties.addAllowed(weka.classifiers.Classifier.class,"options");
  m_Properties.addAllowed(weka.experiment.SplitEvaluator.class,"options");
  m_Properties.addAllowed(weka.experiment.ResultProducer.class,"options");
  m_CustomMethods.register(this,PropertyNode.class,"PropertyNode");
}

/** 
 * enables derived classes to add other properties to the DOM tree, e.g. ones that do not apply to the get/set convention of beans.
 * @param o the object that is serialized into XML
 * @throws Exception if post-processing fails
 */
@Override protected void writePostProcess(Object o) throws Exception {
  Element node;
  node=addElement(m_Document.getDocument().getDocumentElement(),NAME_CLASSFIRST,Boolean.class.getName(),false);
  node.appendChild(node.getOwnerDocument().createTextNode(new Boolean(false).toString()));
}

/** 
 * additional post-processing can happen in derived classes after reading from XML.
 * @param o the object to perform some additional processing on
 * @return the processed object
 * @throws Exception if post-processing fails
 */
@Override protected Object readPostProcess(Object o) throws Exception {
  Element node;
  Experiment exp;
  int i;
  Vector<Element> children;
  exp=(Experiment)o;
  children=XMLDocument.getChildTags(m_Document.getDocument().getDocumentElement());
  for (i=0; i < children.size(); i++) {
    node=children.get(i);
    if (node.getAttribute(ATT_NAME).equals(NAME_CLASSFIRST)) {
      exp.classFirst(new Boolean(XMLDocument.getContent(node)).booleanValue());
      break;
    }
  }
  return o;
}

/** 
 * adds the given PropertyNode to a DOM structure.
 * @param parent the parent of this object, e.g. the class this object is amember of
 * @param o the Object to describe in XML
 * @param name the name of the object
 * @return the node that was created
 * @throws Exception if the DOM creation fails
 */
public Element writePropertyNode(Element parent,Object o,String name) throws Exception {
  Element node;
  PropertyNode pnode;
  Vector<Element> children;
  int i;
  Element child;
  if (DEBUG) {
    trace(new Throwable(),name);
  }
  m_CurrentNode=parent;
  pnode=(PropertyNode)o;
  node=(Element)parent.appendChild(m_Document.getDocument().createElement(TAG_OBJECT));
  node.setAttribute(ATT_NAME,name);
  node.setAttribute(ATT_CLASS,pnode.getClass().getName());
  node.setAttribute(ATT_PRIMITIVE,VAL_NO);
  node.setAttribute(ATT_ARRAY,VAL_NO);
  if (pnode.value != null) {
    invokeWriteToXML(node,pnode.value,NAME_PROPERTYNODE_VALUE);
  }
  if (pnode.parentClass != null) {
    invokeWriteToXML(node,pnode.parentClass.getName(),NAME_PROPERTYNODE_PARENTCLASS);
  }
  if (pnode.property != null) {
    invokeWriteToXML(node,pnode.property.getDisplayName(),NAME_PROPERTYNODE_PROPERTY);
  }
  if ((pnode.value != null) && (pnode.property != null) && (pnode.property.getPropertyType().isPrimitive())) {
    children=XMLDocument.getChildTags(node);
    for (i=0; i < children.size(); i++) {
      child=children.get(i);
      if (!child.getAttribute(ATT_NAME).equals(NAME_PROPERTYNODE_VALUE)) {
        continue;
      }
      child.setAttribute(ATT_CLASS,pnode.property.getPropertyType().getName());
      child.setAttribute(ATT_PRIMITIVE,VAL_YES);
    }
  }
  return node;
}

/** 
 * builds the PropertyNode from the given DOM node.
 * @param node the associated XML node
 * @return the instance created from the XML description
 * @throws Exception if instantiation fails
 * @see javax.swing.DefaultListModel
 */
public Object readPropertyNode(Element node) throws Exception {
  Object result;
  Object value;
  String parentClass;
  String property;
  Vector<Element> children;
  Element child;
  int i;
  Class<?> cls;
  if (DEBUG) {
    trace(new Throwable(),node.getAttribute(ATT_NAME));
  }
  m_CurrentNode=node;
  result=null;
  children=XMLDocument.getChildTags(node);
  value=null;
  parentClass=null;
  property=null;
  for (i=0; i < children.size(); i++) {
    child=children.get(i);
    if (child.getAttribute(ATT_NAME).equals(NAME_PROPERTYNODE_VALUE)) {
      if (stringToBoolean(child.getAttribute(ATT_PRIMITIVE))) {
        value=getPrimitive(child);
      }
 else {
        value=invokeReadFromXML(child);
      }
    }
    if (child.getAttribute(ATT_NAME).equals(NAME_PROPERTYNODE_PARENTCLASS)) {
      parentClass=XMLDocument.getContent(child);
    }
    if (child.getAttribute(ATT_NAME).equals(NAME_PROPERTYNODE_PROPERTY)) {
      property=XMLDocument.getContent(child);
    }
  }
  if (parentClass != null) {
    cls=Class.forName(parentClass);
  }
 else {
    cls=null;
  }
  if (cls != null) {
    result=new PropertyNode(value,new PropertyDescriptor(property,cls),cls);
  }
 else {
    result=new PropertyNode(value);
  }
  return result;
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10204 $");
}

/** 
 * for testing only. if the first argument is a filename with ".xml" as extension it tries to generate an instance from the XML description and does a <code>toString()</code> of the generated object. Otherwise it loads the binary file, saves the XML representation in a file with the original filename appended by ".xml" and once again in a binary file with the original filename appended by ".exp".
 * @param args the commandline arguments
 * @throws Exception if something goes wrong, e.g., file not found
 */
public static void main(String[] args) throws Exception {
  if (args.length > 0) {
    if (args[0].toLowerCase().endsWith(".xml")) {
      System.out.println(new XMLExperiment().read(args[0]).toString());
    }
 else {
      FileInputStream fi=new FileInputStream(args[0]);
      ObjectInputStream oi=new ObjectInputStream(new BufferedInputStream(fi));
      Object o=oi.readObject();
      oi.close();
      new XMLExperiment().write(new BufferedOutputStream(new FileOutputStream(args[0] + ".xml")),o);
      FileOutputStream fo=new FileOutputStream(args[0] + ".exp");
      ObjectOutputStream oo=new ObjectOutputStream(new BufferedOutputStream(fo));
      oo.writeObject(o);
      oo.close();
    }
  }
}
}
