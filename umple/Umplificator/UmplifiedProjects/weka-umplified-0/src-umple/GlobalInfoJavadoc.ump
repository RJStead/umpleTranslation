namespace weka.core;

class GlobalInfoJavadoc
{
  isA Javadoc;
 depend java.lang.reflect.Method;
/** 
 * the globalInfo method name 
 */
public final static String GLOBALINFO_METHOD="globalInfo";

/** 
 * the start comment tag for inserting the generated Javadoc 
 */
public final static String GLOBALINFO_STARTTAG="<!-- globalinfo-start -->";

/** 
 * the end comment tag for inserting the generated Javadoc 
 */
public final static String GLOBALINFO_ENDTAG="<!-- globalinfo-end -->";

/** 
 * default constructor 
 */
public GlobalInfoJavadoc(){
  super();
  m_StartTag=new String[1];
  m_EndTag=new String[1];
  m_StartTag[0]=GLOBALINFO_STARTTAG;
  m_EndTag[0]=GLOBALINFO_ENDTAG;
}

/** 
 * generates and returns the Javadoc for the specified start/end tag pair.
 * @param index	the index in the start/end tag array
 * @return		the generated Javadoc
 * @throws Exception 	in case the generation fails
 */
protected String generateJavadoc(int index) throws Exception {
  String result;
  Method method;
  result="";
  if (index == 0) {
    if (!canInstantiateClass())     return result;
    try {
      method=getInstance().getClass().getMethod(GLOBALINFO_METHOD,(Class[])null);
    }
 catch (    Exception e) {
      return result;
    }
    result=toHTML((String)method.invoke(getInstance(),(Object[])null));
    result=result.trim() + "\n<p/>\n";
    if (getUseStars())     result=indent(result,1,"* ");
  }
  return result;
}

/** 
 * Returns the revision string.
 * @return		the revision
 */
public String getRevision(){
  return RevisionUtils.extract("$Revision: 8034 $");
}

/** 
 * Parses the given commandline parameters and generates the Javadoc.
 * @param args	the commandline parameters for the object
 */
public static void main(String[] args){
  runJavadoc(new GlobalInfoJavadoc(),args);
}
}
