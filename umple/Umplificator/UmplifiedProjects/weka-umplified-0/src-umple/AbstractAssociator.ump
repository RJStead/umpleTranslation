namespace weka.associations;

class AbstractAssociator
{
  isA Cloneable,Associator,Serializable,CapabilitiesHandler,CapabilitiesIgnorer,RevisionHandler;
 depend java.io.Serializable;
 depend weka.core.Capabilities;
 depend weka.core.CapabilitiesHandler;
 depend weka.core.CapabilitiesIgnorer;
 depend weka.core.RevisionHandler;
 depend weka.core.RevisionUtils;
 depend weka.core.SerializedObject;
 depend weka.core.Utils;
/** 
 * for serialization 
 */
private static final long serialVersionUID=-3017644543382432070L;

/** 
 * Whether capabilities should not be checked 
 */
protected boolean m_DoNotCheckCapabilities=false;

/** 
 * Returns the tip text for this property
 * @return tip text for this property suitable for displaying in theexplorer/experimenter gui
 */
public String doNotCheckCapabilitiesTipText(){
  return "If set, associator capabilities are not checked before associator is built" + " (Use with caution to reduce runtime).";
}

/** 
 * Set whether not to check capabilities.
 * @param doNotCheckCapabilities true if capabilities are not to be checked.
 */
public void setDoNotCheckCapabilities(boolean doNotCheckCapabilities){
  m_DoNotCheckCapabilities=doNotCheckCapabilities;
}

/** 
 * Get whether capabilities checking is turned off.
 * @return true if capabilities checking is turned off.
 */
public boolean getDoNotCheckCapabilities(){
  return m_DoNotCheckCapabilities;
}

/** 
 * Creates a new instance of a associator given it's class name and (optional) arguments to pass to it's setOptions method. If the associator implements OptionHandler and the options parameter is non-null, the associator will have it's options set.
 * @param associatorName the fully qualified class name of the associator
 * @param options an array of options suitable for passing to setOptions. Maybe null.
 * @return the newly created associator, ready for use.
 * @exception Exception if the associator name is invalid, or the optionssupplied are not acceptable to the associator
 */
public static Associator forName(String associatorName,String[] options) throws Exception {
  return (Associator)Utils.forName(Associator.class,associatorName,options);
}

/** 
 * Creates a deep copy of the given associator using serialization.
 * @param model the associator to copy
 * @return a deep copy of the associator
 * @exception Exception if an error occurs
 */
public static Associator makeCopy(Associator model) throws Exception {
  return (Associator)new SerializedObject(model).getObject();
}

/** 
 * Creates copies of the current associator. Note that this method now uses Serialization to perform a deep copy, so the Associator object must be fully Serializable. Any currently built model will now be copied as well.
 * @param model an example associator to copy
 * @param num the number of associators copies to create.
 * @return an array of associators.
 * @exception Exception if an error occurs 
 */
public static Associator[] makeCopies(Associator model,int num) throws Exception {
  if (model == null) {
    throw new Exception("No model associator set");
  }
  Associator[] associators=new Associator[num];
  SerializedObject so=new SerializedObject(model);
  for (int i=0; i < associators.length; i++) {
    associators[i]=(Associator)so.getObject();
  }
  return associators;
}

/** 
 * Returns the Capabilities of this associator. Maximally permissive capabilities are allowed by default. Derived associators should override this method and first disable all capabilities and then enable just those capabilities that make sense for the scheme.
 * @return            the capabilities of this object
 * @see Capabilities
 */
public Capabilities getCapabilities(){
  Capabilities defaultC=new Capabilities(this);
  defaultC.enableAll();
  return defaultC;
}

/** 
 * Returns the revision string.
 * @return            the revision
 */
public String getRevision(){
  return RevisionUtils.extract("$Revision: 11006 $");
}

/** 
 * runs the associator with the given commandline options
 * @param associator	the associator to run
 * @param options	the commandline options
 */
public static void runAssociator(Associator associator,String[] options){
  try {
    System.out.println(AssociatorEvaluation.evaluate(associator,options));
  }
 catch (  Exception e) {
    if ((e.getMessage() != null) && (e.getMessage().indexOf("General options") == -1))     e.printStackTrace();
 else     System.err.println(e.getMessage());
  }
}
}
