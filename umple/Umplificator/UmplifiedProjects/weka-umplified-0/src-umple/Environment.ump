namespace weka.core;

class Environment
{
  isA RevisionHandler;
 depend java.util.Enumeration;
 depend java.util.Iterator;
 depend java.util.Map;
 depend java.util.Properties;
 depend java.util.Set;
 depend java.util.TreeMap;
private static Environment m_systemWide=new Environment();

private final Map<String,String> m_envVars=new TreeMap<String,String>();

public Environment(){
  Map<String,String> env=System.getenv();
  Set<String> keys=env.keySet();
  Iterator<String> i=keys.iterator();
  while (i.hasNext()) {
    String kv=i.next();
    String value=env.get(kv);
    m_envVars.put(kv,value);
  }
  Properties jvmProps=System.getProperties();
  Enumeration<?> pKeys=jvmProps.propertyNames();
  while (pKeys.hasMoreElements()) {
    String kv=(String)pKeys.nextElement();
    String value=jvmProps.getProperty(kv);
    m_envVars.put(kv,value);
  }
  m_envVars.put("weka.version",Version.VERSION);
}

/** 
 * Get the singleton system-wide (visible to every class in the running VM) set of environment variables.
 * @return the system-wide set of environment variables.
 */
public static Environment getSystemWide(){
  return m_systemWide;
}

/** 
 * Tests for the presence of environment variables.
 * @param source the string to test
 * @return true if the argument contains one or more environment variables
 */
public static boolean containsEnvVariables(String source){
  return (source.indexOf("${") >= 0);
}

/** 
 * Substitute a variable names for their values in the given string.
 * @param source the source string to replace variables in
 * @return a String with all variable names replaced with their values
 * @throws Exception if an unknown variable name is encountered
 */
public String substitute(String source) throws Exception {
  int index=source.indexOf("${");
  while (index >= 0) {
    index+=2;
    int endIndex=source.indexOf('}');
    if (endIndex >= 0 && endIndex > index + 1) {
      String key=source.substring(index,endIndex);
      String replace=m_envVars.get(key);
      if (replace != null) {
        String toReplace="${" + key + "}";
        source=source.replace(toReplace,replace);
      }
 else {
        throw new Exception("[Environment] Variable " + key + " doesn't seem to be set.");
      }
    }
 else {
      break;
    }
    index=source.indexOf("${");
  }
  return source;
}

/** 
 * Add a variable to the internal map of this properties object.
 * @param key the name of the variable
 * @param value its value
 */
public void addVariable(String key,String value){
  m_envVars.put(key,value);
}

/** 
 * Add a a variable to the internal map of this properties object and to the global system-wide environment;
 * @param key the name of the variable
 * @param value its value
 */
public void addVariableSystemWide(String key,String value){
  addVariable(key,value);
  if (this != getSystemWide()) {
    getSystemWide().addVariableSystemWide(key,value);
  }
  System.setProperty(key,value);
}

/** 
 * Remove a named variable from the map.
 * @param key the name of the varaible to remove.
 */
public void removeVariable(String key){
  m_envVars.remove(key);
}

/** 
 * Get the names of the variables (keys) stored in the internal map.
 * @return a Set of variable names (keys)
 */
public Set<String> getVariableNames(){
  return m_envVars.keySet();
}

/** 
 * Get the value for a particular variable.
 * @param key the name of the variable to get
 * @return the associated value or null if this variable is not in theinternal map
 */
public String getVariableValue(String key){
  return m_envVars.get(key);
}

/** 
 * Main method for testing this class.
 * @param args a list of strings to replace variables in (e.g. "\${os.name}"\${java.version}")
 */
public static void main(String[] args){
  Environment t=new Environment();
  if (args.length == 0) {
    System.err.println("Usage: java weka.core.Environment <string> <string> ...");
  }
 else {
    try {
      for (      String arg : args) {
        String newS=t.substitute(arg);
        System.out.println("Original string:\n" + arg + "\n\nNew string:\n"+ newS);
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10203 $");
}
}
