namespace weka.gui.beans;

class ClassValuePickerCustomizer
{
  isA BeanCustomizer,CustomizerClosingListener,CustomizerCloseRequester;
  isA JPanel;
 depend java.awt.BorderLayout;
 depend java.awt.GridLayout;
 depend java.awt.Window;
 depend java.awt.event.ActionEvent;
 depend java.awt.event.ActionListener;
 depend java.beans.PropertyChangeListener;
 depend java.beans.PropertyChangeSupport;
 depend javax.swing.BorderFactory;
 depend javax.swing.DefaultComboBoxModel;
 depend javax.swing.JButton;
 depend javax.swing.JComboBox;
 depend javax.swing.JLabel;
 depend javax.swing.JPanel;
 depend javax.swing.JTextField;
 depend javax.swing.SwingConstants;
 depend weka.core.Instances;
/** 
 * for serialization 
 */
private static final long serialVersionUID=8213423053861600469L;

private boolean m_displayValNames=false;

private ClassValuePicker m_classValuePicker;

private PropertyChangeSupport m_pcSupport=new PropertyChangeSupport(this);

private JComboBox m_ClassValueCombo=new JComboBox();

private JPanel m_holderP=new JPanel();

private JLabel m_messageLabel=new JLabel("No customization possible at present.");

private ModifyListener m_modifyListener;

private boolean m_modified=false;

private Window m_parent;

private String m_backup;

private boolean m_textBoxEntryMode=false;

private JTextField m_valueTextBox;

public ClassValuePickerCustomizer(){
  setBorder(javax.swing.BorderFactory.createEmptyBorder(0,5,5,5));
  setLayout(new BorderLayout());
  add(new javax.swing.JLabel("ClassValuePickerCustomizer"),BorderLayout.NORTH);
  m_holderP.setLayout(new BorderLayout());
  m_holderP.setBorder(BorderFactory.createTitledBorder("Choose class value"));
  m_holderP.add(m_ClassValueCombo,BorderLayout.CENTER);
  m_ClassValueCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (m_classValuePicker != null) {
        m_classValuePicker.setClassValue(m_ClassValueCombo.getSelectedItem().toString());
        m_modified=true;
      }
    }
  }
);
  add(m_messageLabel,BorderLayout.CENTER);
  addButtons();
}

public void actionPerformed(ActionEvent e){
  if (m_classValuePicker != null) {
    m_classValuePicker.setClassValue(m_ClassValueCombo.getSelectedItem().toString());
    m_modified=true;
  }
}

private void addButtons(){
  JButton okBut=new JButton("OK");
  JButton cancelBut=new JButton("Cancel");
  JPanel butHolder=new JPanel();
  butHolder.setLayout(new GridLayout(1,2));
  butHolder.add(okBut);
  butHolder.add(cancelBut);
  add(butHolder,BorderLayout.SOUTH);
  okBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (m_modifyListener != null) {
        m_modifyListener.setModifiedStatus(ClassValuePickerCustomizer.this,m_modified);
      }
      if (m_textBoxEntryMode) {
        m_classValuePicker.setClassValue(m_valueTextBox.getText().trim());
      }
      if (m_parent != null) {
        m_parent.dispose();
      }
    }
  }
);
  cancelBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_classValuePicker.setClassValue(m_backup);
      customizerClosing();
      if (m_parent != null) {
        m_parent.dispose();
      }
    }
  }
);
}

public void actionPerformed(ActionEvent e){
  if (m_modifyListener != null) {
    m_modifyListener.setModifiedStatus(ClassValuePickerCustomizer.this,m_modified);
  }
  if (m_textBoxEntryMode) {
    m_classValuePicker.setClassValue(m_valueTextBox.getText().trim());
  }
  if (m_parent != null) {
    m_parent.dispose();
  }
}

public void actionPerformed(ActionEvent e){
  m_classValuePicker.setClassValue(m_backup);
  customizerClosing();
  if (m_parent != null) {
    m_parent.dispose();
  }
}

private void setupTextBoxSelection(){
  m_textBoxEntryMode=true;
  JPanel holderPanel=new JPanel();
  holderPanel.setLayout(new BorderLayout());
  holderPanel.setBorder(BorderFactory.createTitledBorder("Specify class label"));
  JLabel label=new JLabel("Class label ",SwingConstants.RIGHT);
  holderPanel.add(label,BorderLayout.WEST);
  m_valueTextBox=new JTextField(15);
  m_valueTextBox.setToolTipText("Class label. /first, /last and /<num> " + "can be used to specify the first, last or specific index " + "of the label to use respectively.");
  holderPanel.add(m_valueTextBox,BorderLayout.CENTER);
  JPanel holder2=new JPanel();
  holder2.setLayout(new BorderLayout());
  holder2.add(holderPanel,BorderLayout.NORTH);
  add(holder2,BorderLayout.CENTER);
  String existingClassVal=m_classValuePicker.getClassValue();
  if (existingClassVal != null) {
    m_valueTextBox.setText(existingClassVal);
  }
}

private void setUpValueSelection(Instances format){
  if (format.classIndex() < 0 || format.classAttribute().isNumeric()) {
    m_messageLabel.setText((format.classIndex() < 0) ? "EROR: no class attribute set" : "ERROR: class is numeric");
    return;
  }
  if (m_displayValNames == false) {
    remove(m_messageLabel);
  }
  m_textBoxEntryMode=false;
  if (format.classAttribute().numValues() == 0) {
    setupTextBoxSelection();
    validate();
    repaint();
    return;
  }
  String existingClassVal=m_classValuePicker.getClassValue();
  if (existingClassVal == null) {
    existingClassVal="";
  }
  int classValIndex=format.classAttribute().indexOfValue(existingClassVal);
  if (existingClassVal.startsWith("/")) {
    existingClassVal=existingClassVal.substring(1);
    if (existingClassVal.equalsIgnoreCase("first")) {
      classValIndex=0;
    }
 else     if (existingClassVal.equalsIgnoreCase("last")) {
      classValIndex=format.classAttribute().numValues() - 1;
    }
 else {
      classValIndex=Integer.parseInt(existingClassVal);
      classValIndex--;
    }
  }
  if (classValIndex < 0) {
    classValIndex=0;
  }
  String[] attribValNames=new String[format.classAttribute().numValues()];
  for (int i=0; i < attribValNames.length; i++) {
    attribValNames[i]=format.classAttribute().value(i);
  }
  m_ClassValueCombo.setModel(new DefaultComboBoxModel(attribValNames));
  if (attribValNames.length > 0) {
    m_ClassValueCombo.setSelectedIndex(classValIndex);
  }
  if (m_displayValNames == false) {
    add(m_holderP,BorderLayout.CENTER);
    m_displayValNames=true;
  }
  validate();
  repaint();
}

/** 
 * Set the bean to be edited
 * @param object an <code>Object</code> value
 */
public void setObject(Object object){
  if (m_classValuePicker != (ClassValuePicker)object) {
    m_classValuePicker=(ClassValuePicker)object;
    if (m_classValuePicker.getConnectedFormat() != null) {
      setUpValueSelection(m_classValuePicker.getConnectedFormat());
    }
    m_backup=m_classValuePicker.getClassValue();
  }
}

public void customizerClosing(){
  m_classValuePicker.setClassValue(m_backup);
}

/** 
 * Add a property change listener
 * @param pcl a <code>PropertyChangeListener</code> value
 */
public void addPropertyChangeListener(PropertyChangeListener pcl){
  m_pcSupport.addPropertyChangeListener(pcl);
}

/** 
 * Remove a property change listener
 * @param pcl a <code>PropertyChangeListener</code> value
 */
public void removePropertyChangeListener(PropertyChangeListener pcl){
  m_pcSupport.removePropertyChangeListener(pcl);
}

@Override public void setModifiedListener(ModifyListener l){
  m_modifyListener=l;
}

@Override public void setParentWindow(Window parent){
  m_parent=parent;
}
}
