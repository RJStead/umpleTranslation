namespace weka.gui.streams;

class InstanceTable
{
  isA InstanceListener;
  isA JPanel;
 depend java.awt.BorderLayout;
 depend javax.swing.JPanel;
 depend javax.swing.JScrollPane;
 depend javax.swing.JTable;
 depend javax.swing.table.AbstractTableModel;
 depend javax.swing.table.TableModel;
 depend weka.core.Instance;
 depend weka.core.Instances;
/** 
 * for serialization 
 */
private static final long serialVersionUID=-2462533698100834803L;

private final JTable m_InstanceTable;

private boolean m_Debug;

private Instances m_Instances;

private static final long serialVersionUID=5447106383000555291L;

public void inputFormat(Instances instanceInfo){
  if (m_Debug) {
    System.err.println("InstanceTable::inputFormat()\n" + instanceInfo.toString());
  }
  m_Instances=instanceInfo;
}

public void input(Instance instance) throws Exception {
  if (m_Debug) {
    System.err.println("InstanceTable::input(" + instance + ")");
  }
  m_Instances.add(instance);
}

public void batchFinished(){
  TableModel newModel=new AbstractTableModel(){
    private static final long serialVersionUID=5447106383000555291L;
    @Override public String getColumnName(    int col){
      return m_Instances.attribute(col).name();
    }
    @Override public Class<?> getColumnClass(    int col){
      return "".getClass();
    }
    @Override public int getColumnCount(){
      return m_Instances.numAttributes();
    }
    @Override public int getRowCount(){
      return m_Instances.numInstances();
    }
    @Override public Object getValueAt(    int row,    int col){
      return new String(m_Instances.instance(row).toString(col));
    }
  }
;
  m_InstanceTable.setModel(newModel);
  if (m_Debug) {
    System.err.println("InstanceTable::batchFinished()");
  }
}

@Override public String getColumnName(int col){
  return m_Instances.attribute(col).name();
}

@Override public Class<?> getColumnClass(int col){
  return "".getClass();
}

@Override public int getColumnCount(){
  return m_Instances.numAttributes();
}

@Override public int getRowCount(){
  return m_Instances.numInstances();
}

@Override public Object getValueAt(int row,int col){
  return new String(m_Instances.instance(row).toString(col));
}

public InstanceTable(){
  setLayout(new BorderLayout());
  m_InstanceTable=new JTable();
  add("Center",new JScrollPane(m_InstanceTable));
}

public void setDebug(boolean debug){
  m_Debug=debug;
}

public boolean getDebug(){
  return m_Debug;
}

@Override public void instanceProduced(InstanceEvent e){
  Object source=e.getSource();
  if (source instanceof InstanceProducer) {
    try {
      InstanceProducer a=(InstanceProducer)source;
switch (e.getID()) {
case InstanceEvent.FORMAT_AVAILABLE:
        inputFormat(a.outputFormat());
      break;
case InstanceEvent.INSTANCE_AVAILABLE:
    input(a.outputPeek());
  break;
case InstanceEvent.BATCH_FINISHED:
batchFinished();
break;
default :
System.err.println("InstanceTable::instanceProduced()" + " - unknown event type");
break;
}
}
 catch (Exception ex) {
System.err.println(ex.getMessage());
}
}
 else {
System.err.println("InstanceTable::instanceProduced()" + " - Unknown source object type");
}
}
}
