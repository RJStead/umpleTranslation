namespace weka.filters.unsupervised.attribute;

class Obfuscate
{
  isA UnsupervisedFilter,StreamableFilter;
  isA Filter;
 depend java.util.ArrayList;
 depend weka.core.Attribute;
 depend weka.core.Capabilities;
 depend weka.core.Capabilities.Capability;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.RevisionUtils;
 depend weka.filters.Filter;
 depend weka.filters.StreamableFilter;
 depend weka.filters.UnsupervisedFilter;
/** 
 * for serialization 
 */
static final long serialVersionUID=-343922772462971561L;

/** 
 * Returns a string describing this filter
 * @return a description of the filter suitable for displaying in theexplorer/experimenter gui
 */
public String globalInfo(){
  return "A simple instance filter that renames the relation, all attribute names " + "and all nominal (and string) attribute values. For exchanging sensitive " + "datasets. Currently doesn't like string or relational attributes.";
}

/** 
 * Returns the Capabilities of this filter.
 * @return the capabilities of this object
 * @see Capabilities
 */
@Override public Capabilities getCapabilities(){
  Capabilities result=super.getCapabilities();
  result.disableAll();
  result.enableAllAttributes();
  result.enable(Capability.MISSING_VALUES);
  result.enableAllClasses();
  result.enable(Capability.MISSING_CLASS_VALUES);
  result.enable(Capability.NO_CLASS);
  return result;
}

/** 
 * Sets the format of the input instances.
 * @param instanceInfo an Instances object containing the input instancestructure (any instances contained in the object are ignored - only the structure is required).
 * @return true if the outputFormat may be collected immediately
 * @throws Exception if
 */
@Override public boolean setInputFormat(Instances instanceInfo) throws Exception {
  super.setInputFormat(instanceInfo);
  ArrayList<Attribute> v=new ArrayList<Attribute>();
  for (int i=0; i < instanceInfo.numAttributes(); i++) {
    Attribute oldAtt=instanceInfo.attribute(i);
    Attribute newAtt=null;
switch (oldAtt.type()) {
case Attribute.NUMERIC:
      newAtt=new Attribute("A" + (i + 1));
    break;
case Attribute.DATE:
  String format=oldAtt.getDateFormat();
newAtt=new Attribute("A" + (i + 1),format);
break;
case Attribute.NOMINAL:
ArrayList<String> vals=new ArrayList<String>();
for (int j=0; j < oldAtt.numValues(); j++) {
vals.add("V" + (j + 1));
}
newAtt=new Attribute("A" + (i + 1),vals);
break;
case Attribute.STRING:
case Attribute.RELATIONAL:
default :
newAtt=(Attribute)oldAtt.copy();
System.err.println("Not converting attribute: " + oldAtt.name());
break;
}
newAtt.setWeight(oldAtt.weight());
v.add(newAtt);
}
Instances newHeader=new Instances("R",v,10);
newHeader.setClassIndex(instanceInfo.classIndex());
setOutputFormat(newHeader);
return true;
}

/** 
 * Input an instance for filtering. Ordinarily the instance is processed and made available for output immediately. Some filters require all instances be read before producing output.
 * @param instance the input instance
 * @return true if the filtered instance may now be collected with output().
 * @throws IllegalStateException if no input format has been set.
 */
@Override public boolean input(Instance instance){
  if (getInputFormat() == null) {
    throw new IllegalStateException("No input instance format defined");
  }
  if (m_NewBatch) {
    resetQueue();
    m_NewBatch=false;
  }
  push((Instance)instance.copy());
  return true;
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10215 $");
}

/** 
 * Main method for testing this class.
 * @param argv should contain arguments to the filter: use -h for help
 */
public static void main(String[] argv){
  runFilter(new Obfuscate(),argv);
}
}
