namespace weka.filters.unsupervised.attribute;

class TransposeTest
{
  isA AbstractFilterTest;
 depend weka.core.Instances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend weka.filters.unsupervised.attribute.Remove;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
 depend java.io.BufferedReader;
 depend java.io.InputStreamReader;
public TransposeTest(String name){
  super(name);
}

/** 
 * Creates a default Transpose 
 */
public Filter getFilter(){
  return new Transpose();
}

protected void setUp() throws Exception {
  m_Filter=getFilter();
  m_Instances=new Instances(new BufferedReader(new InputStreamReader(ClassLoader.getSystemResourceAsStream("weka/filters/data/FilterTest.arff"))));
  Remove r=new Remove();
  r.setAttributeIndices("1, 2, 4, 5");
  r.setInputFormat(m_Instances);
  m_Instances=Filter.useFilter(m_Instances,r);
  m_OptionTester=getOptionTester();
  m_GOETester=getGOETester();
  m_FilteredClassifier=null;
}

/** 
 * This filter does not support batch filtering. 
 */
public void testBatchFiltering(){
  return;
}

public void testBatchFilteringSmaller(){
  return;
}

public void testBatchFilteringLarger(){
  return;
}

public void testTypical(){
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numInstances());
}

public static Test suite(){
  return new TestSuite(TransposeTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
