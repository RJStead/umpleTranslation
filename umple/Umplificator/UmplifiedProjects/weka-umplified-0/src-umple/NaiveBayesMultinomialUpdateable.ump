namespace weka.classifiers.bayes;

class NaiveBayesMultinomialUpdateable
{
  isA UpdateableClassifier;
  isA NaiveBayesMultinomial;
 depend weka.classifiers.UpdateableClassifier;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.RevisionUtils;
 depend weka.core.Utils;
/** 
 * for serialization 
 */
private static final long serialVersionUID=-7204398796974263186L;

/** 
 * the word count per class 
 */
protected double[] m_wordsPerClass;

/** 
 * Returns a string describing this classifier
 * @return a description of the classifier suitable for displaying in theexplorer/experimenter gui
 */
@Override public String globalInfo(){
  return super.globalInfo() + "\n\n" + "Incremental version of the algorithm.";
}

/** 
 * Generates the classifier.
 * @param instances set of instances serving as training data
 * @throws Exception if the classifier has not been generated successfully
 */
@Override public void buildClassifier(Instances instances) throws Exception {
  getCapabilities().testWithFail(instances);
  instances=new Instances(instances);
  instances.deleteWithMissingClass();
  m_headerInfo=new Instances(instances,0);
  m_numClasses=instances.numClasses();
  m_numAttributes=instances.numAttributes();
  m_probOfWordGivenClass=new double[m_numClasses][];
  m_wordsPerClass=new double[m_numClasses];
  m_probOfClass=new double[m_numClasses];
  double laplace=1;
  for (int c=0; c < m_numClasses; c++) {
    m_probOfWordGivenClass[c]=new double[m_numAttributes];
    m_probOfClass[c]=laplace;
    m_wordsPerClass[c]=laplace * m_numAttributes;
    for (int att=0; att < m_numAttributes; att++) {
      m_probOfWordGivenClass[c][att]=laplace;
    }
  }
  for (int i=0; i < instances.numInstances(); i++) {
    updateClassifier(instances.instance(i));
  }
}

/** 
 * Updates the classifier with the given instance.
 * @param instance the new training instance to include in the model
 * @throws Exception if the instance could not be incorporated in the model.
 */
@Override public void updateClassifier(Instance instance) throws Exception {
  int classIndex=(int)instance.value(instance.classIndex());
  m_probOfClass[classIndex]+=instance.weight();
  for (int a=0; a < instance.numValues(); a++) {
    if (instance.index(a) == instance.classIndex() || instance.isMissing(a)) {
      continue;
    }
    double numOccurences=instance.valueSparse(a) * instance.weight();
    m_wordsPerClass[classIndex]+=numOccurences;
    if (m_wordsPerClass[classIndex] < 0) {
      throw new Exception("Can't have a negative number of words for class " + (classIndex + 1));
    }
    m_probOfWordGivenClass[classIndex][instance.index(a)]+=numOccurences;
    if (m_probOfWordGivenClass[classIndex][instance.index(a)] < 0) {
      throw new Exception("Can't have a negative conditional sum for attribute " + instance.index(a));
    }
  }
}

/** 
 * Calculates the class membership probabilities for the given test instance.
 * @param instance the instance to be classified
 * @return predicted class probability distribution
 * @throws Exception if there is a problem generating the prediction
 */
@Override public double[] distributionForInstance(Instance instance) throws Exception {
  double[] probOfClassGivenDoc=new double[m_numClasses];
  double[] logDocGivenClass=new double[m_numClasses];
  for (int c=0; c < m_numClasses; c++) {
    logDocGivenClass[c]+=Math.log(m_probOfClass[c]);
    int allWords=0;
    for (int i=0; i < instance.numValues(); i++) {
      if (instance.index(i) == instance.classIndex()) {
        continue;
      }
      double frequencies=instance.valueSparse(i);
      allWords+=frequencies;
      logDocGivenClass[c]+=frequencies * Math.log(m_probOfWordGivenClass[c][instance.index(i)]);
    }
    logDocGivenClass[c]-=allWords * Math.log(m_wordsPerClass[c]);
  }
  double max=logDocGivenClass[Utils.maxIndex(logDocGivenClass)];
  for (int i=0; i < m_numClasses; i++) {
    probOfClassGivenDoc[i]=Math.exp(logDocGivenClass[i] - max);
  }
  Utils.normalize(probOfClassGivenDoc);
  return probOfClassGivenDoc;
}

/** 
 * Returns a string representation of the classifier.
 * @return a string representation of the classifier
 */
@Override public String toString(){
  StringBuffer result=new StringBuffer();
  result.append("Dictionary size: " + m_numAttributes).append("\n\n");
  result.append("The independent frequency of a class\n");
  result.append("--------------------------------------\n");
  for (int c=0; c < m_numClasses; c++) {
    result.append(m_headerInfo.classAttribute().value(c)).append("\t").append(Double.toString(m_probOfClass[c])).append("\n");
  }
  result.append("\nThe frequency of a word given the class\n");
  result.append("-----------------------------------------\n");
  for (int c=0; c < m_numClasses; c++) {
    result.append(Utils.padLeft(m_headerInfo.classAttribute().value(c),11)).append("\t");
  }
  result.append("\n");
  for (int w=0; w < m_numAttributes; w++) {
    if (w == m_headerInfo.classIndex()) {
      continue;
    }
    for (int c=0; c < m_numClasses; c++) {
      result.append(Utils.padLeft(Double.toString(m_probOfWordGivenClass[c][w]),11)).append("\t");
    }
    result.append(m_headerInfo.attribute(w).name());
    result.append("\n");
  }
  return result.toString();
}

/** 
 * Returns the revision string.
 * @return the revision
 */
@Override public String getRevision(){
  return RevisionUtils.extract("$Revision: 10636 $");
}

/** 
 * Main method for testing this class.
 * @param args the options
 */
public static void main(String[] args){
  runClassifier(new NaiveBayesMultinomialUpdateable(),args);
}
}
