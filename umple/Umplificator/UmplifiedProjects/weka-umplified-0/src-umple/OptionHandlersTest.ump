namespace weka.core;

class OptionHandlerTest
{
  isA TestCase;
 depend java.lang.reflect.Method;
 depend java.util.Enumeration;
 depend java.util.Properties;
 depend java.util.StringTokenizer;
 depend java.util.Vector;
 depend junit.framework.Test;
 depend junit.framework.TestCase;
 depend junit.framework.TestSuite;
 depend weka.gui.GenericPropertiesCreator;
/** 
 * the class to test 
 */
protected String m_Classname;

/** 
 * the OptionHandler tester 
 */
protected CheckOptionHandler m_OptionTester;

/** 
 * Constructs the <code>OptionHandlersTest</code>.
 * @param name the name of the test class
 * @param classname the actual classname
 */
public OptionHandlerTest(String name,String classname){
  super(name);
  m_Classname=classname;
}

/** 
 * returns the classname this test is for
 * @return the classname
 */
public String getClassname(){
  return m_Classname;
}

/** 
 * configures the optionhandler
 * @return the configured optionhandler, null in case of an error
 */
protected OptionHandler getOptionHandler(){
  OptionHandler result;
  try {
    result=(OptionHandler)Class.forName(m_Classname).newInstance();
  }
 catch (  Exception e) {
    result=null;
  }
  return result;
}

/** 
 * Called by JUnit before each test method.
 * @throws Exception if an error occurs
 */
@Override protected void setUp() throws Exception {
  super.setUp();
  m_OptionTester=new CheckOptionHandler();
  m_OptionTester.setOptionHandler(getOptionHandler());
  m_OptionTester.setUserOptions(new String[0]);
  m_OptionTester.setSilent(true);
}

/** 
 * Called by JUnit after each test method
 * @throws Exception if an error occurs
 */
@Override protected void tearDown() throws Exception {
  super.tearDown();
  m_OptionTester=null;
}

/** 
 * tests the listing of the options
 * @throws Exception if test fails
 */
public void testListOptions() throws Exception {
  if (m_OptionTester.getOptionHandler() != null) {
    if (!m_OptionTester.checkListOptions()) {
      fail(getClassname() + ": " + "Options cannot be listed via listOptions.");
    }
  }
}

/** 
 * tests the setting of the options
 * @throws Exception if test fails
 */
public void testSetOptions() throws Exception {
  if (m_OptionTester.getOptionHandler() != null) {
    if (!m_OptionTester.checkSetOptions()) {
      fail(getClassname() + ": " + "setOptions method failed.");
    }
  }
}

/** 
 * tests whether there are any remaining options
 * @throws Exception if test fails
 */
public void testRemainingOptions() throws Exception {
  if (m_OptionTester.getOptionHandler() != null) {
    if (!m_OptionTester.checkRemainingOptions()) {
      fail(getClassname() + ": " + "There were 'left-over' options.");
    }
  }
}

/** 
 * tests the whether the user-supplied options stay the same after setting. getting, and re-setting again.
 * @see #m_OptionTester
 * @throws Exception if test fails
 */
public void testCanonicalUserOptions() throws Exception {
  if (m_OptionTester.getOptionHandler() != null) {
    if (!m_OptionTester.checkCanonicalUserOptions()) {
      fail(getClassname() + ": " + "setOptions method failed");
    }
  }
}

/** 
 * tests the resetting of the options to the default ones
 * @throws Exception if test fails
 */
public void testResettingOptions() throws Exception {
  if (m_OptionTester.getOptionHandler() != null) {
    if (!m_OptionTester.checkSetOptions()) {
      fail(getClassname() + ": " + "Resetting of options failed");
    }
  }
}

/** 
 * Constructs the <code>OptionHandlersTest</code>.
 * @param name the name of the test class
 */
public OptionHandlersTest(String name){
  super(name);
}

/** 
 * dummy for JUnit, does nothing, only to prevent JUnit from complaining about "no tests"
 * @throws Exception never happens
 */
public void testDummy() throws Exception {
}

/** 
 * generate all tests
 * @return all the tests
 */
public static Test suite(){
  TestSuite suite=new TestSuite();
  try {
    Vector<String> testMethods=new Vector<String>();
    Method[] methods=OptionHandlerTest.class.getDeclaredMethods();
    for (    Method method : methods) {
      if (method.getName().startsWith("test")) {
        testMethods.add(method.getName());
      }
    }
    GenericPropertiesCreator creator=new GenericPropertiesCreator();
    creator.execute(false);
    Properties props=creator.getOutputProperties();
    Enumeration<?> names=props.propertyNames();
    while (names.hasMoreElements()) {
      String name=names.nextElement().toString();
      StringTokenizer tok=new StringTokenizer(props.getProperty(name,""),",");
      while (tok.hasMoreTokens()) {
        String classname=tok.nextToken();
        try {
          Class<?> cls=Class.forName(classname);
          if (!ClassDiscovery.hasInterface(OptionHandler.class,cls)) {
            continue;
          }
        }
 catch (        Exception e) {
          continue;
        }
        for (int i=0; i < testMethods.size(); i++) {
          suite.addTest(new OptionHandlerTest(testMethods.get(i),classname));
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return suite;
}

/** 
 * for running the tests from commandline
 * @param args the commandline arguments - ignored
 */
public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
