namespace weka.classifiers.meta;

class CostSensitiveClassifierTest
{
  isA AbstractClassifierTest;
 depend weka.classifiers.AbstractClassifierTest;
 depend weka.classifiers.Classifier;
 depend weka.classifiers.CostMatrix;
 depend java.io.InputStreamReader;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
public CostSensitiveClassifierTest(String name){
  super(name);
}

/** 
 * Called by JUnit before each test method. This implementation creates the default classifier to test and loads a test set of Instances.
 * @exception Exception if an error occurs reading the example instances.
 */
protected void setUp() throws Exception {
  super.setUp();
  m_NClasses=((CostSensitiveClassifier)getClassifier()).getCostMatrix().numRows();
}

/** 
 * Creates a default CostSensitiveClassifier 
 */
public Classifier getClassifier(){
  CostSensitiveClassifier cl=new CostSensitiveClassifier();
  try {
    cl.setCostMatrix(new CostMatrix(new InputStreamReader(ClassLoader.getSystemResourceAsStream("weka/classifiers/data/ClassifierTest.cost"))));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return cl;
}

public static Test suite(){
  return new TestSuite(CostSensitiveClassifierTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
