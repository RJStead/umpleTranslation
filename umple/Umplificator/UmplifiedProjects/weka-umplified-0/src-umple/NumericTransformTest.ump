namespace weka.filters.unsupervised.attribute;

class NumericTransformTest
{
  isA AbstractFilterTest;
 depend weka.core.Instances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
/** 
 * Tolerance allowed in double comparisons 
 */
private static final double TOLERANCE=0.001;

public NumericTransformTest(String name){
  super(name);
}

/** 
 * Creates a default NumericTransform 
 */
public Filter getFilter(){
  return getFilter("first-last");
}

/** 
 * Creates a specialized NumericTransform 
 */
public Filter getFilter(String rangelist){
  try {
    NumericTransform af=new NumericTransform();
    af.setAttributeIndices(rangelist);
    return af;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception setting attribute range: " + rangelist + "\n"+ ex.getMessage());
  }
  return null;
}

public void testDefault(){
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  for (int i=0; i < result.numInstances(); i++) {
    for (int j=0; j < result.numAttributes(); j++) {
      if (m_Instances.instance(i).isMissing(j)) {
        assertTrue(result.instance(i).isMissing(j));
      }
 else       if (result.attribute(j).isNumeric()) {
        assertEquals("Value should be same as Math.abs()",Math.abs(m_Instances.instance(i).value(j)),result.instance(i).value(j),TOLERANCE);
      }
 else {
        assertEquals("Value shouldn't have changed",m_Instances.instance(i).value(j),result.instance(i).value(j),TOLERANCE);
      }
    }
  }
}

public void testInverted(){
  m_Filter=getFilter("1-3");
  ((NumericTransform)m_Filter).setInvertSelection(true);
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  for (int i=0; i < result.numInstances(); i++) {
    for (int j=0; j < result.numAttributes(); j++) {
      if (m_Instances.instance(i).isMissing(j)) {
        assertTrue(result.instance(i).isMissing(j));
      }
 else       if (result.attribute(j).isNumeric() && (j >= 3)) {
        assertEquals("Value should be same as Math.abs()",Math.abs(m_Instances.instance(i).value(j)),result.instance(i).value(j),TOLERANCE);
      }
 else {
        assertEquals("Value shouldn't have changed",m_Instances.instance(i).value(j),result.instance(i).value(j),TOLERANCE);
      }
    }
  }
}

public void testClassNameAndMethodName() throws Exception {
  ((NumericTransform)m_Filter).setClassName("java.lang.Math");
  ((NumericTransform)m_Filter).setMethodName("rint");
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes(),result.numAttributes());
  assertEquals(m_Instances.numInstances(),result.numInstances());
  for (int i=0; i < result.numInstances(); i++) {
    for (int j=0; j < result.numAttributes(); j++) {
      if (m_Instances.instance(i).isMissing(j)) {
        assertTrue(result.instance(i).isMissing(j));
      }
 else       if (result.attribute(j).isNumeric()) {
        assertEquals("Value should be same as Math.rint()",Math.rint(m_Instances.instance(i).value(j)),result.instance(i).value(j),TOLERANCE);
      }
 else {
        assertEquals("Value shouldn't have changed",m_Instances.instance(i).value(j),result.instance(i).value(j),TOLERANCE);
      }
    }
  }
}

public static Test suite(){
  return new TestSuite(NumericTransformTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
