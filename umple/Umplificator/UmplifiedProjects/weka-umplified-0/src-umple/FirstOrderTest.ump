namespace weka.filters.unsupervised.attribute;

class FirstOrderTest
{
  isA AbstractFilterTest;
 depend weka.core.Attribute;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.TestInstances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
private static double EXPR_DELTA=0.001;

public FirstOrderTest(String name){
  super(name);
}

/** 
 * Creates a default FirstOrder 
 */
public Filter getFilter(){
  return getFilter("6,3");
}

/** 
 * Creates a specialized FirstOrder 
 */
public Filter getFilter(String rangelist){
  try {
    FirstOrder af=new FirstOrder();
    af.setAttributeIndices(rangelist);
    return af;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception setting attribute range: " + rangelist + "\n"+ ex.getMessage());
  }
  return null;
}

/** 
 * returns data generated for the FilteredClassifier test
 * @return		the dataset for the FilteredClassifier
 * @throws Exception	if generation of data fails
 */
protected Instances getFilteredClassifierData() throws Exception {
  TestInstances test;
  Instances result;
  test=new TestInstances();
  test.setNumNominal(0);
  test.setNumNumeric(6);
  test.setClassType(Attribute.NOMINAL);
  test.setClassIndex(TestInstances.CLASS_IS_LAST);
  result=test.generate();
  return result;
}

public void testTypical(){
  m_Filter=getFilter("6,3");
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes() - 1,result.numAttributes());
  for (int i=0; i < result.numInstances(); i++) {
    Instance orig=m_Instances.instance(i);
    if (orig.isMissing(5) || orig.isMissing(2)) {
      assertTrue("Instance " + (i + 1) + " should have been ?",result.instance(i).isMissing(4));
    }
 else {
      assertEquals(orig.value(5) - orig.value(2),result.instance(i).value(4),EXPR_DELTA);
    }
  }
}

public void testTypical2(){
  m_Filter=getFilter("3,6");
  Instances result=useFilter();
  assertEquals(m_Instances.numAttributes() - 1,result.numAttributes());
  for (int i=0; i < result.numInstances(); i++) {
    Instance orig=m_Instances.instance(i);
    if (orig.isMissing(5) || orig.isMissing(2)) {
      assertTrue("Instance " + (i + 1) + " should have been ?",result.instance(i).isMissing(4));
    }
 else {
      assertEquals(orig.value(5) - orig.value(2),result.instance(i).value(4),EXPR_DELTA);
    }
  }
}

public static Test suite(){
  return new TestSuite(FirstOrderTest.class);
}

public static void main(String[] args){
  junit.textui.TestRunner.run(suite());
}
}
