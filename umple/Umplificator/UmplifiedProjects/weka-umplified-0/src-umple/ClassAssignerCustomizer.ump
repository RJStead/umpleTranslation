namespace weka.gui.beans;

class ClassAssignerCustomizer
{
  isA BeanCustomizer,CustomizerClosingListener,CustomizerCloseRequester,DataFormatListener;
  isA JPanel;
 depend java.awt.BorderLayout;
 depend java.awt.GridLayout;
 depend java.awt.Window;
 depend java.awt.event.ActionEvent;
 depend java.awt.event.ActionListener;
 depend java.beans.PropertyChangeListener;
 depend java.beans.PropertyChangeSupport;
 depend javax.swing.BorderFactory;
 depend javax.swing.DefaultComboBoxModel;
 depend javax.swing.JButton;
 depend javax.swing.JComboBox;
 depend javax.swing.JPanel;
 depend weka.core.Attribute;
 depend weka.core.Instances;
 depend weka.gui.PropertySheetPanel;
/** 
 * for serialization 
 */
private static final long serialVersionUID=476539385765301907L;

private boolean m_displayColNames=false;

private transient ClassAssigner m_classAssigner;

private transient PropertyChangeSupport m_pcSupport=new PropertyChangeSupport(this);

private transient PropertySheetPanel m_caEditor=new PropertySheetPanel();

private transient JComboBox m_ClassCombo=new JComboBox();

private transient JPanel m_holderP=new JPanel();

private transient ModifyListener m_modifyListener;

private transient Window m_parent;

private transient String m_backup;

public ClassAssignerCustomizer(){
  setBorder(javax.swing.BorderFactory.createEmptyBorder(0,5,5,5));
  setLayout(new BorderLayout());
  add(new javax.swing.JLabel("ClassAssignerCustomizer"),BorderLayout.NORTH);
  m_holderP.setLayout(new BorderLayout());
  m_holderP.setBorder(BorderFactory.createTitledBorder("Choose class attribute"));
  m_holderP.add(m_ClassCombo,BorderLayout.CENTER);
  m_ClassCombo.setEditable(true);
  m_ClassCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (m_classAssigner != null && m_displayColNames == true) {
        String selectedI=(String)m_ClassCombo.getSelectedItem();
        selectedI=selectedI.replace("(Num)","").replace("(Nom)","").replace("(Str)","").replace("(Dat)","").replace("(Rel)","").replace("(???)","").trim();
        if (selectedI.equals("NO CLASS")) {
          selectedI="0";
        }
        m_classAssigner.setClassColumn(selectedI);
      }
    }
  }
);
  add(m_caEditor,BorderLayout.CENTER);
  addButtons();
}

public void actionPerformed(ActionEvent e){
  if (m_classAssigner != null && m_displayColNames == true) {
    String selectedI=(String)m_ClassCombo.getSelectedItem();
    selectedI=selectedI.replace("(Num)","").replace("(Nom)","").replace("(Str)","").replace("(Dat)","").replace("(Rel)","").replace("(???)","").trim();
    if (selectedI.equals("NO CLASS")) {
      selectedI="0";
    }
    m_classAssigner.setClassColumn(selectedI);
  }
}

private void addButtons(){
  JButton okBut=new JButton("OK");
  JButton cancelBut=new JButton("Cancel");
  JPanel butHolder=new JPanel();
  butHolder.setLayout(new GridLayout(1,2));
  butHolder.add(okBut);
  butHolder.add(cancelBut);
  add(butHolder,BorderLayout.SOUTH);
  okBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_modifyListener.setModifiedStatus(ClassAssignerCustomizer.this,true);
      if (m_parent != null) {
        m_parent.dispose();
      }
    }
  }
);
  cancelBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      customizerClosing();
      if (m_parent != null) {
        m_parent.dispose();
      }
    }
  }
);
}

public void actionPerformed(ActionEvent e){
  m_modifyListener.setModifiedStatus(ClassAssignerCustomizer.this,true);
  if (m_parent != null) {
    m_parent.dispose();
  }
}

public void actionPerformed(ActionEvent e){
  customizerClosing();
  if (m_parent != null) {
    m_parent.dispose();
  }
}

private void setUpStandardSelection(){
  if (m_displayColNames == true) {
    remove(m_holderP);
    m_caEditor.setTarget(m_classAssigner);
    add(m_caEditor,BorderLayout.CENTER);
    m_displayColNames=false;
  }
  validate();
  repaint();
}

private void setUpColumnSelection(Instances format){
  if (m_displayColNames == false) {
    remove(m_caEditor);
  }
  int existingClassCol=0;
  String classColString=m_classAssigner.getClassColumn();
  if (classColString.trim().toLowerCase().compareTo("last") == 0 || classColString.equalsIgnoreCase("/last")) {
    existingClassCol=format.numAttributes() - 1;
  }
 else   if (classColString.trim().toLowerCase().compareTo("first") == 0 || classColString.equalsIgnoreCase("/first")) {
  }
 else {
    Attribute classAtt=format.attribute(classColString);
    if (classAtt != null) {
      existingClassCol=classAtt.index();
    }
 else {
      try {
        existingClassCol=Integer.parseInt(classColString);
      }
 catch (      NumberFormatException ex) {
        System.err.println("Warning : can't parse '" + classColString + "' as a number "+ " or find it as an attribute in the incoming data (ClassAssigner)");
      }
      if (existingClassCol < 0) {
        existingClassCol=-1;
      }
 else       if (existingClassCol > format.numAttributes() - 1) {
        existingClassCol=format.numAttributes() - 1;
      }
 else {
        existingClassCol--;
      }
    }
  }
  String[] attribNames=new String[format.numAttributes() + 1];
  attribNames[0]="NO CLASS";
  for (int i=1; i < attribNames.length; i++) {
    String type="(" + Attribute.typeToStringShort(format.attribute(i - 1)) + ") ";
    attribNames[i]=type + format.attribute(i - 1).name();
  }
  m_ClassCombo.setModel(new DefaultComboBoxModel(attribNames));
  if (attribNames.length > 0) {
    m_ClassCombo.setSelectedIndex(existingClassCol + 1);
  }
  if (m_displayColNames == false) {
    add(m_holderP,BorderLayout.CENTER);
    m_displayColNames=true;
  }
  validate();
  repaint();
}

/** 
 * Set the bean to be edited
 * @param object an <code>Object</code> value
 */
public void setObject(Object object){
  if (m_classAssigner != (ClassAssigner)object) {
    m_classAssigner=(ClassAssigner)object;
    m_caEditor.setTarget(m_classAssigner);
    if (m_classAssigner.getConnectedFormat() != null) {
      setUpColumnSelection(m_classAssigner.getConnectedFormat());
    }
    m_backup=m_classAssigner.getClassColumn();
  }
}

public void customizerClosing(){
  if (m_classAssigner != null) {
    m_classAssigner.removeDataFormatListener(this);
  }
  if (m_backup != null) {
    m_classAssigner.setClassColumn(m_backup);
  }
}

public void newDataFormat(DataSetEvent dse){
  if (dse.getDataSet() != null) {
    setUpColumnSelection(m_classAssigner.getConnectedFormat());
  }
 else {
    setUpStandardSelection();
  }
}

/** 
 * Add a property change listener
 * @param pcl a <code>PropertyChangeListener</code> value
 */
public void addPropertyChangeListener(PropertyChangeListener pcl){
  m_pcSupport.addPropertyChangeListener(pcl);
}

/** 
 * Remove a property change listener
 * @param pcl a <code>PropertyChangeListener</code> value
 */
public void removePropertyChangeListener(PropertyChangeListener pcl){
  m_pcSupport.removePropertyChangeListener(pcl);
}

@Override public void setModifiedListener(ModifyListener l){
  m_modifyListener=l;
}

@Override public void setParentWindow(Window parent){
  m_parent=parent;
}
}
