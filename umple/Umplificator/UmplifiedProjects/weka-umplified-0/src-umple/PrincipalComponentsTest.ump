namespace weka.filters.unsupervised.attribute;

class PrincipalComponentsTest
{
  isA AbstractFilterTest;
 depend weka.core.Attribute;
 depend weka.core.Instances;
 depend weka.filters.AbstractFilterTest;
 depend weka.filters.Filter;
 depend junit.framework.Test;
 depend junit.framework.TestSuite;
 depend junit.textui.TestRunner;
/** 
 * Initializes the test.
 * @param name	the name of the test
 */
public PrincipalComponentsTest(String name){
  super(name);
}

/** 
 * Need to remove non-numeric attributes.
 * @throws Exception	if something goes wrong in setup
 */
protected void setUp() throws Exception {
  super.setUp();
  m_Instances.deleteAttributeType(Attribute.STRING);
  m_Instances.setClassIndex(1);
}

/** 
 * Creates a default PrincipalComponents filter.
 * @return		the default filter
 */
public Filter getFilter(){
  return new PrincipalComponents();
}

/** 
 * performs the actual test.
 */
protected void performTest(){
  Instances icopy=new Instances(m_Instances);
  Instances result=null;
  try {
    m_Filter.setInputFormat(icopy);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());
  }
  try {
    result=Filter.useFilter(icopy,m_Filter);
    assertNotNull(result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Exception thrown on useFilter(): \n" + ex.getMessage());
  }
  assertEquals(icopy.numInstances(),result.numInstances());
}

/** 
 * Only tests whether the number of instances stay the same, with default  setup of filter.
 */
public void testTypical(){
  m_Filter=getFilter();
  performTest();
}

/** 
 * Runs filter with covariance matrix + centering rather than correlation + standardizing.
 */
public void testCovariance(){
  m_Filter=getFilter();
  ((PrincipalComponents)m_Filter).setCenterData(true);
  performTest();
}

/** 
 * Runs filter with different variance.
 */
public void testVariance(){
  m_Filter=getFilter();
  ((PrincipalComponents)m_Filter).setVarianceCovered(0.8);
  performTest();
}

/** 
 * Runs filter with a maximum number of attributes.
 */
public void testMaxAttributes(){
  m_Filter=getFilter();
  ((PrincipalComponents)m_Filter).setMaximumAttributeNames(2);
  performTest();
}

/** 
 * Returns a configures test suite.
 * @return		a configured test suite
 */
public static Test suite(){
  return new TestSuite(PrincipalComponentsTest.class);
}

/** 
 * For running the test from commandline.
 * @param args	ignored
 */
public static void main(String[] args){
  TestRunner.run(suite());
}
}
