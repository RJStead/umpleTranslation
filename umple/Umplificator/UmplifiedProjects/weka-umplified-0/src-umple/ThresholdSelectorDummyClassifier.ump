namespace weka.classifiers.meta;

class ThresholdSelectorDummyClassifier
{
  isA AbstractClassifier;
 depend weka.classifiers.AbstractClassifier;
 depend weka.core.Capabilities;
 depend weka.core.Capabilities.Capability;
 depend weka.core.Instance;
 depend weka.core.Instances;
 depend weka.core.RevisionUtils;
/** 
 * for serialization 
 */
private static final long serialVersionUID=-2040984810834943903L;

private double[] m_Preds;

private int m_Pos;

public ThresholdSelectorDummyClassifier(double[] preds){
  m_Preds=new double[preds.length];
  for (int i=0; i < preds.length; i++)   m_Preds[i]=preds[i];
}

/** 
 * Returns default capabilities of the classifier.
 * @return      the capabilities of this classifier
 */
public Capabilities getCapabilities(){
  Capabilities result=super.getCapabilities();
  result.enableAllAttributes();
  result.disable(Capability.STRING_ATTRIBUTES);
  result.disable(Capability.RELATIONAL_ATTRIBUTES);
  result.enable(Capability.NOMINAL_CLASS);
  return result;
}

public void buildClassifier(Instances train){
}

public double[] distributionForInstance(Instance test) throws Exception {
  double[] result=new double[test.numClasses()];
  int pred=0;
  result[pred]=m_Preds[m_Pos];
  double residual=(1.0 - result[pred]) / (result.length - 1);
  for (int i=0; i < result.length; i++) {
    if (i != pred) {
      result[i]=residual;
    }
  }
  m_Pos=(m_Pos + 1) % m_Preds.length;
  return result;
}

/** 
 * Returns the revision string.
 * @return		the revision
 */
public String getRevision(){
  return RevisionUtils.extract("$Revision: 8034 $");
}
}
