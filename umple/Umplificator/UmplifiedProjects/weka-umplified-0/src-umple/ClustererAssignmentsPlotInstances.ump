namespace weka.gui.explorer;

class ClustererAssignmentsPlotInstances
{
  isA AbstractPlotInstances;
 depend java.util.ArrayList;
 depend weka.clusterers.ClusterEvaluation;
 depend weka.clusterers.Clusterer;
 depend weka.core.Attribute;
 depend weka.core.DenseInstance;
 depend weka.core.Instances;
 depend weka.core.Utils;
 depend weka.gui.visualize.Plot2D;
 depend weka.gui.visualize.PlotData2D;
/** 
 * for serialization. 
 */
private static final long serialVersionUID=-4748134272046520423L;

/** 
 * for storing the plot shapes. 
 */
protected int[] m_PlotShapes;

/** 
 * the clusterer being used. 
 */
protected Clusterer m_Clusterer;

/** 
 * the cluster evaluation to use. 
 */
protected ClusterEvaluation m_Evaluation;

/** 
 * Initializes the members.
 */
@Override protected void initialize(){
  super.initialize();
  m_PlotShapes=null;
  m_Clusterer=null;
  m_Evaluation=null;
}

/** 
 * Sets the classifier used for making the predictions.
 * @param value the clusterer to use
 */
public void setClusterer(Clusterer value){
  m_Clusterer=value;
}

/** 
 * Returns the currently set clusterer.
 * @return the clusterer in use
 */
public Clusterer getClusterer(){
  return m_Clusterer;
}

/** 
 * Sets the cluster evaluation object to use.
 * @param value the evaluation object
 */
public void setClusterEvaluation(ClusterEvaluation value){
  m_Evaluation=value;
}

/** 
 * Returns the cluster evaluation object in use.
 * @return the evaluation object
 */
public ClusterEvaluation getClusterEvaluation(){
  return m_Evaluation;
}

/** 
 * Checks whether clusterer and evaluation are provided.
 */
@Override protected void check(){
  super.check();
  if (m_Clusterer == null) {
    throw new IllegalStateException("No clusterer set!");
  }
  if (m_Evaluation == null) {
    throw new IllegalStateException("No cluster evaluation set!");
  }
}

/** 
 * Sets up the structure for the plot instances.
 */
@Override protected void determineFormat(){
  int numClusters;
  ArrayList<Attribute> hv;
  Attribute predictedCluster;
  ArrayList<String> clustVals;
  int i;
  numClusters=m_Evaluation.getNumClusters();
  hv=new ArrayList<Attribute>();
  clustVals=new ArrayList<String>();
  for (i=0; i < numClusters; i++) {
    clustVals.add("cluster" + i);
  }
  predictedCluster=new Attribute("Cluster",clustVals);
  for (i=0; i < m_Instances.numAttributes(); i++) {
    hv.add((Attribute)m_Instances.attribute(i).copy());
  }
  hv.add(predictedCluster);
  m_PlotInstances=new Instances(m_Instances.relationName() + "_clustered",hv,m_Instances.numInstances());
}

/** 
 * Generates the cluster assignments.
 * @see #m_PlotShapes
 * @see #m_PlotSizes
 * @see #m_PlotInstances
 */
protected void process(){
  double[] clusterAssignments;
  int i;
  double[] values;
  int j;
  int[] classAssignments;
  clusterAssignments=m_Evaluation.getClusterAssignments();
  classAssignments=null;
  if (m_Instances.classIndex() >= 0) {
    classAssignments=m_Evaluation.getClassesToClusters();
    m_PlotShapes=new int[m_Instances.numInstances()];
    for (i=0; i < m_Instances.numInstances(); i++) {
      m_PlotShapes[i]=Plot2D.CONST_AUTOMATIC_SHAPE;
    }
  }
  for (i=0; i < m_Instances.numInstances(); i++) {
    values=new double[m_PlotInstances.numAttributes()];
    for (j=0; j < m_Instances.numAttributes(); j++) {
      values[j]=m_Instances.instance(i).value(j);
    }
    if (clusterAssignments[i] < 0) {
      values[j]=Utils.missingValue();
    }
 else {
      values[j]=clusterAssignments[i];
    }
    m_PlotInstances.add(new DenseInstance(1.0,values));
    if (m_PlotShapes != null) {
      if (clusterAssignments[i] >= 0) {
        if ((int)m_Instances.instance(i).classValue() != classAssignments[(int)clusterAssignments[i]]) {
          m_PlotShapes[i]=Plot2D.ERROR_SHAPE;
        }
      }
 else {
        m_PlotShapes[i]=Plot2D.MISSING_SHAPE;
      }
    }
  }
}

/** 
 * Performs optional post-processing.
 */
@Override protected void finishUp(){
  super.finishUp();
  process();
}

/** 
 * Assembles and returns the plot. The relation name of the dataset gets added automatically.
 * @param name the name of the plot
 * @return the plot
 * @throws Exception if plot generation fails
 */
@Override protected PlotData2D createPlotData(String name) throws Exception {
  PlotData2D result;
  result=new PlotData2D(m_PlotInstances);
  if (m_PlotShapes != null) {
    result.setShapeType(m_PlotShapes);
  }
  result.addInstanceNumberAttribute();
  result.setPlotName(name + " (" + m_Instances.relationName()+ ")");
  return result;
}

/** 
 * For freeing up memory. Plot data cannot be generated after this call!
 */
@Override public void cleanUp(){
  super.cleanUp();
  m_Clusterer=null;
  m_Evaluation=null;
  m_PlotShapes=null;
}
}
