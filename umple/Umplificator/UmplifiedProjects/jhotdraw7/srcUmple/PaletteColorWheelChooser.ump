/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the Java Umplificator!*/

namespace org.jhotdraw.gui.plaf.palette.colorchooser ;

class PaletteColorWheelChooser 
{
depend java.awt.*;
depend javax.swing.*;
depend javax.swing.colorchooser.*;
depend javax.swing.event.*;
depend javax.swing.plaf.*;
depend org.jhotdraw.color.HSVColorSpace;
depend org.jhotdraw.color.JColorWheel;
depend org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel;
depend org.jhotdraw.gui.plaf.palette.PalettePanelUI;
  isA AbstractColorChooserPanel;

  private JColorWheel colorWheel;
private PaletteColorSliderModel ccModel = new PaletteColorSliderModel(new HSVColorSpace());
private int updatingChooser;
// Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider brightnessSlider;
/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        brightnessSlider = new javax.swing.JSlider();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 6, 6, 6));
        setLayout(new java.awt.BorderLayout());

        brightnessSlider.setMajorTickSpacing(50);
        brightnessSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        brightnessSlider.setPaintTicks(true);
        add(brightnessSlider, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents
@Override
    protected void buildChooser() {
        initComponents();
        setUI(PalettePanelUI.createUI(this));

        int textSliderGap = PaletteLookAndFeel.getInstance().getInt("ColorChooser.textSliderGap");
        if (textSliderGap != 0) {
            BorderLayout layout = (BorderLayout) getLayout();
            layout.setHgap(textSliderGap);
        }

        colorWheel = new JColorWheel();
        add(colorWheel);

        ccModel.configureSlider(2, brightnessSlider);
        brightnessSlider.setMaximum(200);


        colorWheel.setModel(ccModel);

        ccModel.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent evt) {
                setColorToModel(ccModel.getColor());
            }
        });
    }
@Override
    public String getDisplayName() {
        return PaletteLookAndFeel.getInstance().getString("ColorChooser.colorWheel");
    }
@Override
    public javax.swing.Icon getLargeDisplayIcon() {
        return PaletteLookAndFeel.getInstance().getIcon("ColorChooser.colorWheelIcon");
    }
@Override
    public Icon getSmallDisplayIcon() {
        return getLargeDisplayIcon();
    }
@Override
    public void updateChooser() {
        updatingChooser++;
        ccModel.setColor(getColorFromModel());
        updatingChooser--;
    }
public void setColorToModel(Color color) {
        if (updatingChooser == 0) {
            getColorSelectionModel().setSelectedColor(color);
        }
    }

}