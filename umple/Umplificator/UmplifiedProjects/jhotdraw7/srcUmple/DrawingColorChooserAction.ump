/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the Java Umplificator!*/

namespace org.jhotdraw.draw.action ;

class DrawingColorChooserAction 
{
depend edu.umd.cs.findbugs.annotations.Nullable;
depend java.util.*;
depend java.awt.*;
depend javax.swing.*;
depend org.jhotdraw.draw.*;
depend org.jhotdraw.util.ResourceBundleUtil;
  isA EditorColorChooserAction;

  @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (colorChooser == null) {
            colorChooser = new JColorChooser();
        }
        Color initialColor = getInitialColor();
        // FIXME - Reuse colorChooser object instead of calling static method here.
        ResourceBundleUtil labels =
                ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");
        Color chosenColor = JColorChooser.showDialog((Component) e.getSource(), labels.getString("attribute.color.text"), initialColor);
        if (chosenColor != null) {
            HashMap<AttributeKey, Object> attr = new HashMap<AttributeKey, Object>(attributes);
            attr.put(key, chosenColor);
            HashSet<Figure> figures = new HashSet<Figure>();
            figures.add(getView().getDrawing());
            applyAttributesTo(attr, figures);
        }
    }
@Override
    protected Color getInitialColor() {
        Color initialColor = null;

        DrawingView v = getEditor().getActiveView();
        if (v != null) {
            Figure f = v.getDrawing();
            initialColor = f.get(key);
        }
        if (initialColor == null) {
            initialColor = super.getInitialColor();
        }
        return initialColor;
    }
@Override
    protected void updateEnabledState() {
        if (getView() != null) {
            setEnabled(getView().isEnabled());
        } else {
            setEnabled(false);
        }
    }

}