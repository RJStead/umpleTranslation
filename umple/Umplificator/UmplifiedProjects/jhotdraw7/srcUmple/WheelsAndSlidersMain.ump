/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the Java Umplificator!*/

namespace org.jhotdraw.samples.color ;

class WheelsAndSlidersMain 
{
depend org.jhotdraw.color.*;
depend java.awt.*;
depend java.awt.color.ColorSpace;
depend java.awt.color.ICC_ColorSpace;
depend java.awt.color.ICC_Profile;
depend java.util.*;
depend javax.swing.*;
depend javax.swing.event.*;
  isA javax.swing.JPanel;

  private Color color;
private JLabel colorLabel;
private LinkedList<ColorSliderModel> models;
private Handler handler;
// Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chooserPanel;
private javax.swing.JLabel previewLabel;
private int adjusting;
private JPanel createColorWheelChooser(ColorSpace sys) {
        return createColorWheelChooser(sys, 0, 1, 2);
    }
private JPanel createColorWheelChooser(ColorSpace sys, int angularIndex, int radialIndex, int verticalIndex) {
        return createColorWheelChooser(sys, angularIndex, radialIndex, verticalIndex, JColorWheel.Type.POLAR);
    }
private JPanel createColorWheelChooser(ColorSpace sys, int angularIndex, int radialIndex, int verticalIndex, JColorWheel.Type type) {
        return createColorWheelChooser(sys, angularIndex, radialIndex, verticalIndex, type,false,false);
    }
private JPanel createColorWheelChooser(ColorSpace sys, int angularIndex, int radialIndex, int verticalIndex, JColorWheel.Type type, boolean flipX,boolean flipY) {
        JPanel p = new JPanel(new BorderLayout());
        DefaultColorSliderModel m = new DefaultColorSliderModel(sys);
        models.add(m);
        m.addChangeListener(handler);
        JColorWheel w = new JColorWheel();
        w.setType(type);
        w.setAngularComponentIndex(angularIndex);
        w.setRadialComponentIndex(radialIndex);
        w.setVerticalComponentIndex(verticalIndex);
w.setFlipX(flipX);
w.setFlipY(flipY);
        w.setModel(m);
        JSlider s = new JSlider(JSlider.VERTICAL);
        m.configureSlider(verticalIndex, s);
        p.add(new JLabel("<html>" + ColorUtil.getName(sys) + "<br>Î±:" + angularIndex + " r:" + radialIndex + " v:" + verticalIndex), BorderLayout.NORTH);
        p.add(w, BorderLayout.CENTER);
        p.add(s, BorderLayout.EAST);
        return p;
    }
private JPanel createSliderChooser(ColorSpace sys) {
        return createSliderChooser(sys, false);
    }
private JPanel createSliderChooser(ColorSpace sys, boolean vertical) {
        JPanel p = new JPanel(new GridLayout(vertical ? 1 : 0, vertical ? 0 : 1));
        DefaultColorSliderModel m = new DefaultColorSliderModel(sys);

        models.add(m);
        if (!vertical) {
            p.add(new JLabel(
                    "<html>" + ColorUtil.getName(sys)), BorderLayout.NORTH);
        }
        m.addChangeListener(handler);

        for (int i = 0;
                i < m.getComponentCount();
                i++) {
            JSlider s = new JSlider(JSlider.HORIZONTAL);
            s.setMajorTickSpacing(50);
            s.setPaintTicks(true);
            s.setOrientation(vertical ? JSlider.VERTICAL : JSlider.HORIZONTAL);
            m.configureSlider(i, s);
            p.add(s);
        }
        return p;
    }
public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                JFrame f = new JFrame("Color Wheels, Squares and Sliders");
                f.add(new WheelsAndSlidersMain());
                f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                f.pack();
                f.setVisible(true);


            }
        });


    }
/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooserPanel = new javax.swing.JPanel();
        previewLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        chooserPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        chooserPanel.setLayout(new java.awt.GridLayout(0, 4, 10, 10));
        add(chooserPanel, java.awt.BorderLayout.CENTER);

        previewLabel.setText("Selected Color");
        add(previewLabel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents
@Override
        public void stateChanged(ChangeEvent e) {
            if (adjusting++ == 0) {
                ColorSliderModel m = (ColorSliderModel) e.getSource();
                color = m.getColor();
                previewLabel.setBackground(color);
                for (ColorSliderModel c : models) {
                    if (c != m) {
                        if (c.getColorSpace().equals(m.getColorSpace())) {
                            // If the color system is the same, directly set the components (=lossless)
                            for (int i = 0; i < m.getComponentCount(); i++) {
                                c.setComponent(i, m.getComponent(i));
                            }
                        } else {
                            // If the color system is different, set the RGB color (=lossy)
                            c.setColor(color);
                        }
                    }
                }
            }
            adjusting--;
        }

}