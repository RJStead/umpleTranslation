/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the Java Umplificator!*/

namespace org.jhotdraw.draw.text ;

class FloatingTextArea 
{
depend edu.umd.cs.findbugs.annotations.Nullable;
depend org.jhotdraw.draw.event.FigureListener;
depend org.jhotdraw.draw.event.FigureAdapter;
depend org.jhotdraw.draw.event.FigureEvent;
depend org.jhotdraw.draw.*;
depend java.awt.geom.*;
depend java.awt.*;
depend javax.swing.BorderFactory;
depend javax.swing.JTextArea;
depend javax.swing.JScrollPane;

  /**
     * A scroll pane to allow for vertical scrolling while editing
     */
    protected JScrollPane editScrollContainer;
/**
     * The actual editor
     */
    protected JTextArea textArea;
/**
     * The drawing view.
     */
    @Nullable protected DrawingView view;
@Nullable private TextHolderFigure editedFigure;
private FigureListener figureHandler = new FigureAdapter() {

        @Override
        public void attributeChanged(FigureEvent e) {
            updateWidget();
        }
    };
/**
     * Creates the overlay within the given container.
     * @param view the DrawingView
     */
    public void createOverlay(DrawingView view) {
        createOverlay(view, null);
    }
public void requestFocus() {
        textArea.requestFocus();
    }
/**
     * Creates the overlay for the given Container using a
     * specific font.
     * @param view the DrawingView
     * @param figure the figure holding the text
     */
    public void createOverlay(DrawingView view, @Nullable TextHolderFigure figure) {
        view.getComponent().add(editScrollContainer, 0);
        editedFigure = figure;
        this.view = view;
        if (editedFigure != null) {
            editedFigure.addFigureListener(figureHandler);
            updateWidget();
        }
    }
protected void updateWidget() {
        Font f = editedFigure.getFont();
        // FIXME - Should scale with fractional value!
        f = f.deriveFont(f.getStyle(), (float) (editedFigure.getFontSize() * view.getScaleFactor()));
        textArea.setFont(f);
        textArea.setForeground(editedFigure.getTextColor());
        textArea.setBackground(editedFigure.getFillColor());
//        textArea.setBounds(getFieldBounds(editedFigure));
    }
/**
     * Positions and sizes the overlay.
     * @param r the bounding Rectangle2D.Double for the overlay
     * @param text the text to edit
     */
    public void setBounds(Rectangle2D.Double r, String text) {
        textArea.setText(text);
        editScrollContainer.setBounds(view.drawingToView(r));
        editScrollContainer.setVisible(true);
        textArea.setCaretPosition(0);
        textArea.requestFocus();
    }
/**
     * Gets the text contents of the overlay.
     * @return The text value
     */
    public String getText() {
        return textArea.getText();
    }
/**
     * Gets the preferred size of the overlay.
     * @param cols Description of the Parameter
     * @return The preferredSize value
     */
    public Dimension getPreferredSize(int cols) {
        return new Dimension(textArea.getWidth(), textArea.getHeight());
    }
/**
     * Removes the overlay.
     */
    public void endOverlay() {
        view.getComponent().requestFocus();
        if (editScrollContainer != null) {
            editScrollContainer.setVisible(false);
            view.getComponent().remove(editScrollContainer);

            Rectangle bounds = editScrollContainer.getBounds();
            view.getComponent().repaint(bounds.x, bounds.y, bounds.width, bounds.height);
        }
        if (editedFigure != null) {
            editedFigure.removeFigureListener(figureHandler);
            editedFigure = null;
        }
    }

}