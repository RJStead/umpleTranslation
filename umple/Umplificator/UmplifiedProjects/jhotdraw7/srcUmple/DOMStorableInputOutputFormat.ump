/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the Java Umplificator!*/

namespace org.jhotdraw.draw.io ;

class DOMStorableInputOutputFormat 
{
depend org.jhotdraw.gui.filechooser.ExtensionFileFilter;
depend org.jhotdraw.draw.*;
depend java.awt.datatransfer.DataFlavor;
depend java.awt.datatransfer.Transferable;
depend java.awt.datatransfer.UnsupportedFlavorException;
depend java.io.*;
depend java.net.URI;
depend java.net.URL;
depend java.util.LinkedList;
depend java.util.List;
depend javax.swing.JComponent;
depend org.jhotdraw.gui.datatransfer.InputStreamTransferable;
depend org.jhotdraw.xml.*;

  private DOMFactory factory;
/**
     * Format description used for the file filter.
     */
    private String description;
/**
     * File name extension used for the file filter.
     */
    private String fileExtension;
/**
     * Image IO image format name.
     */
    private String formatName;
/**
     * The mime type is used for clipboard access.
     */
    private String mimeType;
/**
     * The data flavor constructed from the mime type.
     */
    private DataFlavor dataFlavor;
@Override
    public javax.swing.filechooser.FileFilter getFileFilter() {
        return new ExtensionFileFilter(description, fileExtension);
    }
@Override
    public JComponent getOutputFormatAccessory() {
        return null;
    }
@Override
    public JComponent getInputFormatAccessory() {
        return null;
    }
/**
     * Reads a list of figures into the specified drawing.
     * This method expects that there is a child element named "figures"
     * in the element that represents the drawing.
     */
    protected void read(URL url, InputStream in, Drawing drawing, LinkedList<Figure> figures) throws IOException {
        NanoXMLDOMInput domi = new NanoXMLDOMInput(factory, in);
        domi.openElement(factory.getName(drawing));
        domi.openElement("figures", 0);
        figures.clear();
        for (int i = 0, n = domi.getElementCount(); i < n; i++) {
            Figure f = (Figure) domi.readObject();
            figures.add(f);
        }
        domi.closeElement();
        domi.closeElement();
        drawing.basicAddAll(drawing.getChildCount(), figures);
    }
@Override
    public String getFileExtension() {
        return fileExtension;
    }
@Override
    public boolean isDataFlavorSupported(DataFlavor flavor) {
        return flavor.equals(dataFlavor);
    }
@Override
    public void write(URI uri, Drawing drawing) throws IOException {
        write(new File(uri),drawing);
    }
public void write(File file, Drawing drawing) throws IOException {
        BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));
        try {
            write(out, drawing);
        } finally {
            out.close();
        }
    }
@Override
    public void write(OutputStream out, Drawing drawing) throws IOException {
        NanoXMLDOMOutput domo = new NanoXMLDOMOutput(factory);
        domo.openElement(factory.getName(drawing));
        drawing.write(domo);
        domo.closeElement();
        domo.save(out);
        domo.dispose();
    }
@Override
    public void read(URI uri, Drawing drawing) throws IOException {
        read(new File(uri), drawing);
    }
@Override
    public void read(URI uri, Drawing drawing, boolean replace) throws IOException {
        read(new File(uri), drawing, replace);
    }
public void read(File file, Drawing drawing) throws IOException {
        read(file, drawing, true);
    }
public void read(File file, Drawing drawing, boolean replace) throws IOException {
        BufferedInputStream in = new BufferedInputStream(new FileInputStream(file));
        try {
            read(in, drawing, replace);
        } finally {
            in.close();
        }
    }
@Override
    public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {
        NanoXMLDOMInput domi = new NanoXMLDOMInput(factory, in);
        domi.openElement(factory.getName(drawing));
        if (replace) {
            drawing.removeAllChildren();
        }
        drawing.read(domi);
        domi.closeElement();
        domi.dispose();
    }
@Override
    public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {
        LinkedList<Figure> figures = new LinkedList<Figure>();
        InputStream in = (InputStream) t.getTransferData(new DataFlavor(mimeType, description));
        NanoXMLDOMInput domi = new NanoXMLDOMInput(factory, in);
        domi.openElement("Drawing-Clip");
        for (int i = 0, n = domi.getElementCount(); i < n; i++) {
            Figure f = (Figure) domi.readObject(i);
            figures.add(f);
        }
        domi.closeElement();
        if (replace) {
            drawing.removeAllChildren();
        }
        drawing.addAll(figures);
    }
@Override
    public Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {
        ByteArrayOutputStream buf = new ByteArrayOutputStream();
        NanoXMLDOMOutput domo = new NanoXMLDOMOutput(factory);
        domo.openElement("Drawing-Clip");
        for (Figure f : figures) {
            domo.writeObject(f);
        }
        domo.closeElement();
        domo.save(buf);
        return new InputStreamTransferable(new DataFlavor(mimeType, description), buf.toByteArray());
    }

}