/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the Java Umplificator!*/

namespace org.jhotdraw.draw.event ;

class SelectionComponentDisplayer 
{
depend org.jhotdraw.draw.tool.SelectionTool;
depend java.awt.Dimension;
depend java.beans.*;
depend java.lang.ref.WeakReference;
depend javax.annotation.Nullable;
depend javax.swing.*;
depend org.jhotdraw.draw.*;

  @Nullable protected DrawingView view;
@Nullable protected DrawingEditor editor;
protected WeakReference<JComponent> weakRef;
protected int minSelectionCount = 1;
protected boolean isVisibleIfCreationTool = true;
@Override
    public void propertyChange(PropertyChangeEvent evt) {
        String name = evt.getPropertyName();
        if (name == DrawingEditor.ACTIVE_VIEW_PROPERTY) {
            if (view != null) {
                view.removePropertyChangeListener(this);
                view.removeFigureSelectionListener(this);
            }
            view = (DrawingView) evt.getNewValue();
            if (view != null) {
                view.addPropertyChangeListener(this);
                view.addFigureSelectionListener(this);
            }
            updateVisibility();
        } else if (name == DrawingEditor.TOOL_PROPERTY) {
            updateVisibility();
        }
    }
@Override
    public void selectionChanged(FigureSelectionEvent evt) {
        updateVisibility();
    }
public void updateVisibility() {
        boolean newValue = editor != null &&
                editor.getActiveView() != null &&
                (isVisibleIfCreationTool && editor.getTool() != null && !(editor.getTool() instanceof SelectionTool) ||
                editor.getActiveView().getSelectionCount() >= minSelectionCount);
        JComponent component = weakRef.get();
        if (component == null) {
            dispose();
            return;
        }
        if (newValue != component.isVisible()) {
        component.setVisible(newValue);

        // The following is needed to trick BoxLayout
        if (newValue) {
            component.setPreferredSize(null);
        } else {
            component.setPreferredSize(new Dimension(0, 0));
        }

        component.revalidate();
        }
    }
@Nullable
    protected JComponent getComponent() {
        return weakRef.get();
    }
public void dispose() {
        if (editor != null) {
            editor.removePropertyChangeListener(this);
            editor = null;
        }
        if (view != null) {
            view.removePropertyChangeListener(this);
            view.removeFigureSelectionListener(this);
            view = null;
        }
    }
public void setMinSelectionCount(int newValue) {
        minSelectionCount = newValue;
        updateVisibility();
    }
public void setVisibleIfCreationTool(boolean newValue) {
        isVisibleIfCreationTool = newValue;
    }

}