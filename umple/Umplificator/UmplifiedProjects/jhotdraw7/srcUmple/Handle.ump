/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the Java Umplificator!*/

namespace org.jhotdraw.draw.handle ;

class Handle 
{
depend edu.umd.cs.findbugs.annotations.Nullable;
depend org.jhotdraw.draw.*;
depend org.jhotdraw.draw.event.HandleListener;
depend java.awt.*;
depend java.awt.event.*;
depend java.util.*;

  /**
     * Returns the owner of this handle.
     */
    public Figure getOwner();
/**
     * Sets the view of the handle.
     */
    public void setView(@Nullable DrawingView view);
/**
     * Adds a listener for this handle.
     */
    public void addHandleListener(HandleListener l);
/**
     * Removes a listener for this handle.
     */
    void removeHandleListener(HandleListener l);
/**
     * Returns the bounding box of the handle.
     * Note: The bounding box must be returned in the coordinate 
     * system of the DrawingView.
     */
    Rectangle getBounds();
/**
     * Returns the drawing area of the handle.
     * Note: The drawing area must be returned in the coordinate 
     * system of the DrawingView.
     */
    Rectangle getDrawingArea();
/**
     * Tests if a point is contained in the handle.
     */
    public boolean contains(Point p);
/**
     * Draws this handle. 
     * Note: The handle is drawn with the coordinate system of
     * the DrawingView.
     */
    public void draw(Graphics2D g);
/**
     * Invalidates the handle. This method informs its listeners
     * that its current display box is invalid and should be
     * refreshed.
     */
    public void invalidate();
/**
     * Disposes the resources aquired by the handler.
     */
    public void dispose();
/**
     * Returns a cursor for the handle.
     */
    public Cursor getCursor();
/**
     * Returns true, if this handle is combinable with the specified handle.
     * This method is used to determine, if multiple handles need to be tracked,
     * when more than one figure is selected.
     */
    public boolean isCombinableWith(Handle handle);
/**
     * Tracks the start of the interaction. The default implementation
     * does nothing.
     *  @param anchor the position where the interaction started
     */
    public void trackStart(Point anchor, int modifiersEx);
/**
     * Tracks a step of the interaction.
     *  @param anchor the position where the interaction started
     * @param lead the current position
     */
    public void trackStep(Point anchor, Point lead, int modifiersEx);
/**
     * Tracks the end of the interaction.
     *  @param anchor the position where the interaction started
     * @param lead the current position
     */
    public void trackEnd(Point anchor, Point lead, int modifiersEx);
/**
     * Tracks a double click.
     */
    public void trackDoubleClick(Point p, int modifiersEx);
/**
     * This method is invoked by the drawing view, when its transform
     * has changed. This means, that DrawingView.viewToDrawing and
     * DrawingView.drawingToView will return different values than they
     * did before.
     */
    public void viewTransformChanged();
/**
     * Creates secondary handles.
     */
    @Nullable public Collection<Handle> createSecondaryHandles();
/**
     * Returns a tooltip for the specified location.
     */
    @Nullable public String getToolTipText(Point p);

}