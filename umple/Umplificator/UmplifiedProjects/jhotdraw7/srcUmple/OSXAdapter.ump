/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the Java Umplificator!*/

namespace org.jhotdraw.app.osx ;

class OSXAdapter 
{
depend java.awt.event.ActionEvent;
depend java.awt.event.ActionListener;
depend java.lang.reflect.*;

  protected ActionListener targetAction;
protected Object targetObject;
protected Method targetMethod;
protected String proxySignature;
static Object macOSXApplication;
/**
     * The action listener will be called when the application receives an Open
     * Application event from the Finder or another application. Usually this
     * will come from the Finder when a user double-clicks your application
     * icon. If there is any special code that you want to run when you user
     * launches your application from the Finder or by sending an Open
     * Application event from another application, include that code as part of
     * this handler. The Open Application event is sent after AWT has been loaded.
     */
    public static void setOpenApplicationHandler(ActionListener openHandler) {
        setHandler(new OSXAdapter("handleOpenApplication", openHandler));
    }
/**
     * Called when the application receives a Reopen Application event from the
     * Finder or another application. Usually this will come when a user clicks
     * on your application icon in the Dock. If there is any special code that
     * needs to run when your user clicks on your application icon in the Dock
     * or when a Reopen Application event is sent from another application,
     * include that code as part of this handler.
     */
    public static void setReOpenApplicationHandler(ActionListener reopenHandler) {
        setHandler(new OSXAdapter("handleReOpenApplication", reopenHandler));
    }
/**
     * The action listener will be called when the Quit menu item is selected
     * from the application menu.
     */
    public static void setQuitHandler(ActionListener aboutHandler) {
        setHandler(new OSXAdapter("handleQuit", aboutHandler) {

            // Override OSXAdapter.callTarget to always return false.
            @Override
            public boolean callTarget(Object appleEvent)  throws InvocationTargetException, IllegalAccessException {
                super.callTarget(appleEvent);
                return false;
            }
        });
    }
/**
     * The action listener will be called when the user selects the About item
     * in the application menu.
     */
    public static void setAboutHandler(ActionListener aboutHandler) {
        boolean enableAboutMenu = (aboutHandler != null);
        if (enableAboutMenu) {
            setHandler(new OSXAdapter("handleAbout", aboutHandler));
        }
        // If we're setting a handler, enable the About menu item by calling
        // com.apple.eawt.Application reflectively
        try {
            Method enableAboutMethod = macOSXApplication.getClass().getDeclaredMethod("setEnabledAboutMenu", new Class[]{boolean.class});
            enableAboutMethod.invoke(macOSXApplication, new Object[]{Boolean.valueOf(enableAboutMenu)});
        } catch (Exception ex) {
            System.err.println("OSXAdapter could not access the About Menu");
            ex.printStackTrace();
        }
    }
/**
     * Pass this method an {@code ActionListener} equipped to
     * display application options.
     * They will be called when the Preferences menu item is selected from the
     * application menu.
     */
    public static void setPreferencesHandler(ActionListener prefsHandler) {
        boolean enablePrefsMenu = (prefsHandler != null);
        if (enablePrefsMenu) {
            setHandler(new OSXAdapter("handlePreferences", prefsHandler));
        }
        // If we're setting a handler, enable the Preferences menu item by calling
        // com.apple.eawt.Application reflectively
        try {
            Method enablePrefsMethod = macOSXApplication.getClass().getDeclaredMethod("setEnabledPreferencesMenu", new Class[]{boolean.class});
            enablePrefsMethod.invoke(macOSXApplication, new Object[]{Boolean.valueOf(enablePrefsMenu)});
        } catch (Exception ex) {
            System.err.println("OSXAdapter could not access the Preferences Menu");
            ex.printStackTrace();
        }
    }
/**
     * Pass this method an {@code ActionListener} equipped to
     * handle document events from the Finder.
     * Documents are registered with the Finder via the
     * CFBundleDocumentTypes dictionary in the application bundle's Info.plist.
     * <p>
     * The filename is passed as the {@code actionCommand}.
     */
    public static void setOpenFileHandler(ActionListener fileHandler) {
        setHandler(new OSXAdapter("handleOpenFile", fileHandler) {
            // Override OSXAdapter.callTarget to send information on the
            // file to be opened

            @Override
            public boolean callTarget(Object appleEvent) {
                if (appleEvent != null) {
                    try {
                        Method getFilenameMethod = appleEvent.getClass().getDeclaredMethod("getFilename", (Class[]) null);
                        String filename = (String) getFilenameMethod.invoke(appleEvent, (Object[]) null);
                        targetAction.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, filename));
                    } catch (Exception ex) {
                    }
                }
                return true;
            }
        });
    }
/**
     * Pass this method an {@code ActionListener} equipped to
     * handle document events from the Finder.
     * Documents are registered with the Finder via the
     * CFBundleDocumentTypes dictionary in the application bundle's Info.plist.
     * <p>
     * The filename is passed as the {@code actionCommand}.
     */
    public static void setPrintFileHandler(ActionListener fileHandler) {
        setHandler(new OSXAdapter("handlePrintFile", fileHandler) {
            // Override OSXAdapter.callTarget to send information on the
            // file to be opened

            @Override
            public boolean callTarget(Object appleEvent) {
                if (appleEvent != null) {
                    try {
                        Method getFilenameMethod = appleEvent.getClass().getDeclaredMethod("getFilename", (Class[]) null);
                        String filename = (String) getFilenameMethod.invoke(appleEvent, (Object[]) null);
                        targetAction.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, filename));
                    } catch (Exception ex) {
                    }
                }
                return true;
            }
        });
    }
/** 
     * {@code setHandler} creates a Proxy object from the passed
     * {@code OSXAdapter} and adds it as an {@code ApplicationListener}.
     */
    @SuppressWarnings("unchecked")
    public static void setHandler(OSXAdapter adapter) {
        try {
            Class applicationClass = Class.forName("com.apple.eawt.Application");
            if (macOSXApplication == null) {
                macOSXApplication = applicationClass.getConstructor((Class[]) null).newInstance((Object[]) null);
            }
            Class applicationListenerClass = Class.forName("com.apple.eawt.ApplicationListener");
            Method addListenerMethod = applicationClass.getDeclaredMethod("addApplicationListener", new Class[]{applicationListenerClass});
            // Create a proxy object around this handler that can be reflectively added as an Apple ApplicationListener
            Object osxAdapterProxy = Proxy.newProxyInstance(OSXAdapter.class.getClassLoader(), new Class[]{applicationListenerClass}, adapter);
            addListenerMethod.invoke(macOSXApplication, new Object[]{osxAdapterProxy});
        } catch (ClassNotFoundException cnfe) {
            System.err.println("This version of Mac OS X does not support the Apple EAWT.  ApplicationEvent handling has been disabled (" + cnfe + ")");
        } catch (Exception ex) {  // Likely a NoSuchMethodException or an IllegalAccessException loading/invoking eawt.Application methods
            System.err.println("Mac OS X Adapter could not talk to EAWT:");
            ex.printStackTrace();
        }
    }
/** Override this method to perform any operations on the event
     * that comes with the various callbacks.
     * See setOpenFileHandler above for an example.
     */
    public boolean callTarget(Object appleEvent) throws InvocationTargetException, IllegalAccessException {
        if (targetAction != null) {
            targetAction.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, proxySignature));
            return true;
        } else {
            Object result = targetMethod.invoke(targetObject, (Object[]) null);
            if (result == null) {
                return true;
            }
            return Boolean.valueOf(result.toString()).booleanValue();
        }
    }
/**
     * InvocationHandler implementation.
     * This is the entry point for our proxy object; it is called every time an 
     * ApplicationListener method is invoked.
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (isCorrectMethod(method, args)) {
            boolean handled = callTarget(args[0]);
            setApplicationEventHandled(args[0], handled);
        }
        // All of the ApplicationListener methods are void;
        // return null regardless of what happens
        return null;
    }
/**
     * Compare the method that was called to the intended method when the
     * OSXAdapter instance was created (e.g. handleAbout, handleQuit,
     * handleOpenFile, etc.).
     */
    protected boolean isCorrectMethod(Method method, Object[] args) {
        return (proxySignature.equals(method.getName()) && args.length == 1);
    }
/** 
     * It is important to mark the ApplicationEvent as handled and cancel the
     * default behavior.
     * This method checks for a boolean result from the proxy method and sets 
     * the event accordingly.
     */
    protected void setApplicationEventHandled(Object event, boolean handled) {
        if (event != null) {
            try {
                Method setHandledMethod = event.getClass().getDeclaredMethod("setHandled", new Class[]{boolean.class});
                // If the target method returns a boolean, use that as a hint
                setHandledMethod.invoke(event, new Object[]{Boolean.valueOf(handled)});
            } catch (Exception ex) {
                System.err.println("OSXAdapter was unable to handle an ApplicationEvent: " + event);
                ex.printStackTrace();
            }
        }
    }

}