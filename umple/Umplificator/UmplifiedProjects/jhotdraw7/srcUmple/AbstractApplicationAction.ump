/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the Java Umplificator!*/

namespace org.jhotdraw.app.action ;

class AbstractApplicationAction 
{
depend edu.umd.cs.findbugs.annotations.Nullable;
depend java.beans.*;
depend javax.swing.*;
depend org.jhotdraw.app.Application;
depend org.jhotdraw.app.Disposable;
depend org.jhotdraw.beans.WeakPropertyChangeListener;
  isA AbstractAction;

  @Nullable private Application app;
@Nullable private PropertyChangeListener applicationListener;
/*
     * Installs listeners on the application object.
     */
    protected void installApplicationListeners(Application app) {
        if (applicationListener == null) {
            applicationListener = createApplicationListener();
        }
        app.addPropertyChangeListener(new WeakPropertyChangeListener(applicationListener));
    }
/**
     * Installs listeners on the application object.
     */
    protected void uninstallApplicationListeners(Application app) {
        app.removePropertyChangeListener(applicationListener);
    }
private PropertyChangeListener createApplicationListener() {
        return new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName() == "enabled") { // Strings get interned
                    updateApplicationEnabled();
                }
            }
        };
    }
public Application getApplication() {
        return app;
    }
/**
     * Updates the enabled state of this action depending on the new enabled
     * state of the application.
     */
    protected void updateApplicationEnabled() {
        firePropertyChange("enabled",
                Boolean.valueOf(!isEnabled()),
                Boolean.valueOf(isEnabled()));
    }
/**
     * Returns true if the action is enabled.
     * The enabled state of the action depends on the state that has been set
     * using setEnabled() and on the enabled state of the application.
     *
     * @return true if the action is enabled, false otherwise
     * @see Action#isEnabled
     */
    @Override
    public boolean isEnabled() {
        return app != null && app.isEnabled() && enabled;
    }
/**
     * Enables or disables the action. The enabled state of the action
     * depends on the value that is set here and on the enabled state of
     * the application.
     *
     * @param newValue  true to enable the action, false to
     *                  disable it
     * @see Action#setEnabled
     */
    @Override
    public void setEnabled(boolean newValue) {
        boolean oldValue = this.enabled;
        this.enabled = newValue;

        firePropertyChange("enabled",
                Boolean.valueOf(oldValue && app.isEnabled()),
                Boolean.valueOf(newValue && app.isEnabled()));
    }
@Override
    public final void dispose() {
        if (app != null) {
            uninstallApplicationListeners(app);
            app = null;
        }
    }

}