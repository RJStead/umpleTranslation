/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the Java Umplificator!*/

namespace org.jhotdraw.draw.io ;

class ImageInputFormat 
{
depend java.net.URI;
depend org.jhotdraw.gui.filechooser.ExtensionFileFilter;
depend org.jhotdraw.draw.*;
depend org.jhotdraw.draw.ImageHolderFigure;
depend java.awt.*;
depend java.awt.datatransfer.*;
depend java.awt.geom.*;
depend java.io.*;
depend java.util.*;
depend javax.imageio.*;
depend javax.swing.*;
depend org.jhotdraw.util.Images;
depend org.jhotdraw.draw.AttributeKeys.*;

  /**
     * The prototype for creating a figure that holds the imported image.
     */
    private ImageHolderFigure prototype;
/**
     * Format description used for the file filter.
     */
    private String description;
/**
     * File name extension used for the file filter.
     */
    private String[] fileExtensions;
/**
     * Image IO image format name.
     */
    private String formatName;
/**
     * The mime types which must be matched.
     */
    private String[] mimeTypes;
@Override
    public javax.swing.filechooser.FileFilter getFileFilter() {
        return new ExtensionFileFilter(description, fileExtensions);
    }
public String[] getFileExtensions() {
        return fileExtensions.clone();
    }
@Override
    public JComponent getInputFormatAccessory() {
        return null;
    }
@Override
    public void read(URI uri, Drawing drawing) throws IOException {
        read(new File(uri), drawing);
    }
@Override
    public void read(URI uri, Drawing drawing, boolean replace) throws IOException {
        read(new File(uri), drawing, replace);
    }
public void read(File file, Drawing drawing, boolean replace) throws IOException {
        ImageHolderFigure figure = (ImageHolderFigure) prototype.clone();
        figure.loadImage(file);
        figure.setBounds(
                new Point2D.Double(0, 0),
                new Point2D.Double(
                figure.getBufferedImage().getWidth(),
                figure.getBufferedImage().getHeight()));
        if (replace) {
            drawing.removeAllChildren();
            drawing.set(CANVAS_WIDTH, figure.getBounds().width);
            drawing.set(CANVAS_HEIGHT, figure.getBounds().height);
        }
        drawing.basicAdd(figure);
    }
public void read(File file, Drawing drawing) throws IOException {
        read(file, drawing, true);
    }
@Override
    public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {
        ImageHolderFigure figure = createImageHolder(in);
        if (replace) {
            drawing.removeAllChildren();
            drawing.set(CANVAS_WIDTH, figure.getBounds().width);
            drawing.set(CANVAS_HEIGHT, figure.getBounds().height);
        }
        drawing.basicAdd(figure);
    }
public ImageHolderFigure createImageHolder(InputStream in) throws IOException {
        ImageHolderFigure figure = (ImageHolderFigure) prototype.clone();
        figure.loadImage(in);
        figure.setBounds(
                new Point2D.Double(0, 0),
                new Point2D.Double(
                figure.getBufferedImage().getWidth(),
                figure.getBufferedImage().getHeight()));
        return figure;
    }
@Override
    public boolean isDataFlavorSupported(DataFlavor flavor) {
        if (DataFlavor.imageFlavor.match(flavor)) {
            return true;
        }
        for (String mimeType : mimeTypes) {
            if (flavor.isMimeTypeEqual(mimeType)) {
                return true;
            }
        }
        return false;
    }
@Override
    public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {
        DataFlavor importFlavor = null;
        SearchLoop:
        for (DataFlavor flavor : t.getTransferDataFlavors()) {
            if (DataFlavor.imageFlavor.match(flavor)) {
                importFlavor = flavor;
                break SearchLoop;
            }
            for (String mimeType : mimeTypes) {
                if (flavor.isMimeTypeEqual(mimeType)) {
                    importFlavor = flavor;
                    break SearchLoop;
                }
            }
        }

        Object data = t.getTransferData(importFlavor);
        Image img = null;
        if (data instanceof Image) {
            img = (Image) data;
        } else if (data instanceof InputStream) {
            img = ImageIO.read((InputStream) data);
        }
        if (img == null) {
            throw new IOException("Unsupported data format " + importFlavor);
        }

        ImageHolderFigure figure = (ImageHolderFigure) prototype.clone();
        figure.setBufferedImage(Images.toBufferedImage(img));
        figure.setBounds(
                new Point2D.Double(0, 0),
                new Point2D.Double(
                figure.getBufferedImage().getWidth(),
                figure.getBufferedImage().getHeight()));
        LinkedList<Figure> list = new LinkedList<Figure>();
        list.add(figure);
        if (replace) {
            drawing.removeAllChildren();
            drawing.set(CANVAS_WIDTH, figure.getBounds().width);
            drawing.set(CANVAS_HEIGHT, figure.getBounds().height);
        }
        drawing.addAll(list);
    }

}