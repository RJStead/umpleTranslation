/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the Java Umplificator!*/

namespace org.jhotdraw.gui ;

class JActivityIndicator 
{
depend java.awt.Dimension;
depend java.beans.PropertyChangeEvent;
depend java.beans.PropertyChangeListener;
depend java.util.ArrayList;
depend javax.swing.DefaultBoundedRangeModel;
depend org.jhotdraw.gui.event.ActivityManagerEvent;
depend org.jhotdraw.gui.event.ActivityManagerListener;
depend org.jhotdraw.util.ResourceBundleUtil;
  isA javax.swing.JPanel;

  private ArrayList<ActivityModel> models = new ArrayList<ActivityModel>();
private Handler handler = new Handler();
private ActivityManager manager;
private Object progressOwner;
private ResourceBundleUtil labels;
// Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar progressBar;
public ActivityManager getActivityManager() {
        return manager;
    }
public void setActivityManager(ActivityManager newValue) {
        if (manager != null) {
            manager.removeActivityManagerListener(handler);
        }
        this.manager = newValue;
        if (manager != null) {
            manager.addActivityManagerListener(handler);
        }
        updateActivityModels();
        updateProgressBar();
        updateToolTip();
    }
public Object getActivityOwner() {
        return progressOwner;
    }
public void setActivityOwner(Object progressOwner) {
        this.progressOwner = progressOwner;
        updateActivityModels();
    }
public void addActivityModel(final ActivityModel model) {
        if (progressOwner == null || model.getOwner() == progressOwner) {
            models.add(model);
            model.addPropertyChangeListener(handler);
            updateProgressBar();
            updateToolTip();
            updateIndeterminate();
        }
    }
public void removeActivityModel(final ActivityModel model) {
        if (models.remove(model)) {
            model.removePropertyChangeListener(handler);
            updateProgressBar();
            updateToolTip();
            updateIndeterminate();
        }
    }
private void updateActivityModels() {
        for (ActivityModel pm : models) {
            pm.removePropertyChangeListener(handler);
        }
        models.clear();
        if (manager != null) {
            for (ActivityModel pm : manager.getActivityModels()) {
                if (progressOwner == null || pm.getOwner() == progressOwner) {
                    models.add(pm);
                }
            }
        }
        updateProgressBar();
        updateIndeterminate();
        updateToolTip();
    }
@Override
    public Dimension getPreferredSize() {
        return progressBar.getPreferredSize();
    }
private void updateProgressBar() {
        if (models.isEmpty()) {
            progressBar.setModel(new DefaultBoundedRangeModel());
            progressBar.setEnabled(false);
            progressBar.setVisible(false);
        } else if (models.size() == 1) {
            progressBar.setModel(models.get(0));
            progressBar.setEnabled(true);
            progressBar.setVisible(true);
        } else {
            progressBar.setModel(new DefaultBoundedRangeModel());
            progressBar.setEnabled(true);
            progressBar.setVisible(true);
        }
    }
private void updateToolTip() {
        if (models.isEmpty()) {
            setToolTipText(labels.getString("ActivityIndicator.noActivities.toolTipText"));
        } else if (models.size() == 1) {
            setToolTipText(models.get(0).getTitle());
            //setToolTipText(labels.getString("ActivityIndicator.oneActivity.toolTipText"));
        } else {
            setToolTipText(labels.getFormatted("ActivityIndicator.nActivities.toolTipText", models.size()));
        }
    }
private void updateIndeterminate() {
        if (models.size() == 0) {
            progressBar.setIndeterminate(false);
        } else if (models.size() == 1) {
            progressBar.setIndeterminate(models.get(0).isIndeterminate());
        } else {
            progressBar.setIndeterminate(true);
        }
    }
/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();

        setLayout(new java.awt.BorderLayout());
        add(progressBar, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
@Override
        public void activityModelAdded(ActivityManagerEvent evt) {
            ActivityModel pm = evt.getActivityModel();
            if (progressOwner == null || progressOwner.equals(pm.getOwner())) {
                addActivityModel(pm);
            }
        }
@Override
        public void activityModelRemoved(ActivityManagerEvent evt) {
            ActivityModel pm = evt.getActivityModel();
            removeActivityModel(pm);
        }
@Override
        public void propertyChange(PropertyChangeEvent evt) {
            if (evt.getPropertyName() == ActivityModel.INDETERMINATE_PROPERTY) {
                updateIndeterminate();
            }
            if (evt.getPropertyName() == ActivityModel.NOTE_PROPERTY) {
                updateToolTip();
            }
        }

}