/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the Java Umplificator!*/

namespace org.jhotdraw.color ;

class ColorSliderModel 
{
depend java.awt.Color;
depend java.awt.color.ColorSpace;
depend javax.swing.BoundedRangeModel;
depend javax.swing.JSlider;
depend javax.swing.event.ChangeListener;

  /**
     * Returns the ColorSpace used by this ColorSliderModel.
     * 
     * @return ColorSpace.
     */
    public ColorSpace getColorSpace();
/**
     * Changes the ColorSpace used by this ColorSliderModel.
     * 
     * @param newValue ColorSpace.
     */
    public void setColorSpace(ColorSpace newValue);
/**
     * Returns the number of components used by this ColorSliderModel.
     * 
     * @return Component count.
     */
    public int getComponentCount();
/**
     * Returns the BoundedRangeModel used for the specified component
     * index.
     * 
     * @param componentIndex .
     * 
     * @return BoundedRangeModel.
     */
    public BoundedRangeModel getBoundedRangeModel(int componentIndex);
/**
     * Returns an RGB value based on the value of the specified component index
     * and value, based on the values of all other components of the model.
     * 
     * @param componentIndex
     * @param componentValue
     * @return RGB value.
     */
    public int getInterpolatedRGB(int componentIndex, float componentValue);
/**
     * Sets a value for an individual component.
     * 
     * @param componentIndex
     * @param newValue
     */
    public void setComponent(int componentIndex, float newValue);
/**
     * Gets a value of an individual component.
     * 
     * @param componentIndex
     * @return Value
     */
    public float getComponent(int componentIndex);
/**
     * Gets all component values.
     *
     * @return Values.
     */
    public float[] getComponents();
public void addChangeListener(ChangeListener l);
public void removeChangeListener(ChangeListener l);
/**
     * Configures a JSlider.
     */
    public void configureSlider(int componentIndex, JSlider slider);
/**
     * Unconfigures a JSlider.
     */
    public void unconfigureSlider(JSlider slider);
/**
     * Returns the color value of the model.
     * This is a convenience method for calling getCompositeColor().getColor().
     * 
     * @return color.
     */
    public Color getColor();
/**
     * Sets the color value of the model.
     * This is a convenience method for calling setCompositeColor(new CompositeColor(getColorSpace(), color.getRGB());
     * 
     * @param newValue .
     */
    public void setColor(Color newValue);

}