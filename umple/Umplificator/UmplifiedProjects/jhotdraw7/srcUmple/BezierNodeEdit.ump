/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the Java Umplificator!*/

namespace org.jhotdraw.draw.event ;

class BezierNodeEdit 
{
depend org.jhotdraw.draw.BezierFigure;
depend org.jhotdraw.util.ResourceBundleUtil;
depend org.jhotdraw.geom.BezierPath;
depend javax.swing.undo.AbstractUndoableEdit;
depend javax.swing.undo.CannotRedoException;
depend javax.swing.undo.CannotUndoException;
depend javax.swing.undo.UndoableEdit;
  isA AbstractUndoableEdit;

  private BezierFigure owner;
private int index;
private BezierPath.Node oldValue;
private BezierPath.Node newValue;
@Override
    public String getPresentationName() {
        ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");
        if (oldValue.mask != newValue.mask) {
            return labels.getString("edit.bezierNode.changeType.text");
        } else {
            return labels.getString("edit.bezierNode.movePoint.text");
        }
    }
@Override
    public void redo() throws CannotRedoException {
        super.redo();
        owner.willChange();
        owner.setNode(index, newValue);
        owner.changed();
        if (oldValue.mask != newValue.mask) {
        }
    }
@Override
    public void undo() throws CannotUndoException {
        super.undo();
        owner.willChange();
        owner.setNode(index, oldValue);
        owner.changed();
    }
@Override
    public boolean addEdit(UndoableEdit anEdit) {
        if (anEdit instanceof BezierNodeEdit) {
            BezierNodeEdit that = (BezierNodeEdit) anEdit;
            if (that.owner == this.owner && that.index == this.index) {
                this.newValue = that.newValue;
                return true;
            }
        }
        return false;
    }

}