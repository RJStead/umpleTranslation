/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the Java Umplificator!*/

namespace org.jhotdraw.draw.tool ;

class ImageTool 
{
depend org.jhotdraw.draw.*;
depend org.jhotdraw.draw.ImageHolderFigure;
depend java.io.*;
depend javax.swing.*;
depend java.awt.*;
depend java.util.*;
depend javax.annotation.Nullable;
depend org.jhotdraw.gui.Worker;
  isA CreationTool;

  @Nullable protected FileDialog fileDialog;
@Nullable protected JFileChooser fileChooser;
protected boolean useFileDialog;
protected Thread workerThread;
public void setUseFileDialog(boolean newValue) {
        useFileDialog = newValue;
        if (useFileDialog) {
            fileChooser = null;
        } else {
            fileDialog = null;
        }
    }
public boolean isUseFileDialog() {
        return useFileDialog;
    }
@Override
    public void activate(DrawingEditor editor) {
        super.activate(editor);

        if (workerThread != null) {
            try {
                workerThread.join();
            } catch (InterruptedException ex) {
                // ignore
            }
        }

        final File file;
        if (useFileDialog) {
            getFileDialog().setVisible(true);
            if (getFileDialog().getFile() != null) {
                file = new File(getFileDialog().getDirectory(), getFileDialog().getFile());
            } else {
                file = null;
            }
        } else {
            if (getFileChooser().showOpenDialog(getView().getComponent()) == JFileChooser.APPROVE_OPTION) {
                file = getFileChooser().getSelectedFile();
            } else {
                file = null;
            }
        }

        if (file != null) {
            final ImageHolderFigure loaderFigure = ((ImageHolderFigure) prototype.clone());
            Worker worker = new Worker() {

                @Override
                protected Object construct() throws IOException {
                    ((ImageHolderFigure) loaderFigure).loadImage(file);
                    return null;
                }

                @Override
                protected void done(Object value) {
                    try {
                        if (createdFigure == null) {
                            ((ImageHolderFigure) prototype).setImage(loaderFigure.getImageData(), loaderFigure.getBufferedImage());
                        } else {
                            ((ImageHolderFigure) createdFigure).setImage(loaderFigure.getImageData(), loaderFigure.getBufferedImage());
                        }
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(getView().getComponent(),
                                ex.getMessage(),
                                null,
                                JOptionPane.ERROR_MESSAGE);
                    }
                }

                @Override
                protected void failed(Throwable value) {
                    Throwable t = (Throwable) value;
                    JOptionPane.showMessageDialog(getView().getComponent(),
                            t.getMessage(),
                            null,
                            JOptionPane.ERROR_MESSAGE);
                    getDrawing().remove(createdFigure);
                    fireToolDone();
                }
            };
            workerThread = new Thread(worker);
            workerThread.start();
        } else {
            //getDrawing().remove(createdFigure);
            if (isToolDoneAfterCreation()) {
                fireToolDone();
            }
        }
    }
private JFileChooser getFileChooser() {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
        }
        return fileChooser;
    }
private FileDialog getFileDialog() {
        if (fileDialog == null) {
            fileDialog = new FileDialog(new Frame());
        }
        return fileDialog;
    }

}