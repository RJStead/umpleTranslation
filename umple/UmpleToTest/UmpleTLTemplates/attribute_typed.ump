class UmpleToTest{

attribute_typed <<!<</*attribute_typed*/>><<#

if(at.getType().equals("String") || at.getType().equals(""))
	    	  {
	    	  	   String randomString1 = UUID.randomUUID().toString().replaceAll("-","").substring(0, 8);#>>
	    <<=gen.dependencyInjection(uClass)>>
        <<=uClass.getName()>> <<=gen.initiateClass(uClass)>>;
        
        <<#if (at.isIsLazy())
	      {#>>
	    	  <<@UmpleToTest.attribute_Lazy>>
	      <<#}#>>
        
        <<#if (at.getValue() != null) {#>>
       assertEqual(a<<=uClass.getName()>>.get<<=attrName>>(), <<=at.getValue()>> );
        <<#}#>>
		assertTrue( a<<=uClass.getName()>>.set<<=attrName>>("<<=gen.translate("AttStringManu")>>"));
		assertTrue( a<<=uClass.getName()>>.get<<=attrName>>() =="<<=gen.translate("AttStringManu")>>");
		assertTrue( a<<=uClass.getName()>>.set<<=attrName>>("<<=gen.translate("AttStringManu2")>>"));
		assertTrue( a<<=uClass.getName()>>.get<<=attrName>>()=="<<=gen.translate("AttStringManu2")>>");
		assertFalse( a<<=uClass.getName()>>.get<<=attrName>>() =="<<=gen.translate("AttStringManu")>>");
	    		   <<#
	    	  }

	    	  if(at.getType().equals("Integer"))
	    	  {#>>
	    <<=gen.dependencyInjection(uClass)>>
        <<=uClass.getName()>> <<=gen.initiateClass(uClass)>>;
        <<#if (at.getValue() != null) {#>>
       assertEqual(a<<=uClass.getName()>>.get<<=attrName>>(), <<=at.getValue()>> );
        <<#}#>>        
        	  
	    assertTrue( a<<=uClass.getName()>>.set<<=attrName>>(<<=gen.translate("AttIntManu")>>));
	    assertTrue( a<<=uClass.getName()>>.get<<=attrName>>() == <<=gen.translate("AttIntManu")>>);
	    assertTrue( a<<=uClass.getName()>>.set<<=attrName>>(<<=gen.translate("AttIntManu2")>>));
	    assertTrue( a<<=uClass.getName()>>.get<<=attrName>>() == <<=gen.translate("AttIntManu2")>>);
	    assertFalse( a<<=uClass.getName()>>.get<<=attrName>>() == <<=gen.translate("AttIntManu")>>);
	    	  <<#}
	    	  
	    	  if(at.getType().equals("Double"))
	    	  {#>>
	    <<=gen.dependencyInjection(uClass)>>
        <<=uClass.getName()>> <<=gen.initiateClass(uClass)>>;
        <<#if (at.getValue() != null) {#>>
       assertEqual(a<<=uClass.getName()>>.get<<=attrName>>(), <<=at.getValue()>> );
        <<#}#>>	  
	    assertTrue( a<<=uClass.getName()>>.set<<=attrName>>(<<=gen.translate("AttDoubleManu")>>));
	    assertTrue( a<<=uClass.getName()>>.get<<=attrName>>() == <<=gen.translate("AttDoubleManu")>>);
	    assertTrue( a<<=uClass.getName()>>.set<<=attrName>>(<<=gen.translate("AttDoubleManu2")>>));
	    assertTrue( a<<=uClass.getName()>>.get<<=attrName>>() == <<=gen.translate("AttDoubleManu2")>>);
	    assertFalse( a<<=uClass.getName()>>.get<<=attrName>>() == <<=gen.translate("AttDoubleManu")>>);
	    	  <<#}

	    	  if(at.getType().equals("Float"))
	    	  {#>>
	    <<=gen.dependencyInjection(uClass)>>
        <<=uClass.getName()>> <<=gen.initiateClass(uClass)>>;	 
        <<#if (at.getValue() != null) {#>>
       assertEqual(a<<=uClass.getName()>>.get<<=attrName>>(), <<=at.getValue()>> );
        <<#}#>> 
	    assertTrue( a<<=uClass.getName()>>.set<<=attrName>>(<<=gen.translate("AttFloatManu")>>));
	    assertTrue( a<<=uClass.getName()>>.get<<=attrName>>() == <<=gen.translate("AttFloatManu")>>);
	    assertTrue( a<<=uClass.getName()>>.set<<=attrName>>(<<=gen.translate("AttFloatManu2")>>));
	    assertTrue( a<<=uClass.getName()>>.get<<=attrName>>() == <<=gen.translate("AttFloatManu2")>>);
	    assertFalse( a<<=uClass.getName()>>.get<<=attrName>>() == <<=gen.translate("AttFloatManu")>>);
	    	  <<#}
	    	  if(at.getType().equals("boolean"))
	    	  {#>>
	    <<=gen.dependencyInjection(uClass)>>
        <<=uClass.getName()>> <<=gen.initiateClass(uClass)>>;	 
        <<#if (at.getValue() != null) {#>>
       assertEqual(a<<=uClass.getName()>>.get<<=attrName>>(), <<=at.getValue()>> );
        <<#}#>> 
	    assertTrue( a<<=uClass.getName()>>.set<<=attrName>>(false));
	    assertTrue( a<<=uClass.getName()>>.get<<=attrName>>() == false);
	    assertTrue( a<<=uClass.getName()>>.set<<=attrName>>(true));
	    assertTrue( a<<=uClass.getName()>>.get<<=attrName>>() == true);
	    assertFalse( a<<=uClass.getName()>>.get<<=attrName>>() == false);
	    	  <<#}
	    	  
	    	  if(at.getType().equals("Time"))
	    	  {#>>
	    <<=gen.dependencyInjection(uClass)>>
        <<=uClass.getName()>> <<=gen.initiateClass(uClass)>>;	 
        <<#if (at.getValue() != null) {#>>
        Time sTime = Time.valueOf(<<=at.getValue()>>);
       assertEqual(a<<=uClass.getName()>>.get<<=attrName>>(), sTime );
       
        <<#}#>>
        Time aTime = <<=gen.translate("AttTimeManu")>>;
	    assertTrue( a<<=uClass.getName()>>.set<<=attrName>>(aTime));
	    assertEqual( a<<=uClass.getName()>>.get<<=attrName>>() , aTime);
	    
	    	  <<#}
	    	  
	    	  if(at.getType().equals("Date"))
	    	  {#>>
	    <<=gen.dependencyInjection(uClass)>>
        <<=uClass.getName()>> <<=gen.initiateClass(uClass)>>;	 
        <<#if (at.getValue() != null) {#>>
       Date sDate = Date.valueOf(<<=at.getValue()>>);
       assertEqual(a<<=uClass.getName()>>.get<<=attrName>>(), sDate );
        <<#}#>> 
	    Date aDate = <<=gen.translate("AttDateManu")>>;
	    assertTrue( a<<=uClass.getName()>>.set<<=attrName>>(aDate));
	    
	    assertEqual( a<<=uClass.getName()>>.get<<=attrName>>() , aDate);
	    
	    	  <<#}
#>>
!>>


}
