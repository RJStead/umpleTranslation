class UmpleToTest {
    association_OneToMany <<!<</*association_OneToMany*/>><<#

  
  String myClass = uClass.getName();
  String otherClass = av.getRelatedAssociation().getUmpleClass().getName();
  String relatedAv = av.getRelatedAssociation().getUmpleClass().getName();
  String buffName = "a" +uClass.getName();#>>
        		  
        		  /////// Association: -- <<=av.getRelatedAssociation().getMultiplicity().getRange()>> <<=av.getRelatedAssociation().getUmpleClass().getName()>> /////// 
        		  
        		  test create<<=uClass.getName()>>Without<<=av.getRelatedAssociation().getUmpleClass().getName()>> {        		  
        		  <<=gen.dependencyInjection(uClass)>>
        		  <<=uClass.getName()>> <<=gen.initiateClass(uClass)>>;
        		  
        		  assertTrue (a<<=uClass.getName()>>.numberOf<<=otherClass>>s()== 0);
        		  }
        		  
        		  <<#gen.resetInitializedObject();#>>
        		  
        		  test replaceMandatoryOne<<=uClass.getName()>>In<<=av.getRelatedAssociation().getUmpleClass().getName()>> { 
        		  
        		  <<=gen.dependencyInjection(uClass)>>        		          		  
        		  <<=uClass.getName()>> b<<=gen.initiateClass(uClass)>>;
        		  
        		  <<=gen.dependencyInjection(av.getRelatedAssociation().getUmpleClass())>>
        		  <<=relatedAv>> <<=gen.initiateClass(av.getRelatedAssociation().getUmpleClass())>>; 
        		  <<=relatedAv>> b<<=gen.initiateClass(av.getRelatedAssociation().getUmpleClass())>>;
        		  
        		  a<<=relatedAv>>.set<<=uClass.getName()>>(ba<<=myClass>>);
        		  assertEqual (a<<=relatedAv>>.get<<=uClass.getName()>>() , ba<<=myClass>>);        		  
        		  assertEqual(ba<<=otherClass>>.get<<=myClass>>() , a<<=myClass>> );
        		          		  
        		  }
        		  
        		  <<#gen.resetInitializedObject();#>>
        		  
        		  test remove<<=relatedAv>>In<<=uClass.getName()>> {
        		  
        		  <<=gen.dependencyInjection(uClass)>>
        		  <<=uClass.getName()>> b<<=gen.initiateClass(uClass)>>;
        		  <<=gen.dependencyInjection(av.getRelatedAssociation().getUmpleClass())>>
        		  <<=otherClass>> <<=gen.initiateClass(av.getRelatedAssociation().getUmpleClass())>>;
        		  a<<=uClass.getName()>>.add<<=relatedAv>>(a<<=otherClass>>);
        		  
        		  a<<=otherClass>>.delete(); 
        		  assertTrue (a<<=uClass.getName()>>.numberOf<<=otherClass>>s() == 0);
        		  }
        		  
        		  <<#buffName= "a"+av.getUmpleClass().getName();#>>
        		  <<#gen.resetInitializedObject();#>>
        		  
        		  test Add<<=av.getRelatedAssociation().getUmpleClass().getName()>>ToNew<<=uClass.getName()>> { 
        		  
        		  <<=gen.dependencyInjection(uClass)>>
        		  <<=uClass.getName()>> b<<=gen.initiateClass(uClass)>>;
        		  
        		  <<=gen.dependencyInjection(av.getRelatedAssociation().getUmpleClass())>>
        		  <<=otherClass>> <<=gen.initiateClass(av.getRelatedAssociation().getUmpleClass())>>;
        		  <<=otherClass>> b<<=gen.initiateClass(av.getRelatedAssociation().getUmpleClass())>>;
        		  

        		  <<=buffName>>.add<<=av.getRelatedAssociation().getUmpleClass().getName()>>(a<<=av.getRelatedAssociation().getUmpleClass().getName()>>);
        		  <<=buffName>>.add<<=av.getRelatedAssociation().getUmpleClass().getName()>>(ba<<=av.getRelatedAssociation().getUmpleClass().getName()>>);  
        
        		  assertEqual( a<<=myClass>>.get<<=otherClass>>(1),ba<<=otherClass>>); 
        		  assertEqual ( ba<<=otherClass>>.get<<=myClass>>(), a<<=myClass>>);
        		  assertEqual ( a<<=myClass>>.numberOf<<=otherClass>>s(),  2);
        		  }
        		  <<#gen.resetInitializedObject();#>>
        		  
        		  <<#
        		  
#>>!>>
}
