<?xml version="1.0" encoding="UTF-8"?>
<project basedir=".." default="build" name="UmpleEclipsePlugin" >


  <!-- ```````````````````````````
    Environment Variables
  ``````````````````````````` -->
  <import file="_template.xml" />

  <property name="project.path" value="cruise.umple.eclipse"/>
  <property name="bin.path" value="${project.path}/bin"/>
  <property name="dist.path" value="${dist.dir}/cruise.umple.eclipse"/>
  <property name="test.output.path" value="${dist.dir}/qa/cruise.umple.eclipse"/>

  <condition property="jvmarg.01" value="-d32"><equals arg1="${is.osx}" arg2="true" /></condition>
  <condition property="jvmarg.02" value="-XstartOnFirstThread"><equals arg1="${is.osx}" arg2="true" /></condition>
  <property name="jvmarg.01" value="-Dignore1"/>
  <property name="jvmarg.02" value="-Dignore2"/>

  <condition property="path.eclipse.01" value="org.eclipse.swt_3.5.2.v3557f.jar"><equals arg1="${is.osx}" arg2="true" /></condition>
  <condition property="path.eclipse.02" value="org.eclipse.swt.cocoa.macosx_3.5.2.v3557f.jar"><equals arg1="${is.osx}" arg2="true" /></condition>
  <property name="path.eclipse.01" value="linux/org.eclipse.swt_3.6.2.v3659c.jar"/>
  <property name="path.eclipse.02" value="linux/org.eclipse.swt.gtk.linux.x86_64_3.6.2.v3659b.jar"/>


  <path id="project.classpath">
    <pathelement location="${bin.path}"/>
    <pathelement location="cruise.umple/bin"/>
    <path refid="eclipse.classpath"/>
    <path refid="umple.classpath"/>
    <path refid="xtext_core.classpath"/>
    <path refid="junit4.classpath"/>
  </path>

  <!-- ```````````````````````````
    Compile the application
  ``````````````````````````` -->

  <target name="compile">
    <echo message="${ant.project.name}: ${ant.file}"/>

    <javac debug="true" includeantruntime="false" debuglevel="source,lines,vars" destdir="${bin.path}" source="1.8" target="1.8">
      <src path="${project.path}/src"/>
      <src path="${project.path}/test"/>
      <src path="cruise.umple/src"/>
      <src path="cruise.umple/src-gen-umpletl"/>
      <src path="cruise.umple/src-gen-umple"/>
      <exclude name="**/.svn"/>
      <exclude name="**/*.ump" />
      <exclude name="**/data" />
      <classpath refid="project.classpath"/>
    </javac>
  </target>

  <!-- ```````````````````````````
    Test the application
  ``````````````````````````` -->
  
  <target name="test">
    <junit fork="yes" forkmode="perBatch" haltonfailure="${haltonfailure}" showoutput="${showJunitOutput}" printsummary="${showJunitSummary}">
      <jvmarg value="${jvmarg.01}"/>
      <jvmarg value="${jvmarg.02}" />
      
      <formatter type="xml"/>
      <batchtest fork="yes" todir="${test.output.path}">
        <fileset dir="${project.path}/test">
          <include name="**/*Test*.java"/>
          <exclude name="**/AllTests.java"/>
        </fileset>
      </batchtest>
      <classpath refid="project.classpath"/>
    </junit>

    <junitreport todir="${test.output.path}">
      <fileset dir="${test.output.path}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${test.output.path}"/>
    </junitreport>
  </target>

  <!-- ```````````````````````````
    Package the application
  ``````````````````````````` -->

  <target name="package">
    <echo message="Package Version: ${umple.version}" />

    <property name="plugin.build.root" location="dist" />
    <property name="plugin.build.temp" location="${plugin.build.root}/temp" />
    <property name="plugin.build.out" location="${plugin.build.root}" />

    <delete dir="${plugin.build.temp}" />
    <mkdir dir="${plugin.build.temp}" />
    <mkdir dir="${plugin.build.out}" />
    
    <copy file="cruise.umple.eclipse/META-INF/MANIFEST.MF" todir="${plugin.build.temp}" />

<!--
    <replace file="${plugin.build.temp}/MANIFEST.MF">
      <replacefilter token=":=" value="=" />
      <replacefilter token=":" value="=" />
      <replacetoken>;</replacetoken>
      <replacevalue>
      </replacevalue>
    </replace>  
-->

    <property file="${plugin.build.temp}/MANIFEST.MF" />
    <property name="plugin.dir" value="cruise.umple.eclipse_${umple.version}" />
    <property name="plugin.files" location="${plugin.build.temp}/files/${plugin.dir}" />
    <property name="plugin.jar" location="${plugin.build.temp}/jars/plugins/${plugin.dir}.jar" />
    <property name="product.zip" value="${plugin.build.out}/cruise.umple.eclipse_v${umple.version}.zip" />

    <copy todir="${plugin.files}">
      <fileset dir="cruise.umple.eclipse" includes="plugin.xml" />
      <fileset dir="cruise.umple.eclipse/bin" includes="cruise/**" />
      <fileset dir="cruise.umple.eclipse" includes="icons/**" />
      <fileset dir="cruise.umple.eclipse" includes="META-INF/MANIFEST.MF" />
    </copy>

    <copy todir="${plugin.files}">
      <fileset dir="cruise.umple/src" includes="*.grammar"/>
      <fileset dir="cruise.umple/src" includes="*.error"/>
    </copy>
    
    <!-- Assemble plug-in jar -->
    <mkdir dir="${plugin.build.temp}/jars/plugins" />
    <zip destfile="${plugin.jar}">
      <zipfileset dir="${plugin.files}">
        <include name="**/*.*" />
      </zipfileset>
    </zip>
    
    <!-- Assemble the product zip -->
    <zip destfile="${product.zip}">
      <fileset dir="${plugin.build.temp}/jars" />
    </zip>

    <copy file="${plugin.build.temp}/jars/plugins/${plugin.dir}.jar" tofile="${plugin.build.out}/${plugin.dir}.jar" />

    <!-- Cleanup once you are done -->
    <delete dir="${plugin.build.temp}" />
    

  </target>

  <!-- ```````````````````````````
    Build the application
  ``````````````````````````` -->
  
  <!-- 
    Build
    run by the build machine, should work as-is on your machine, but be careful
    as your code will be run against the "latest" Umpled Umple.
   -->
  <target name="build" >
    <echo> SKIPPING ECLIPSE PLUGIN </echo>

    <!-- <ant antfile="build/build.umple.xml" target="precondition" inheritAll="false" />
    <antcall target="template.clean" />
    <antcall target="template.init" />
    <antcall target="template.setVersion" />
    <antcall target="compile" /> -->
    <!-- Not yet able to get SWT testing working on LINUX, and 3 test cases is not worth the effort -->
    <!-- <antcall target="test" /> -->
    <!-- <antcall target="package" />
    <antcall target="template.resetVersion" />
    <ant antfile="build/build.umple.xml" target="postcondition" inheritAll="false" /> -->
  </target>
  
  <!-- can be run locally as a quick(er) test to see if the build will pass on the server -->
  <target name="pre_build" >
    <antcall target="compile" />
    <antcall target="test" />
  </target>
  
  
  
</project>

