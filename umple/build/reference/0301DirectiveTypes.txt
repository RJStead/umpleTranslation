Types of Directives
Directives
noreferences
@@tooltip Categories of top-level Umple statements to specify entities such as classes as well as control reuse and generation (use statements, before/after statements, mixsets, namespaces, and so on)

@@description
<p>      
Directives appear as the 'main' entries in an Umple file. The following are the main types:</p>

<ul>
<li><b><a href="UseStatements.html">Use statements</a></b> result in inclusion of other Umple files to allow for modularization and reuse.</li>

<br />

<li><b>Entity declarations</b> define the top level model or code elements including
<a href="ClassDefinition.html">classes</a>,
<a href="interfaceDefinition.html">interfaces</a>,
<a href="Traits.html">traits</a>,
<a href="AssociationDefinition.html">associations</a>,
<a href="AssociationClassDefinition.html">association classes</a>, and
<a href="EnumerationDefinition.html">enumerations</a>.
Other model or code elements, such as <a href="MethodDefinition.html">methods</a> or <a href="AttributeDefinition.html">attributes</a> must be placed <i>inside</i> these entities. Note that the same entity can be declared more than once to add new internal contents. This is called using a mixin (one mixes together the contents of multiple declarations).</li>

<br />

<li><b><a href="Top-levelAspects.html">Aspects (code injections)</a></b> tell umple to inject certain code before, after or around certain methods of certain classes. These can be used to modify the behaviour of both custom and generated code.</li>

<br />

<li><b><a href="BasicMixsets.html">Mixset directives.</a></b> These are named blocks of Umple code that can be included (optionally) with a <a href="UseStatements.html">use statement</a>. Several of them can have the same name. If there us no use statement for the mixset, that code is ignored. These can be used to build product lines and different software versions.</li>

<br />

<li><b><a href="NamespaceDirectives.html">Namespace directives</a></b> gather entities in logical groups. Within a namespace, entities must have different names. Namespaces affect code generation; for example they correspond to packages in Java.</li>
<br />

<li><b><a href="StrictnessDirective.html">Strictness Directives</a></b> tell the compiler to issue extra warnings or errors in certain situations, or to turn certain errors into warnings, or to suppress certain warnings.</li>
<br />

<li><b>Generate directives</b> tell Umple one or more generated outputs to create (see the grammar below for the list of languages and other outputs that can be generated). You can omit these entirely and specify them on the command line or using UmpleOnline. As a second argument on the generate directive, you can specify a path (directory) where the output should be put. You can also specify --override-all to ensure subsequent directives are ignored.</li>

<br />

<li><b>Tracer directives</b> tell Umple which tracing tool to use in order to <a href="TracingBasics.html">trace execution of the code</a>.</li>

</ul>

@@syntax
[[directive]] [[generate]] [[generate_path]] [[useStatement]] [[namespace]] [[traceType]] [[entity]]
