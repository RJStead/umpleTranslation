
namespace cruise.queued.statemachine.test;


class QueuedSM
{
  queued sm
  {
    s1 {
      e1 -> s2;
    }
    s2 {
      e2 -> s2;
    }
  }
}

class QueuedSM_withParameters
{
  Integer value=0;
  
  queued sm
  {
    s1 {
      e1(Integer val) /{setValue(val);} -> s2;
    }
    s2 {
      e2 -> s2;
    }
  }
}

class QueuedSM_timedEvent 
{
  int timer = 3;

  queued status
  {
    s1 { 
      after(2) -> s2; 
    }
    s2 {  
    } 
  }
}

class QueuedSM_autoTransition
{
  queued sm
  {
    s1 { -> s2; }
    s2 { }
  }
}

class QueuedSM_autoTransition_timedEvent {
  queued sm{
    s1 {
      ->s2;
    }
    s2{
      after(2) -> s3;
    }
    s3{
    }
  }
}


class AutomatedTellerMachine{
  String[] logs;
  queued sm{
    
    idle {
      cardInserted -> active;
      maintain -> maintenance;
      unspecified -> error1;
    }
    
    maintenance {
      isMaintained -> idle;
    }
    
    active {
      entry /{addLog("Card is read");}
      exit /{addLog("Card is ejected");}
      validating {
        validated -> selecting;
        unspecified -> error2;
      }
      
      selecting {
        select -> processing;
      }
      
      processing {
        selectAnotherTransiction -> selecting;
        finish -> printing; 
      }
      
      printing {
        receiptPrinted -> idle;
      }
      cancel -> idle;
    }
    
    error1{
      ->idle;
    }
    
    error2{
      ->validating;
    }   
  }
}

class QueuedSM_NestedStates_level1 {
  queued sm {
     s1 {
        e1 -> s2;
     }
     s2 {
        s2a {
          e2 -> s2b;
        }
        s2b {
          e3 -> s2a;
        }
     }
  }
}


class QueuedSM_NestedStates_level2 {
  queued sm1 {
    s1 {
      e -> s2;
      s1a {
        f -> s2b;
        g -> s1a;
      }
      s1b {
        h -> s1a;
        i -> s2b;
        k -> s2;
      }
    }
    s2 {
      e -> s1;
      s2a {
        i -> s2b;
        j -> s1b;
      }
      s2b {
        h -> s2a;
        k -> s1;
        s2b1 {
          m -> s2b2;
        }
        s2b2 {
          m -> s2b1;
        }
      }
    }
  }
}

class QueuedSM_ConcurrentState
{
  queued sm
  {
    s1
    {
      e1 -> s2;
    }
    s2
    {
      e2 -> s1;
      s2a
      {
        e3 -> s2b;
        e5 -> s1;
      }
      s2b
      {
        e3 -> s2a;
      }
      
      ||
      
      s2c
      {
        e4 -> s2d;  
      }
      
      s2d
      {
        e4 -> s2c;
      }     
      
    }
  
  }
}

class QueuedSM_ConcurrentState_2
{
  queued sm
  {
    s1
    {
      e1 -> s2;
    }
    s2
    {
      e2 -> s1;
      s2a
      {
        e3 -> s2b;
        e5 -> s1;
      }
      
      ||
      
      s2b
      {
        e4 -> s1;  
      }          
    }  
  }
}


class MultipleQueuedSMs {
  queued sm{
    s1{
      e1 -> s2;
    }
    s2{
      e2 ->s1;
    }
  }
  queued sm1{
    s3{
      e2 -> s4;
    }
    s4{
      e4 -> s3;
    }
  }
}

class MultipleQueuedSMs_sameEvents {
   queued sm{
    s1 {
      ev1 ->s2;
      ev5 ->s3;
    }
    s2 {
      ev2 ->s3;
    }
    s3 {
      ev3 ->s4;
    }
    s4 {
      ev4 ->s1;
    }
  }
  queued sm1 {
    s21 {
      ev1 -> s22;
    }
    s22 {
      ev7 -> s21;
    }
  }
 }
 
 class MultipleQueuedSMs_nestedStates_EventlessSM{
  queued sm{
    s1{
      e1 -> s1a;
      s1a{
        e5 -> s1b;
      }
      s1b{
        e6 -> s2;
      }
    }
    s2{
      e2 ->s1;
    }
  }
  queued sm1{
    s3{
      e3 -> s4;
    }
    s4{
      e4 -> s3;
    }
  }
  sm2 {q{} s{}}
}



class QueuedSM_timedTransition_1 {
  String log = "initial value";
  queued sm {
    s0 {
      entry / {log = "running";}
      ev0 -> s1;
    }
    s1 {
      after(2) -> s2;
    }
    s2 {
      ev2 -> s3;
    }
    s3 {
      ev3 -> s4;
    }
    s4 {}
  }
}


class QueuedSM_timedTransition_2 {
  String log = "initial value";
  queued sm {
    s0 {
      entry / {log = "running";}
      ev0 -> s1;
    }
    s1 {
      after(2) -> s2;
      ev1 -> s3;
    }
    s2 {
      ev2 -> s4;
    }
    s3 {
      ev3 -> s4;
    }
    s4 {}
  }
}