class UmpleToRuby {
    association_IsNumberOfValidMethod <<!<</*association_IsNumberOfValidMethod*/>>
  def <<=gen.translate("isNumberOfValidMethod",av)>>
    <<# if (customIsNumberOfValidPrefixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customIsNumberOfValidPrefixCode, "    ")); } #>>
<<# if (av.getMultiplicity().isUpperBoundMany()) { #>>
    is_valid = <<=gen.translate("numberOfMethod",av)>> >= <<=uClass.getName()>>.<<=gen.translate("minimumNumberOfMethod",av)>>
<<# } else { #>>
    is_valid = <<=gen.translate("numberOfMethod",av)>> >= <<=uClass.getName()>>.<<=gen.translate("minimumNumberOfMethod",av)>> and <<=gen.translate("numberOfMethod",av)>> <= <<=uClass.getName()>>.<<=gen.translate("maximumNumberOfMethod",av)>>
<<# } #>>
    <<# if (customIsNumberOfValidPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customIsNumberOfValidPostfixCode, "    ")); } #>>
    is_valid
  end!>>
}
