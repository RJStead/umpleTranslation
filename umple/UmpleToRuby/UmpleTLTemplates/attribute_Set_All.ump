use attribute_Set.ump;
use attribute_SetDefaulted.ump;
use attribute_SetDefaulted_subclass.ump;
use attribute_SetImmutable.ump;
use attribute_SetMany.ump;
use attribute_SetMany_subclass.ump;
use attribute_Set_subclass.ump;


class UmpleToRuby {
    attribute_Set_All <<!<</*attribute_Set_All*/>><<#
  // GENERIC FILE - EDIT IN UmpleToTemplate project, then run "ant -f build.codegen.xml to move into the appropriate projects
  for (Attribute av : uClass.getAttributes())
  {
    if (av.isConstant() || av.getIsAutounique() || "internal".equals(av.getModifier()) || av.getIsDerived())
    {
      continue;
    }

    gen.setParameterConstraintName(av.getName());    
    
    List<TraceItem> traceItems = av.getTraced("setMethod", uClass);
    

    String customSetPrefixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "before", "setMethod", av));
    String customSetPostfixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "after", "setMethod", av));

    String customResetPrefixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "before", "resetMethod", av));
    String customResetPostfixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "after", "resetMethod", av));

    String customAddPrefixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "before", "addMethod", av));
    String customAddPostfixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "after", "addMethod", av));
  
    String customRemovePrefixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "before", "removeMethod", av));
    String customRemovePostfixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "after", "removeMethod", av));
    
    if (av.isImmutable())
    {
      if (av.getIsLazy())
      {
        #>><<@ UmpleToRuby.attribute_SetImmutable >><<#
      }
    }
    else if (av.getModifier().equals("defaulted"))
    {
      #>><<@ UmpleToRuby.attribute_SetDefaulted >><<#
    }
    else if (av.getIsList())
    {
      #>><<@ UmpleToRuby.attribute_SetMany >><<#
    }
    else
    {
      #>><<@ UmpleToRuby.attribute_Set >><<#
    }
  }

  if(uClass.getExtendsClass()!=null)
  {
    for(Attribute av:uClass.getExtendsClass().getAttributes())
    {
      if (av.isConstant() || av.getIsAutounique() || "internal".equals(av.getModifier()) || av.getIsDerived())
      {
        continue;
      }

      List<TraceItem> traceItems = av.getTraced("setMethod", uClass);

      gen.setParameterConstraintName(av.getName());

      String customSetPrefixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "before", "setMethod", av));
      String customSetPostfixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "after", "setMethod", av));

//      String customResetPrefixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "before", "resetMethod", av));
//      String customResetPostfixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "after", "resetMethod", av));
      
      String customAddPrefixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "before", "addMethod", av));
      String customAddPostfixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "after", "addMethod", av));

//      String customRemovePrefixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "before", "removeMethod", av));
//      String customRemovePostfixCode = GeneratorHelper.toCode(gen.getApplicableCodeInjections(uClass, "after", "removeMethod", av));

      if(customSetPrefixCode!=null||customSetPostfixCode!=null)
      {
        if (av.getModifier().equals("defaulted"))
        {
          #>><<@ UmpleToRuby.attribute_SetDefaulted_subclass >><<#
        }
        else if (av.getIsList())
        {
          #>><<@ UmpleToRuby.attribute_SetMany_subclass >><<#
        }
        else if(!av.isImmutable()||av.getIsLazy())//if(customSetPrefixCode!=null&&customSetPostfixCode!=null&&customSetPrefixCode.matches("[\\s]*if.*\\n[\\s]*.*"))
        {
          #>><<@ UmpleToRuby.attribute_Set_subclass >><<#
        }
      }    
    }
  }
  gen.setParameterConstraintName("");
#>>!>>
}
