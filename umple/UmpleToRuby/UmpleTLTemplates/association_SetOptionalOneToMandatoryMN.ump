class UmpleToRuby {
    association_SetOptionalOneToMandatoryMN <<!<</*association_SetOptionalOneToMandatoryMN*/>>
#  def <<=gen.translate("setMethod",av)>><<=gen.translate("parameterOne",av)>>
#  
#    #
#    # The source of the code generation is association_SetOptionalOneToMN.jet
#    # (this) set file assumes the generation of a maximumNumberOfXXX 
#    #   method <<=gen.relatedTranslate("maximumNumberOfMethod",av)>>
#    # Currently this will not compile due to Issue351 - the template code is fine.
#    #
#    wasSet = false
#
#    <<=gen.translate("parameterExisting",av)>> = <<=gen.translate("associationOne",av)>>
#    
#    if <<=gen.translate("parameterExisting",av)>> == null
#      if <<=gen.translate("parameterOne",av)>> != null
#        if <<=gen.translate("parameterOne",av)>>.<<=gen.relatedTranslate("addMethod",av)>>(self)
#          <<=gen.translate("parameterExisting",av)>> = <<=gen.translate("parameterOne",av)>>
#          wasSet = true
#        end
#      end
#    else if <<=gen.translate("parameterExisting",av)>> != null
#      if <<=gen.translate("parameterOne",av)>> == null
#        if <<=gen.translate("parameterExisting",av)>>.<<=gen.relatedTranslate("minimumNumberOfMethod",av)>> < <<=gen.translate("parameterExisting",av)>>.<<=gen.relatedTranslate("numberOfMethod",av)>>
#          <<=gen.translate("parameterExisting",av)>>.<<=gen.relatedTranslate("removeMethod",av)>>(self)
#          <<=gen.translate("parameterExisting",av)>> = <<=gen.translate("parameterOne",av)>>  # <<=gen.translate("parameterOne",av)>> == null
#          wasSet = true
#        end
#      else
#        if     <<=gen.translate("parameterExisting",av)>>.<<=gen.relatedTranslate("minimumNumberOfMethod",av)>> < <<=gen.translate("parameterExisting",av)>>.<<=gen.relatedTranslate("numberOfMethod",av)>>()
#            && <<=gen.translate("parameterOne",av)>>.<<=gen.relatedTranslate("maximumNumberOfMethod",av)>> > <<=gen.translate("parameterOne",av)>>.<<=gen.relatedTranslate("numberOfMethod",av)>>()
#          <<=gen.translate("parameterExisting",av)>>.<<=gen.relatedTranslate("removeMethod",av)>>(self)
#          <<=gen.translate("parameterOne",av)>>.<<=gen.relatedTranslate("addMethod",av)>>(self)
#          <<=gen.translate("parameterExisting",av)>> = <<=gen.translate("parameterOne",av)>>
#          wasSet = true
#        end
#      end
#    end
#    
#    if wasSet
#      <<=gen.translate("associationOne",av)>> = <<=gen.translate("parameterExisting",av)>>
#    end
#    
#    return wasSet
#  end
 !>>
}
