class UmpleToRuby {
    association_SetOneToMany <<!<</*association_SetOneToMany*/>>
  def <<=gen.translate("setMethod",av)>>(<<=gen.translate("parameterOne",av)>>)
    was_set = false
    <<# if (customSetPrefixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetPrefixCode, "    ")); } #>>
    if <<=gen.translate("parameterOne",av)>>.nil?
      <<# if (customSetPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetPostfixCode, "      ")); } #>>
      return was_set
    end

    <<=gen.translate("parameterExisting",av)>> = @<<=gen.translate("associationOne",av)>>
    @<<=gen.translate("associationOne",av)>> = <<=gen.translate("parameterOne",av)>>
    if !<<=gen.translate("parameterExisting",av)>>.nil? and !<<=gen.translate("parameterExisting",av)>>.eql?(<<=gen.translate("parameterOne",av)>>)
      <<=gen.translate("parameterExisting",av)>>.<<=gen.relatedTranslate("removeMethod",av)>>(self)
    end
    @<<=gen.translate("associationOne",av)>>.<<=gen.relatedTranslate("addMethod",av)>>(self)
    was_set = true
    <<# if (customSetPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetPostfixCode, "    ")); } #>>
    was_set
  end
!>>
}
