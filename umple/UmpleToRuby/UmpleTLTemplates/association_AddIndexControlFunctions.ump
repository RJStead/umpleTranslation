class UmpleToRuby {
    association_AddIndexControlFunctions <<!<</*association_AddIndexControlFunctions*/>>
  def <<=gen.translate("addAtMethod",av)>>(<<=gen.translate("parameterOne",av)>>, index)
    was_added = false
    if <<=gen.translate("addMethod",av)>>(<<=gen.translate("parameterOne",av)>>)
      if(index < 0)
        index = 0
      end
      if(index > <<=gen.translate("numberOfMethod",av)>>())
        index = <<=gen.translate("numberOfMethod",av)>>() - 1
      end
      @<<=gen.translate("associationMany",av)>>.delete(<<=gen.translate("parameterOne",av)>>)
      @<<=gen.translate("associationMany",av)>>.insert(index, <<=gen.translate("parameterOne",av)>>)
      was_added = true
    end
    was_added
  end

  def <<=gen.translate("addOrMoveAtMethod",av)>>(<<=gen.translate("parameterOne",av)>>, index)
    was_added = false
    if @<<=gen.translate("associationMany",av)>>.include?(<<=gen.translate("parameterOne",av)>>)
      if(index < 0)
        index = 0
      end
      if(index > <<=gen.translate("numberOfMethod",av)>>())
        index = <<=gen.translate("numberOfMethod",av)>>() - 1
      end
      @<<=gen.translate("associationMany",av)>>.delete(<<=gen.translate("parameterOne",av)>>)
      @<<=gen.translate("associationMany",av)>>.insert(index, <<=gen.translate("parameterOne",av)>>)
      was_added = true
    else
      was_added = <<=gen.translate("addAtMethod",av)>>(<<=gen.translate("parameterOne",av)>>, index)
    end
    was_added
  end
!>>
}
