class UmpleToRuby {
    association_SetUnidirectionalOptionalN <<!<</*association_SetUnidirectionalOptionalN*/>>
  def <<=gen.translate("setManyMethod",av)>>(<<=gen.translate("parameterMany",av)>>)
    was_set = false
    <<# if (customSetManyPrefixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPrefixCode, "    ")); } #>>
    <<=gen.translate("parameterVerifiedMany",av)>> = []
    <<=gen.translate("parameterMany",av)>>.each do |<<=gen.translate("parameterOne",av)>>|
      next if (<<=gen.translate("parameterVerifiedMany",av)>>.include?(<<=gen.translate("parameterOne",av)>>))
      <<=gen.translate("parameterVerifiedMany",av)>> << <<=gen.translate("parameterOne",av)>>
    end

    if <<=gen.translate("parameterVerifiedMany",av)>>.size != <<=gen.translate("parameterMany",av)>>.size or <<=gen.translate("parameterVerifiedMany",av)>>.size() > <<=uClass.getName()>>.<<=gen.translate("maximumNumberOfMethod",av)>>
      <<# if (customSetManyPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "      ")); } #>>
      return was_set
    end

    @<<=gen.translate("associationMany",av)>>.clear
    <<=gen.translate("parameterVerifiedMany",av)>>.each do |<<=gen.translate("parameterOne",av)>>|
      @<<=gen.translate("associationMany",av)>> << <<=gen.translate("parameterOne",av)>>
    end

    was_set = true
    <<# if (customSetManyPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "    ")); } #>>
    was_set
  end
!>>
}
