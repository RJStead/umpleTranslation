class UmpleToRuby {
    association_SetOptionalOneToOptionalOne <<!<</*association_SetOptionalOneToOptionalOne*/>>
  def <<=gen.translate("setMethod",av)>>(<<=gen.translate("parameterNew",av)>>)
    was_set = false
    <<# if (customSetPrefixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetPrefixCode, "    ")); } #>>
    if <<=gen.translate("parameterNew",av)>>.nil?
      <<=gen.translate("parameterExisting",av)>> = @<<=gen.translate("associationOne",av)>>
      @<<=gen.translate("associationOne",av)>> = nil
      
      if !<<=gen.translate("parameterExisting",av)>>.nil? and !<<=gen.translate("parameterExisting",av)>>.<<=gen.relatedTranslate("getMethod",av)>>.nil?
        <<=gen.translate("parameterExisting",av)>>.<<=gen.relatedTranslate("setMethod",av)>>(nil)
      end
      was_set = true
      <<# if (customSetPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetPostfixCode, "      ")); } #>>
      return was_set
    end

    <<=gen.translate("parameterCurrent",av)>> = self.<<=gen.translate("getMethod",av)>>
    if !<<=gen.translate("parameterCurrent",av)>>.nil? and !<<=gen.translate("parameterCurrent",av)>>.eql?(<<=gen.translate("parameterNew",av)>>)
      <<=gen.translate("parameterCurrent",av)>>.<<=gen.relatedTranslate("setMethod",av)>>(nil)
    end

    @<<=gen.translate("associationOne",av)>> = <<=gen.translate("parameterNew",av)>>
    <<=gen.relatedTranslate("parameterExisting",av)>> = <<=gen.translate("parameterNew",av)>>.<<=gen.relatedTranslate("getMethod",av)>>

    unless self.eql?(<<=gen.relatedTranslate("parameterExisting",av)>>)
      <<=gen.translate("parameterNew",av)>>.<<=gen.relatedTranslate("setMethod",av)>>(self)
    end
    was_set = true
    <<# if (customSetPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetPostfixCode, "    ")); } #>>
    was_set
  end
!>>
}
