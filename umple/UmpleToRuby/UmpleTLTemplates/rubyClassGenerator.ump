use UmpleNotice.ump;
use association_Get_All.ump;
use association_Set_All.ump;
use attribute_Get_All.ump;
use attribute_IsBoolean_All.ump;
use attribute_Set_All.ump;
use class_MethodDeclaration.ump;
use constructor_Declare_All.ump;
use delete_All.ump;
use equals.ump;
use import_packages.ump;
use members_AllAssociations.ump;
use members_AllAttributes.ump;
use members_AllDoActivities.ump;
use members_AllHelpers.ump;
use members_AllStateMachines.ump;
use members_AllStatics.ump;
use state_machine_Events_All.ump;
use state_machine_Get_All.ump;
use state_machine_Set_All.ump;
use state_machine_doActivity_All.ump;
use state_machine_timedEvent_All.ump;


namespace cruise.umple.compiler.ruby;

external interface ILang{}

class RubyClassGenerator {
    depend cruise.umple.compiler.*;
    depend cruise.umple.util.*;
    depend java.util.*;

    isA ILang;

    // Add a newline to the end of the input
    private void appendln(StringBuilder buffer, String input, Object... variables)
    {
        append(buffer, input + "\n", variables);
    }

    // This method will be used to append formatted strings
    // i.e. format("Hello {0} {1}", "andrew","forward");
    private void append(StringBuilder buffer, String input, Object... variables)
    {
        buffer.append(StringFormatter.format(input,variables));
    }

    emit getCode(UmpleModel model, UmpleElement uElement)(rubyClassGenerator);

    rubyClassGenerator <<!<</*rubyClassGenerator*/>><<@ UmpleToRuby.UmpleNotice >>

<<#
  UmpleClass uClass = (UmpleClass) uElement;
  GeneratedClass gClass = uClass.getGeneratedClass();
  RubyGenerator gen = new RubyGenerator();
  GeneratorHelper.generator = gen;
  gen.setModel(model);
  gen.jgen.setModel(model);

  HashMap<String,String> codeInjectionMap = new HashMap<String,String>();
  for (CodeInjection inject : uClass.getCodeInjections())
  {
    String operation = StringFormatter.toUnderscore(inject.getOperation());
    String key = inject.getType() + ":" + operation;
    String newCodeToInject = "";
    String injectCode = inject.getConstraintTree()==null?inject.getCode():inject.getConstraintCode(gen);
    if (codeInjectionMap.containsKey(key))
    {
      newCodeToInject = StringFormatter.format("{0}\n    {1}",codeInjectionMap.get(key),injectCode);
    }
    else
    {
      newCodeToInject = injectCode;
    }
    codeInjectionMap.put(key,newCodeToInject);
  }

  boolean isFirst = true;

#>>

<<=gen.translate("packageDefinition",uClass)>><<@ UmpleToRuby.import_packages >>


<<# if (uClass.numberOfComments() > 0) { if(!uClass.getComments().get(0).getIsInline()) {append(realSb, "\n{0}", Comment.format("RubyMultiline",uClass.getComments()));} else { append(realSb, "\n{0}", Comment.format("Hash",uClass.getComments()));} } #>>
class <<=uClass.getName()>><<= gen.translate("isA",uClass) >>
<<@ UmpleToRuby.members_AllStatics >><<@ UmpleToRuby.members_AllAttributes >><<@ UmpleToRuby.members_AllStateMachines >><<@ UmpleToRuby.members_AllDoActivities >><<@ UmpleToRuby.members_AllAssociations >><<@ UmpleToRuby.members_AllHelpers >>


<<# if (!uClass.getIsSingleton()) { #>>
  #------------------------
  # CONSTRUCTOR
  #------------------------
<<@ UmpleToRuby.constructor_Declare_All >>


<<# } #>>
  #------------------------
  # INTERFACE
  #------------------------
<<@ UmpleToRuby.attribute_Set_All >><<@ UmpleToRuby.attribute_Get_All >><<@ UmpleToRuby.attribute_IsBoolean_All >><<@ UmpleToRuby.state_machine_Get_All >><<@ UmpleToRuby.state_machine_Events_All >><<@ UmpleToRuby.state_machine_Set_All >><<@ UmpleToRuby.association_Get_All >><<@ UmpleToRuby.association_Set_All >>
<<# if (uClass.getKey().isProvided()) { #>><<@ UmpleToRuby.equals >>
<<# } #>><<@ UmpleToRuby.state_machine_doActivity_All >><<@ UmpleToRuby.state_machine_timedEvent_All >><<@ UmpleToRuby.delete_All >>
  <<# boolean hasNonAutoGeneratedMethods = false;
      for (Method aMethod: uClass.getMethods())
      {
          if (aMethod.getSource() != Method.Source.fAutoAPI)
          {
              hasNonAutoGeneratedMethods = true;
              break;
          }
      }
  #>>
  <<# if (uClass.hasMethods() && hasNonAutoGeneratedMethods) { #>><<@ UmpleToRuby.class_MethodDeclaration >>
  <<# } #>>
<<# if (uClass.getExtraCode() != null && uClass.getExtraCode().length() > 0) { #>>
  #------------------------
  # DEVELOPER CODE - PROVIDED AS-IS
  #------------------------
  
  <<=uClass.getExtraCode()>>
<<# } #>>
end
<<=gen.translate("packageDefinitionEnd",uClass)>>!>>
}
