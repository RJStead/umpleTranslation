class UmpleToRuby {
    association_SetOneToOptionalOne <<!<</*association_SetOneToOptionalOne*/>>
  def <<=gen.translate("setMethod",av)>>(<<=gen.translate("parameterNew",av)>>)
    was_set = false
    <<# if (customSetPrefixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetPrefixCode, "    ")); } #>>
    if <<=gen.translate("parameterNew",av)>>.nil?
      #Unable to <<=gen.translate("setMethod",av)>> to nil, as <<=gen.relatedTranslate("associationOne",av)>> must always be associated to a @<<=gen.translate("associationOne",av)>>
      <<# if (customSetPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetPostfixCode, "      ")); } #>>
      return was_set
    end
    
    <<=gen.relatedTranslate("parameterExisting",av)>> = <<=gen.translate("parameterNew",av)>>.<<=gen.relatedTranslate("getMethod",av)>>
    if !<<=gen.relatedTranslate("parameterExisting",av)>>.nil? and !self.eql?(<<=gen.relatedTranslate("parameterExisting",av)>>)
      #Unable to <<=gen.translate("setMethod",av)>>, the current @<<=gen.translate("associationOne",av)>> already has a <<=gen.relatedTranslate("associationOne",av)>>, which would be orphaned if it were re-assigned
      <<# if (customSetPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetPostfixCode, "      ")); } #>>
      return was_set
    end
    
    <<=gen.translate("parameterOld",av)>> = @<<=gen.translate("associationOne",av)>>
    @<<=gen.translate("associationOne",av)>> = <<=gen.translate("parameterNew",av)>>
    @<<=gen.translate("associationOne",av)>>.<<=gen.relatedTranslate("setMethod",av)>>(self)

    unless <<=gen.translate("parameterOld",av)>>.nil?
      <<=gen.translate("parameterOld",av)>>.<<=gen.relatedTranslate("setMethod",av)>>(nil)
    end
    was_set = true
    <<# if (customSetPostfixCode != null) { append(realSb, "\n{0}",GeneratorHelper.doIndent(customSetPostfixCode, "    ")); } #>>
    was_set
  end
!>>
}
