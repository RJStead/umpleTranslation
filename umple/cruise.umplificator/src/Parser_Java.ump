namespace cruise.umplificator.parser;


class JavaParser {

	// JDT Dependencies
	depend org.eclipse.jdt.core.dom.*;
	depend org.eclipse.jdt.core.JavaCore;
	depend cruise.umplificator.visitor.JavaClassVisitor;
	// Java Util Dependencies
	depend java.util.Map;
	// Class used to visit elements of the Java Class
	lazy JavaClassVisitor javaVisitor;
	
	 // Parses a complete Java Class
	 public CompilationUnit parseUnit(String source){
	 		//logger.debug("Parsing Compilation Unit");
	   		ASTParser parser = ASTParser.newParser(AST.JLS8); 
			parser.setKind(ASTParser.K_COMPILATION_UNIT);
			parser.setSource(source.toCharArray()); // set source
		    // In order to parse 1.7 code, some compiler options need to be set to 1.7
		    // Annotations were not available prior 1.6
			Map options = JavaCore.getOptions();
			JavaCore.setComplianceOptions(JavaCore.VERSION_1_7, options);		
			parser.setCompilerOptions(options);
			parser.setResolveBindings(true); // we need bindings later on
			CompilationUnit cu = (CompilationUnit) parser.createAST(null);
			// VISITOR
			//logger.debug("Initializing Java Visitor for Compilation Unit");
			javaVisitor=  new JavaClassVisitor();
			cu.accept(javaVisitor);
			// Set compilationUnit
			return cu;
	  }
	  
	 // Parses independent Java body declarations
	public ASTNode parseBodyDeclarations(String source){
			//logger.debug("Parsing Body Declarations from source");
    	    ASTParser parser = ASTParser.newParser(AST.JLS8); 
			parser.setKind(ASTParser.K_CLASS_BODY_DECLARATIONS);
			parser.setSource(source.toCharArray()); // set source
		    // In order to parse 1.7 code, some compiler options need to be set to 1.7
		    // Annotations were not available prior 1.6
			Map options = JavaCore.getOptions();
			JavaCore.setComplianceOptions(JavaCore.VERSION_1_7, options);		
			parser.setCompilerOptions(options);
			parser.setResolveBindings(true); // we need bindings later on
			ASTNode typeDeclaration =  parser.createAST(null);
		  // VISITOR
		  //logger.debug("Initializing Java Visitor for Body Declarations");
			javaVisitor=  new JavaClassVisitor();
			typeDeclaration.accept(javaVisitor);
			
			return typeDeclaration;
    }
    
  }
