package cruise.ui.jsf.templates.impl;

import cruise.model.abstractObjects.IGenerator;

import java.util.*;
import cruise.model.abstractObjects.BackingObject;
import cruise.umple.compiler.*;
import cruise.ui.jsf.*;

public class BckBeanSingleton implements IGenerator {

  protected static String nl;
  public static synchronized BckBeanSingleton create(String lineSeparator)
  {
    nl = lineSeparator;
    BckBeanSingleton result = new BckBeanSingleton();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/**" + NL + " * " + NL + " */" + NL + "package ";
  protected final String TEXT_2 = ";" + NL + "" + NL + "import javax.faces.application.FacesMessage;" + NL + "import javax.faces.context.FacesContext;" + NL + "import java.util.List;" + NL + "import java.util.Set;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Calendar;" + NL + "import ";
  protected final String TEXT_3 = ".control.BeanLinker;" + NL + "import ";
  protected final String TEXT_4 = ".utils.PageFlowUtils;" + NL + "import dao.keys.";
  protected final String TEXT_5 = ".*;" + NL + "import ";
  protected final String TEXT_6 = ".";
  protected final String TEXT_7 = ";";
  protected final String TEXT_8 = NL + "import ";
  protected final String TEXT_9 = ";";
  protected final String TEXT_10 = NL + NL + "public class  ";
  protected final String TEXT_11 = " implements java.io.Serializable {" + NL + "" + NL + "\tprivate static final long serialVersionUID = 1L;" + NL + "    java.text.SimpleDateFormat format = new java.text.SimpleDateFormat(\"yyyy-MM-dd\");" + NL + "" + NL + " \tpublic ";
  protected final String TEXT_12 = "(){" + NL + " \t\tif(getEdited";
  protected final String TEXT_13 = "()==null){" + NL + "  \t\t\tsetEdited";
  protected final String TEXT_14 = "(";
  protected final String TEXT_15 = ".getInstance());" + NL + "  \t\t\tprepareForEdit();" + NL + "  \t\t}" + NL + " \t} " + NL;
  protected final String TEXT_16 = NL + "\t";
  protected final String TEXT_17 = NL + "\t";
  protected final String TEXT_18 = NL + NL;
  protected final String TEXT_19 = NL + "\tprivate ";
  protected final String TEXT_20 = " a";
  protected final String TEXT_21 = ";" + NL + "" + NL + "\tpublic ";
  protected final String TEXT_22 = " get";
  protected final String TEXT_23 = "() {" + NL + "\t\tif (isFrom";
  protected final String TEXT_24 = "()) {" + NL + "\t\t\treturn linked";
  protected final String TEXT_25 = "();" + NL + "\t\t}" + NL + "" + NL + "\t\treturn getSelected";
  protected final String TEXT_26 = "();" + NL + "" + NL + "\t}" + NL + "" + NL + "\tpublic void set";
  protected final String TEXT_27 = "(";
  protected final String TEXT_28 = " arg) {" + NL + "\t\tthis.a";
  protected final String TEXT_29 = " = arg;" + NL + "\t}" + NL + "\t" + NL + "\tpublic String to";
  protected final String TEXT_30 = "() {" + NL + "\t\tBeanLinker bLinker = new BeanLinker();" + NL + "\t\tbLinker.setRoleName(\"";
  protected final String TEXT_31 = "\");" + NL + "\t\tbLinker.setLinker(getSelected";
  protected final String TEXT_32 = "());" + NL + "\t\tPageFlowUtils.pushBeanLinker(bLinker);" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "\t" + NL + "\tpublic String to";
  protected final String TEXT_33 = "Done() {" + NL + "\t\t";
  protected final String TEXT_34 = " newValue =(";
  protected final String TEXT_35 = ")PageFlowUtils.peekBeanLinker().getLinker();" + NL + "\t\tPageFlowUtils.popBeanLinker();" + NL + "\t\tsetSelected";
  protected final String TEXT_36 = "(newValue);" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "\t" + NL + "\tpublic String to";
  protected final String TEXT_37 = "Cancel() {" + NL + "\t\tPageFlowUtils.popBeanLinker();" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "" + NL + "\tpublic boolean isFrom";
  protected final String TEXT_38 = "() {" + NL + "" + NL + "\t\treturn linked";
  protected final String TEXT_39 = "() != null;" + NL + "\t}" + NL + "" + NL + "\tpublic ";
  protected final String TEXT_40 = " linked";
  protected final String TEXT_41 = "() {" + NL + "\t\tBeanLinker er = PageFlowUtils.peekBeanLinker(); //.getInitBean();" + NL + "\t\tif  (\"";
  protected final String TEXT_42 = "\".equals(er.getRoleName())){" + NL + "\t\t\tif(er.getInitBean()!=null && er.getInitBean()  instanceof  ";
  protected final String TEXT_43 = ")" + NL + "\t\t\t\treturn ((";
  protected final String TEXT_44 = ") er.getInitBean()).a";
  protected final String TEXT_45 = ";" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\treturn null;" + NL + "" + NL + "\t}" + NL + "" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic void setSelected";
  protected final String TEXT_46 = "(";
  protected final String TEXT_47 = " selected";
  protected final String TEXT_48 = ") {" + NL + "\t\tPageFlowUtils.getPageFlow().put(\"selected";
  protected final String TEXT_49 = "\", selected";
  protected final String TEXT_50 = ");" + NL + "\t}" + NL + "" + NL + "\tpublic ";
  protected final String TEXT_51 = " getSelected";
  protected final String TEXT_52 = "() {" + NL + "" + NL + "\t\treturn (";
  protected final String TEXT_53 = ") PageFlowUtils.getPageFlow().get(\"selected";
  protected final String TEXT_54 = "\");" + NL + "\t}" + NL + "" + NL + "\tpublic void removeSelected";
  protected final String TEXT_55 = "() {" + NL + "" + NL + "\t\tPageFlowUtils.getPageFlow().remove(\"selected";
  protected final String TEXT_56 = "\");" + NL + "" + NL + "\t}" + NL;
  protected final String TEXT_57 = NL + "\tprivate List<";
  protected final String TEXT_58 = "> a";
  protected final String TEXT_59 = "List;" + NL + "" + NL + "\tpublic List<";
  protected final String TEXT_60 = "> get";
  protected final String TEXT_61 = "List() {" + NL + "\t\treturn getSelected";
  protected final String TEXT_62 = "List();" + NL + "" + NL + "\t}" + NL + "" + NL + "\tpublic void set";
  protected final String TEXT_63 = "List(List<";
  protected final String TEXT_64 = "> arg) {" + NL + "\t\tthis.a";
  protected final String TEXT_65 = "List = arg;" + NL + "\t}" + NL + "\t" + NL + "\tpublic String to";
  protected final String TEXT_66 = "() {" + NL + "\t\tBeanLinker bLinker = new BeanLinker();" + NL + "\t\tbLinker.setRoleName(\"";
  protected final String TEXT_67 = "\");" + NL + "\t\tbLinker.setLinkerCollection(getSelected";
  protected final String TEXT_68 = "List());" + NL + "\t\tPageFlowUtils.pushBeanLinker(bLinker);" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "\t" + NL + "\tpublic String to";
  protected final String TEXT_69 = "Done() {" + NL + "\t\tList<";
  protected final String TEXT_70 = "> newList=(List<";
  protected final String TEXT_71 = ">)PageFlowUtils.peekBeanLinker().getLinkerCollection();" + NL + "\t\tPageFlowUtils.popBeanLinker();" + NL + "\t\tsetSelected";
  protected final String TEXT_72 = "List(newList);" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "\t" + NL + "\tpublic String to";
  protected final String TEXT_73 = "Cancel() {" + NL + "\t\tPageFlowUtils.popBeanLinker();" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "" + NL + "" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic void setSelected";
  protected final String TEXT_74 = "List(List<";
  protected final String TEXT_75 = "> selected";
  protected final String TEXT_76 = "List) {" + NL + "\t\tPageFlowUtils.getPageFlow().put(\"selected";
  protected final String TEXT_77 = "List\", selected";
  protected final String TEXT_78 = "List);" + NL + "\t}" + NL + "" + NL + "\tpublic List<";
  protected final String TEXT_79 = "> getSelected";
  protected final String TEXT_80 = "List() {" + NL + "" + NL + "\t\treturn (List<";
  protected final String TEXT_81 = ">) PageFlowUtils.getPageFlow().get(\"selected";
  protected final String TEXT_82 = "List\");" + NL + "\t}" + NL + "" + NL + "\tpublic void removeSelected";
  protected final String TEXT_83 = "List() {" + NL + "" + NL + "\t\tPageFlowUtils.getPageFlow().remove(\"selected";
  protected final String TEXT_84 = "List\");" + NL + "" + NL + "\t}" + NL;
  protected final String TEXT_85 = NL + "\tprivate List<";
  protected final String TEXT_86 = "> a";
  protected final String TEXT_87 = "List;" + NL + "" + NL + "\tpublic List<";
  protected final String TEXT_88 = "> get";
  protected final String TEXT_89 = "List() {" + NL + "\t\treturn getSelected";
  protected final String TEXT_90 = "List();" + NL + "" + NL + "\t}" + NL + "" + NL + "\tpublic void set";
  protected final String TEXT_91 = "List(List<";
  protected final String TEXT_92 = "> arg) {" + NL + "\t\tthis.a";
  protected final String TEXT_93 = "List = arg;" + NL + "\t}" + NL + "\t" + NL + "\tpublic String to";
  protected final String TEXT_94 = "() {" + NL + "\t\tBeanLinker bLinker = new BeanLinker();" + NL + "\t\tbLinker.setRoleName(\"";
  protected final String TEXT_95 = "\");" + NL + "\t\tbLinker.setLinkerCollection(getSelected";
  protected final String TEXT_96 = "List());" + NL + "\t\tPageFlowUtils.pushBeanLinker(bLinker);" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "\t" + NL + "\tpublic String to";
  protected final String TEXT_97 = "Done() {" + NL + "\t\tList<";
  protected final String TEXT_98 = "> newList =(List<";
  protected final String TEXT_99 = ">)PageFlowUtils.peekBeanLinker().getLinkerCollection();" + NL + "\t\tPageFlowUtils.popBeanLinker();" + NL + "\t\tsetSelected";
  protected final String TEXT_100 = "List(newList);" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "\t" + NL + "\tpublic String to";
  protected final String TEXT_101 = "Cancel() {" + NL + "\t\tPageFlowUtils.popBeanLinker();" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic void setSelected";
  protected final String TEXT_102 = "List(List<";
  protected final String TEXT_103 = "> selected";
  protected final String TEXT_104 = "List) {" + NL + "\t\tPageFlowUtils.getPageFlow().put(\"selected";
  protected final String TEXT_105 = "List\", selected";
  protected final String TEXT_106 = "List);" + NL + "\t}" + NL + "" + NL + "\tpublic List<";
  protected final String TEXT_107 = "> getSelected";
  protected final String TEXT_108 = "List() {" + NL + "" + NL + "\t\treturn (List<";
  protected final String TEXT_109 = ">) PageFlowUtils.getPageFlow().get(\"selected";
  protected final String TEXT_110 = "List\");" + NL + "\t}" + NL + "" + NL + "\tpublic void removeSelected";
  protected final String TEXT_111 = "List() {" + NL + "" + NL + "\t\tPageFlowUtils.getPageFlow().remove(\"selected";
  protected final String TEXT_112 = "List\");" + NL + "" + NL + "\t}" + NL;
  protected final String TEXT_113 = NL + "\tpublic void getInstance";
  protected final String TEXT_114 = "() {" + NL + "\t\tsetSelected";
  protected final String TEXT_115 = "(";
  protected final String TEXT_116 = ".getInstance());" + NL + "" + NL + "\t}" + NL + "" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic void setSelected";
  protected final String TEXT_117 = "(";
  protected final String TEXT_118 = " selected";
  protected final String TEXT_119 = ") {" + NL + "\t\tPageFlowUtils.getPageFlow().put(\"selected";
  protected final String TEXT_120 = "\", selected";
  protected final String TEXT_121 = ");" + NL + "\t}" + NL + "" + NL + "\tpublic ";
  protected final String TEXT_122 = " getSelected";
  protected final String TEXT_123 = "() {" + NL + "" + NL + "\t\treturn (";
  protected final String TEXT_124 = ") PageFlowUtils.getPageFlow().get(\"selected";
  protected final String TEXT_125 = "\");" + NL + "\t}" + NL + "" + NL + "\tpublic void removeSelected";
  protected final String TEXT_126 = "() {" + NL + "" + NL + "\t\tPageFlowUtils.getPageFlow().remove(\"selected";
  protected final String TEXT_127 = "\");" + NL + "" + NL + "\t}" + NL;
  protected final String TEXT_128 = NL + "\tpublic ";
  protected final String TEXT_129 = " getSelected";
  protected final String TEXT_130 = "() {" + NL + "" + NL + "\t\treturn ";
  protected final String TEXT_131 = ".getInstance();" + NL + "\t}" + NL;
  protected final String TEXT_132 = NL + "private List<";
  protected final String TEXT_133 = "> a";
  protected final String TEXT_134 = "List;" + NL + "" + NL + "\tpublic List<";
  protected final String TEXT_135 = "> get";
  protected final String TEXT_136 = "List() {" + NL + "\t\treturn getSelected";
  protected final String TEXT_137 = "List();" + NL + "" + NL + "\t}" + NL + "" + NL + "\tpublic void set";
  protected final String TEXT_138 = "List(List<";
  protected final String TEXT_139 = "> arg) {" + NL + "\t\tthis.a";
  protected final String TEXT_140 = "List = arg;" + NL + "\t}" + NL + "\t" + NL + "\tpublic String to";
  protected final String TEXT_141 = "() {" + NL + "\t\tBeanLinker bLinker = new BeanLinker();" + NL + "\t\tbLinker.setRoleName(\"";
  protected final String TEXT_142 = "\");" + NL + "\t\tPageFlowUtils.pushBeanLinker(bLinker);" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "\t" + NL + "\tpublic String to";
  protected final String TEXT_143 = "Done() {" + NL + "\t\tPageFlowUtils.popBeanLinker();" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "\t" + NL + "\tpublic String to";
  protected final String TEXT_144 = "Cancel() {" + NL + "\t\tPageFlowUtils.popBeanLinker();" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "" + NL + "" + NL + "\tpublic List<";
  protected final String TEXT_145 = "> getSelected";
  protected final String TEXT_146 = "List() {" + NL + "\t\tif(this.getEdited";
  protected final String TEXT_147 = "()!=null)" + NL + "\t\t\treturn  this.getEdited";
  protected final String TEXT_148 = "().get";
  protected final String TEXT_149 = "();" + NL + "\t\treturn null;" + NL + "\t}" + NL + NL;
  protected final String TEXT_150 = NL;
  protected final String TEXT_151 = " ";
  protected final String TEXT_152 = NL;
  protected final String TEXT_153 = NL;
  protected final String TEXT_154 = " ";
  protected final String TEXT_155 = NL;
  protected final String TEXT_156 = NL;
  protected final String TEXT_157 = NL + "\tpublic String cancel() {" + NL + "\t  ";
  protected final String TEXT_158 = NL + "\t  ";
  protected final String TEXT_159 = "  " + NL + "\t\t";
  protected final String TEXT_160 = NL + "\t\t";
  protected final String TEXT_161 = NL + "\t\t";
  protected final String TEXT_162 = NL + "\t\t";
  protected final String TEXT_163 = " " + NL + "\t\t";
  protected final String TEXT_164 = NL + "\t  ";
  protected final String TEXT_165 = NL + "\t  ";
  protected final String TEXT_166 = "  " + NL + "\t\t";
  protected final String TEXT_167 = NL + "\t\t";
  protected final String TEXT_168 = NL + "\t\t";
  protected final String TEXT_169 = NL + "\t\t";
  protected final String TEXT_170 = " " + NL + "\t\t";
  protected final String TEXT_171 = NL + "\t   ";
  protected final String TEXT_172 = NL + "\t   removeSelected";
  protected final String TEXT_173 = "();" + NL + "\t   ";
  protected final String TEXT_174 = NL + "\t    ";
  protected final String TEXT_175 = NL + "\t\tremoveSelected";
  protected final String TEXT_176 = "List();" + NL + "\t\t";
  protected final String TEXT_177 = NL + "\t\t";
  protected final String TEXT_178 = NL + "\t\tremoveSelected";
  protected final String TEXT_179 = "List();" + NL + "\t\t";
  protected final String TEXT_180 = NL + "\t\tSystem.out.println(\"Canceling... \");" + NL + "\t\tsetEdited";
  protected final String TEXT_181 = "(";
  protected final String TEXT_182 = ".getInstance());" + NL + "\t\tprepareForEdit();" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "" + NL + "\tpublic String edit() {" + NL + "\t\t try{" + NL + "\t\t\t\t";
  protected final String TEXT_183 = NL + "\t\t\t\t";
  protected final String TEXT_184 = NL + "\t\t\t\t";
  protected final String TEXT_185 = NL + "\t\t\t\t";
  protected final String TEXT_186 = NL + "\t" + NL + "\t\t\t\t";
  protected final String TEXT_187 = NL + "\t\t\t \tthis.getEdited";
  protected final String TEXT_188 = "().set";
  protected final String TEXT_189 = "(this.getSelected";
  protected final String TEXT_190 = "());" + NL + "\t\t\t \t";
  protected final String TEXT_191 = NL + "\t\t\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_192 = NL + "\t\t\t\tif (getSelected";
  protected final String TEXT_193 = "List() !=null)" + NL + "\t\t\t\tfor ( ";
  protected final String TEXT_194 = " obj : getSelected";
  protected final String TEXT_195 = "List()){" + NL + "\t\t\t \t\tif(this.getEdited";
  protected final String TEXT_196 = "().indexOf";
  protected final String TEXT_197 = "(obj)<0)" + NL + "\t\t\t \t\t\tthis.getEdited";
  protected final String TEXT_198 = "().add";
  protected final String TEXT_199 = "(obj);" + NL + "\t\t\t \t}" + NL + "\t\t\t \tif (this.getEdited";
  protected final String TEXT_200 = "().get";
  protected final String TEXT_201 = "s()!=null){" + NL + "\t\t\t\t \tArrayList<";
  protected final String TEXT_202 = "> toRemove =new ArrayList<";
  protected final String TEXT_203 = ">();" + NL + "\t\t\t\t \tfor ( ";
  protected final String TEXT_204 = " obj : this.getEdited";
  protected final String TEXT_205 = "().get";
  protected final String TEXT_206 = "s()){" + NL + "\t\t\t\t \t\tif(getSelected";
  protected final String TEXT_207 = "List()!=null && !getSelected";
  protected final String TEXT_208 = "List().contains(obj))" + NL + "\t\t\t\t \t\t\ttoRemove.add(obj);" + NL + "\t\t\t\t \t\t\t" + NL + "\t\t\t\t \t\t\t" + NL + "\t\t\t\t \t}" + NL + "\t\t\t\t \tfor ( ";
  protected final String TEXT_209 = " obj : toRemove){" + NL + "\t\t\t\t \t\tthis.getEdited";
  protected final String TEXT_210 = "().remove";
  protected final String TEXT_211 = "(obj);" + NL + "\t\t\t\t \t}" + NL + "\t\t\t \t}" + NL + "\t\t\t \t";
  protected final String TEXT_212 = "\t" + NL + "\t\t\t \t";
  protected final String TEXT_213 = NL + "\t\t\t\tif (getSelected";
  protected final String TEXT_214 = "List() !=null)" + NL + "\t\t\t\tfor ( ";
  protected final String TEXT_215 = " obj : getSelected";
  protected final String TEXT_216 = "List()){" + NL + "\t\t\t \t\tif(this.getEdited";
  protected final String TEXT_217 = "().indexOf";
  protected final String TEXT_218 = "(obj)<0)" + NL + "\t\t\t \t\t\tthis.getEdited";
  protected final String TEXT_219 = "().add";
  protected final String TEXT_220 = "(obj);" + NL + "\t\t\t \t}" + NL + "\t\t\t \tif (this.getEdited";
  protected final String TEXT_221 = "().get";
  protected final String TEXT_222 = "s()!=null){" + NL + "\t\t\t\t \tArrayList<";
  protected final String TEXT_223 = "> toRemove =new ArrayList<";
  protected final String TEXT_224 = ">();" + NL + "\t\t\t\t \tfor ( ";
  protected final String TEXT_225 = " obj : this.getEdited";
  protected final String TEXT_226 = "().get";
  protected final String TEXT_227 = "s()){" + NL + "\t\t\t\t \t\tif(getSelected";
  protected final String TEXT_228 = "List()!=null && !getSelected";
  protected final String TEXT_229 = "List().contains(obj))" + NL + "\t\t\t\t \t\t\ttoRemove.add(obj);" + NL + "\t\t\t\t \t\t\t" + NL + "\t\t\t\t \t\t\t" + NL + "\t\t\t\t \t}" + NL + "\t\t\t\t \tfor ( ";
  protected final String TEXT_230 = " obj : toRemove){" + NL + "\t\t\t\t \t\tthis.getEdited";
  protected final String TEXT_231 = "().remove";
  protected final String TEXT_232 = "(obj);" + NL + "\t\t\t\t \t}" + NL + "\t\t\t \t}" + NL + "\t\t\t \t";
  protected final String TEXT_233 = "\t" + NL + "\t\t\t\t" + NL + "\t\t\t" + NL + "\t\t}catch(RuntimeException e){" + NL + "\t\t\t   \tFacesMessage fm = new FacesMessage(e.getMessage());" + NL + "            \tfm.setSeverity(FacesMessage.SEVERITY_ERROR);" + NL + "              \tFacesContext.getCurrentInstance().addMessage(e.getMessage(), fm);" + NL + "              \treturn \"\";" + NL + "\t\t\t" + NL + "\t\t\t}" + NL + "\t\tcancel();" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "" + NL + "" + NL + "" + NL + "\tpublic String prepareForEdit() {" + NL + "\t";
  protected final String TEXT_234 = NL + "\t";
  protected final String TEXT_235 = NL + "\t";
  protected final String TEXT_236 = NL + "\t";
  protected final String TEXT_237 = NL + "\t\t   ";
  protected final String TEXT_238 = NL + "\t  this.setSelected";
  protected final String TEXT_239 = "(this.getEdited";
  protected final String TEXT_240 = "().get";
  protected final String TEXT_241 = "());" + NL + "\t   ";
  protected final String TEXT_242 = NL + "\t  ";
  protected final String TEXT_243 = NL + "\t  this.setSelected";
  protected final String TEXT_244 = "List(new ArrayList(this.getEdited";
  protected final String TEXT_245 = "().get";
  protected final String TEXT_246 = "s()));" + NL + "\t   ";
  protected final String TEXT_247 = NL + "\t   ";
  protected final String TEXT_248 = NL + "\t  this.setSelected";
  protected final String TEXT_249 = "List(new ArrayList(this.getEdited";
  protected final String TEXT_250 = "().get";
  protected final String TEXT_251 = "s()));" + NL + "\t   ";
  protected final String TEXT_252 = NL + NL + "\treturn \"\";" + NL + "\t}" + NL + "" + NL + "\t" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic void setEdited";
  protected final String TEXT_253 = "(";
  protected final String TEXT_254 = " edited";
  protected final String TEXT_255 = ") {" + NL + "\t\tPageFlowUtils.getPageFlow().put(\"edited";
  protected final String TEXT_256 = "\", edited";
  protected final String TEXT_257 = ");" + NL + "\t}" + NL + "" + NL + "\tpublic ";
  protected final String TEXT_258 = " getEdited";
  protected final String TEXT_259 = "() {" + NL + "\t\treturn (";
  protected final String TEXT_260 = ") PageFlowUtils.getPageFlow().get(\"edited";
  protected final String TEXT_261 = "\");" + NL + "" + NL + "\t}" + NL + "" + NL + "\tpublic String bind() {" + NL + "\t\tPageFlowUtils.peekBeanLinker().setLinker(getSelected";
  protected final String TEXT_262 = "());" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "" + NL + "\tpublic String removeLinker() {" + NL + "\t\tPageFlowUtils.peekBeanLinker().setLinker(null);" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "\t" + NL + "\t" + NL + "\tpublic boolean isSingleSelection(){" + NL + "\t\treturn PageFlowUtils.peekBeanLinker().isSingleSelection();" + NL + "\t}" + NL + "\t" + NL + "\tpublic ";
  protected final String TEXT_263 = " getSelected";
  protected final String TEXT_264 = "() {" + NL + "\t\tif(PageFlowUtils.peekBeanLinker().getLinker() instanceof ";
  protected final String TEXT_265 = ")" + NL + "\t\t\treturn (";
  protected final String TEXT_266 = ") PageFlowUtils.peekBeanLinker().getLinker();" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "\tpublic void  setSelected";
  protected final String TEXT_267 = "(";
  protected final String TEXT_268 = " selected";
  protected final String TEXT_269 = ") {" + NL + "\t\tPageFlowUtils.peekBeanLinker().setLinker(selected";
  protected final String TEXT_270 = ");" + NL + "\t}" + NL + "\t" + NL + "\tpublic boolean isEditing(){" + NL + "\t\treturn true;" + NL + "\t}" + NL + "\t\t" + NL + "}";
  protected final String TEXT_271 = NL;

	public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
      BackingObject bckObject = (BackingObject) argument; 
    String voName= bckObject.getClassName()+"VO";
    String preffix=JSFProvider.properties.getProperty(cruise.model.Constants.PACKAGE_PREFIX);
    String suffix=JSFProvider.properties.getProperty(cruise.model.Constants.BCK_OBJECT_SUFFIX);
    String className=bckObject.getClassName()+JSFProvider.properties.getProperty(cruise.model.Constants.BCK_OBJECT_SUFFIX);
    List<AssociationVariable> mergeList= new ArrayList<AssociationVariable>();
	mergeList.addAll( bckObject.getConstructorOneAsociations());
	mergeList.addAll(bckObject.getZeroOrOneAsociations());
	List<AssociationVariable> multipleZeroManyToOptionalAssociations=bckObject.getZeroManyToOptionalAssociations();
	List<AssociationVariable> multipleNManyToOptionalAssociations=bckObject.getNManyToOptionalAssociations();
	List<AssociationVariable> multipleManyToOneAsociations =bckObject.getManyToOneAssociations();
	
	List<AssociationVariable> mandatoryToSingletonAssociations=bckObject.getMandatoryToSingletonAssociations();
	List<AssociationVariable> optionalToSingletonAssociations=bckObject.getOptionalToSingletonAssociations();
	List<AssociationVariable> manyToOneSingletonAssociations =bckObject.getManyToOneSingletonAssociations();	
	

    stringBuffer.append(TEXT_1);
    stringBuffer.append(preffix + "." + bckObject.getPackageName());
    stringBuffer.append(TEXT_2);
    stringBuffer.append(preffix);
    stringBuffer.append(TEXT_3);
    stringBuffer.append(preffix);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(bckObject.getPackageName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(bckObject.getPackageName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(bckObject.getClassName());
    stringBuffer.append(TEXT_7);
     for (Iterator<String> i = bckObject.getImports().iterator(); i.hasNext(); ) { 
    stringBuffer.append(TEXT_8);
    stringBuffer.append(i.next().toString());
    stringBuffer.append(TEXT_9);
     } 
 
 
 
    stringBuffer.append(TEXT_10);
    stringBuffer.append(className);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(className);
    stringBuffer.append(TEXT_12);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_14);
    stringBuffer.append(bckObject.getClassName());
    stringBuffer.append(TEXT_15);
     for (Attribute attVar: bckObject.getAttVariables()) { 
    stringBuffer.append(TEXT_16);
    stringBuffer.append(bckObject.getFragmentProvider().getDeclarationFragment(attVar));
     } 
     for (Attribute attVar: bckObject.getKeysAttributes()) { 
    stringBuffer.append(TEXT_17);
    stringBuffer.append(bckObject.getFragmentProvider().getDeclarationFragment(attVar));
     } 
    stringBuffer.append(TEXT_18);
     for (AssociationVariable assocVar: mergeList) { 
    stringBuffer.append(TEXT_19);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_20);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_21);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_22);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_23);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_24);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_25);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_26);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_27);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_28);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_29);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_30);
    stringBuffer.append(assocVar.getRelatedAssociation().getUpperCaseName());
    stringBuffer.append(TEXT_31);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_32);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_33);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_34);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_35);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_36);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_37);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_38);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_39);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_40);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_41);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_42);
    stringBuffer.append(className);
    stringBuffer.append(TEXT_43);
    stringBuffer.append(className);
    stringBuffer.append(TEXT_44);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_45);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_46);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_47);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_48);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_49);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_50);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_51);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_52);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_53);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_54);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_55);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_56);
     } 
     for (AssociationVariable assocVar: multipleZeroManyToOptionalAssociations) { 
    stringBuffer.append(TEXT_57);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_58);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_59);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_60);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_61);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_62);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_63);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_64);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_65);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_66);
    stringBuffer.append(assocVar.getRelatedAssociation().getUpperCaseName());
    stringBuffer.append(TEXT_67);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_68);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_69);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_70);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_71);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_72);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_73);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_74);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_75);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_76);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_77);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_78);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_79);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_80);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_81);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_82);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_83);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_84);
     } 
     for (AssociationVariable assocVar: multipleNManyToOptionalAssociations) { 
    stringBuffer.append(TEXT_85);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_86);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_87);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_88);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_89);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_90);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_91);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_92);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_93);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_94);
    stringBuffer.append(assocVar.getRelatedAssociation().getUpperCaseName());
    stringBuffer.append(TEXT_95);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_96);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_97);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_98);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_99);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_100);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_101);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_102);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_103);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_104);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_105);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_106);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_107);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_108);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_109);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_110);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_111);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_112);
     } 
     for (AssociationVariable assocVar: optionalToSingletonAssociations) { 
    stringBuffer.append(TEXT_113);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_114);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_115);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_116);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_117);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_118);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_119);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_120);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_121);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_122);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_123);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_124);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_125);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_126);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_127);
     } 
     for (AssociationVariable assocVar: mandatoryToSingletonAssociations) { 
    stringBuffer.append(TEXT_128);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_129);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_130);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_131);
     } 
     for (AssociationVariable assocVar: manyToOneSingletonAssociations) { 
    stringBuffer.append(TEXT_132);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_133);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_134);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_135);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_136);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_137);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_138);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_139);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_140);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_141);
    stringBuffer.append(assocVar.getRelatedAssociation().getUpperCaseName());
    stringBuffer.append(TEXT_142);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_143);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_144);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_145);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_146);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_147);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_148);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_149);
     } 
    stringBuffer.append(TEXT_150);
     for (Attribute attVar: bckObject.getAttVariables()) { 
    stringBuffer.append(TEXT_151);
    stringBuffer.append(TEXT_152);
    stringBuffer.append(bckObject.getFragmentProvider().getGetFragment(attVar));
    stringBuffer.append(TEXT_153);
    stringBuffer.append(bckObject.getFragmentProvider().getSetFragment(attVar));
     } 
     for (Attribute attVar: bckObject.getKeysAttributes()) { 
    stringBuffer.append(TEXT_154);
    stringBuffer.append(TEXT_155);
    stringBuffer.append(bckObject.getFragmentProvider().getGetFragment(attVar));
    stringBuffer.append(TEXT_156);
    stringBuffer.append(bckObject.getFragmentProvider().getSetFragment(attVar));
     } 
    stringBuffer.append(TEXT_157);
     for (Attribute attVar: bckObject.getAttVariables()) { 
	  Object obj= attVar.getValue();
	  if (obj!=null &&  !"Date".equals(attVar.getType()) ){
	  
    stringBuffer.append(TEXT_158);
    stringBuffer.append(bckObject.getFragmentProvider().getAsignationFragment(attVar, obj.toString()) );
    stringBuffer.append(TEXT_159);
     }else if ("Date".equals(attVar.getType()) ){ 
    stringBuffer.append(TEXT_160);
    stringBuffer.append(bckObject.getFragmentProvider().getAsignationFragment(attVar, "getInitial"+attVar.getUpperCaseName()+"()") );
    stringBuffer.append(TEXT_161);
     }else{ 
    stringBuffer.append(TEXT_162);
    stringBuffer.append(bckObject.getFragmentProvider().getAsignationFragment(attVar, "null") );
    stringBuffer.append(TEXT_163);
     }
	   } 
    stringBuffer.append(TEXT_164);
     for (Attribute attVar: bckObject.getKeysAttributes()) { 
	  Object obj= attVar.getValue();
	  if (obj!=null &&  !"Date".equals(attVar.getType()) ){
	  
    stringBuffer.append(TEXT_165);
    stringBuffer.append(bckObject.getFragmentProvider().getAsignationFragment(attVar, obj.toString()) );
    stringBuffer.append(TEXT_166);
     }else if ("Date".equals(attVar.getType()) ){ 
    stringBuffer.append(TEXT_167);
    stringBuffer.append(bckObject.getFragmentProvider().getAsignationFragment(attVar, "getInitial"+attVar.getUpperCaseName()+"()") );
    stringBuffer.append(TEXT_168);
     }else{ 
    stringBuffer.append(TEXT_169);
    stringBuffer.append(bckObject.getFragmentProvider().getAsignationFragment(attVar, "null") );
    stringBuffer.append(TEXT_170);
     }
	   } 
    stringBuffer.append(TEXT_171);
     for (AssociationVariable assocVar: mergeList) { 
    stringBuffer.append(TEXT_172);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_173);
     } 
    stringBuffer.append(TEXT_174);
     for (AssociationVariable assocVar: multipleZeroManyToOptionalAssociations) { 
    stringBuffer.append(TEXT_175);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_176);
     } 
    stringBuffer.append(TEXT_177);
     for (AssociationVariable assocVar: multipleNManyToOptionalAssociations) { 
    stringBuffer.append(TEXT_178);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_179);
     } 
    stringBuffer.append(TEXT_180);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_181);
    stringBuffer.append(bckObject.getClassName());
    stringBuffer.append(TEXT_182);
     for (Attribute attVar: bckObject.getAttVariables()) { 
    stringBuffer.append(TEXT_183);
    stringBuffer.append(bckObject.getFragmentProvider().getCopyFragment(attVar,"this.getEdited"+voName+"()") );
     } 
    stringBuffer.append(TEXT_184);
     for (Attribute attVar: bckObject.getKeysAttributes()) { 
    stringBuffer.append(TEXT_185);
    stringBuffer.append(bckObject.getFragmentProvider().getCopyFragment(attVar,"this.getEdited"+voName+"()") );
     } 
    stringBuffer.append(TEXT_186);
     for (AssociationVariable assocVar: mergeList) { 
    stringBuffer.append(TEXT_187);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_188);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_189);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_190);
     } 
    stringBuffer.append(TEXT_191);
     for (AssociationVariable assocVar: multipleZeroManyToOptionalAssociations) { 
    stringBuffer.append(TEXT_192);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_193);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_194);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_195);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_196);
    int l=assocVar.getUpperCaseName().length();
    stringBuffer.append(assocVar.getUpperCaseName().substring(0, l-1));
    //stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_197);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_198);
    l=assocVar.getUpperCaseName().length();
    stringBuffer.append(assocVar.getUpperCaseName().substring(0, l-1));
    //stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_199);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_200);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_201);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_202);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_203);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_204);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_205);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_206);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_207);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_208);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_209);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_210);
    l=assocVar.getUpperCaseName().length();
    stringBuffer.append(assocVar.getUpperCaseName().substring(0, l-1));
    //stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_211);
     } 
    stringBuffer.append(TEXT_212);
     for (AssociationVariable assocVar: multipleNManyToOptionalAssociations) { 
    stringBuffer.append(TEXT_213);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_214);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_215);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_216);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_217);
    int l=assocVar.getUpperCaseName().length();
    stringBuffer.append(assocVar.getUpperCaseName().substring(0, l-1));
    //stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_218);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_219);
    l=assocVar.getUpperCaseName().length();
    stringBuffer.append(assocVar.getUpperCaseName().substring(0, l-1));
    //stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_220);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_221);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_222);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_223);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_224);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_225);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_226);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_227);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_228);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_229);
    stringBuffer.append(assocVar.getType());
    stringBuffer.append(TEXT_230);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_231);
    l=assocVar.getUpperCaseName().length();
    stringBuffer.append(assocVar.getUpperCaseName().substring(0, l-1));
    //stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_232);
     } 
    stringBuffer.append(TEXT_233);
     for (Attribute attVar: bckObject.getAttVariables()) { 
    stringBuffer.append(TEXT_234);
    stringBuffer.append(bckObject.getFragmentProvider().getReverseCopyFragment(attVar,"this.getEdited"+voName+"()") );
     } 
    stringBuffer.append(TEXT_235);
     for (Attribute attVar: bckObject.getKeysAttributes()) { 
    stringBuffer.append(TEXT_236);
    stringBuffer.append(bckObject.getFragmentProvider().getReverseCopyFragment(attVar,"this.getEdited"+voName+"()") );
     } 
    stringBuffer.append(TEXT_237);
     for (AssociationVariable assocVar: mergeList) { 
    stringBuffer.append(TEXT_238);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_239);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_240);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_241);
     } 
    stringBuffer.append(TEXT_242);
     for (AssociationVariable assocVar: multipleZeroManyToOptionalAssociations) { 
    stringBuffer.append(TEXT_243);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_244);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_245);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_246);
     } 
    stringBuffer.append(TEXT_247);
     for (AssociationVariable assocVar: multipleNManyToOptionalAssociations) { 
    stringBuffer.append(TEXT_248);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_249);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_250);
    stringBuffer.append(assocVar.getUpperCaseName());
    stringBuffer.append(TEXT_251);
     } 
    stringBuffer.append(TEXT_252);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_253);
    stringBuffer.append(bckObject.getClassName());
    stringBuffer.append(TEXT_254);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_255);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_256);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_257);
    stringBuffer.append(bckObject.getClassName());
    stringBuffer.append(TEXT_258);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_259);
    stringBuffer.append(bckObject.getClassName());
    stringBuffer.append(TEXT_260);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_261);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_262);
    stringBuffer.append(bckObject.getClassName());
    stringBuffer.append(TEXT_263);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_264);
    stringBuffer.append(bckObject.getClassName());
    stringBuffer.append(TEXT_265);
    stringBuffer.append(bckObject.getClassName());
    stringBuffer.append(TEXT_266);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_267);
    stringBuffer.append(bckObject.getClassName());
    stringBuffer.append(TEXT_268);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_269);
    stringBuffer.append(voName);
    stringBuffer.append(TEXT_270);
    stringBuffer.append(TEXT_271);
    return stringBuffer.toString();
  }
}