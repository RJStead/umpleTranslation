<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.48.0 (20210717.1556)
 -->
<!-- Title: ExternalInterface Pages: 1 -->
<svg width="156pt" height="144pt"
 viewBox="0.00 0.00 156.00 144.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 140)">
<title>ExternalInterface</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-140 152,-140 152,4 -4,4"/>
<!-- JFrame -->
<g id="node1" class="node">
<title>JFrame</title>
<g id="a_node1"><a xlink:href="javascript:Action.selectClass(&quot;JFrame&quot;);" xlink:title="class JFrame&#10;This example demonstrates an example of using the&#13;internal, depends, external, before and after&#13;keywords to interface umple code to code in&#13;another system.&#13;&#13;The internal keyword is suitable for situations&#13;where the developer doesn&#39;t want setter/getters&#13;to be generated. GUI windows are an example of&#13;such a case. A GUI window/unit contains several&#13;components but the rest of the program may only&#13;need the value stored within those components. So&#13;it&#39;s a good practice to hide UI components from&#13;classes other than the containing one.&#13;required to make HelloInternals class a JFrame&#13;">
<text text-anchor="start" x="39" y="-113.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;JFrame &#160;&#160;&#160;</text>
<polygon fill="none" stroke="black" points="28,-99 28,-136 120,-136 120,-99 28,-99"/>
</a>
</g>
</g>
<!-- HelloInternals -->
<g id="node2" class="node">
<title>HelloInternals</title>
<g id="a_node2"><a xlink:href="javascript:Action.selectClass(&quot;HelloInternals&quot;);" xlink:title="class HelloInternals&#10;">
<text text-anchor="start" x="19.5" y="-46.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;HelloInternals &#160;&#160;&#160;</text>
<g id="a_node2_0"><a xlink:href="javascript:Action.selectClass(&quot;HelloInternals&quot;);" xlink:title="JLabel messageLabel&#13;messageLabel is a component of the frame;&#13; &#160;often we don&#39;t want sub&#45;components of a GUI unit&#13; &#160;to be settable/gettable. By making them internal&#13; &#160;Umple will avoid generating setter/getter for&#13; &#160;messageLabel. Using lazy Umple will avoid adding&#13; &#160;a constructor parameter for this component&#13;">
<text text-anchor="start" x="3" y="-25.3" font-family="Times,serif" font-size="14.00"> &#160;messageLabel : JLabel &#160;</text>
</a>
</g>
<g id="a_node2_1"><a xlink:href="javascript:Action.selectClass(&quot;HelloInternals&quot;);" xlink:title="String message&#13;the contents of messageLabel&#13;">
<text text-anchor="start" x="3" y="-6.3" font-family="Times,serif" font-size="14.00"> &#160;message : String &#160;</text>
</a>
</g>
<polygon fill="black" stroke="black" points="0,-38.5 0,-38.5 148,-38.5 148,-38.5 0,-38.5"/>
<polygon fill="none" stroke="black" points="0,0 0,-63 148,-63 148,0 0,0"/>
</a>
</g>
</g>
<!-- HelloInternals&#45;&gt;JFrame -->
<g id="edge1" class="edge">
<title>HelloInternals&#45;&gt;JFrame</title>
<path fill="none" stroke="black" d="M74,-63.3C74,-71.64 74,-80.61 74,-88.76"/>
<polygon fill="none" stroke="black" points="70.5,-88.89 74,-98.89 77.5,-88.89 70.5,-88.89"/>
</g>
</g>
</svg>
