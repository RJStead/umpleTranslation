namespace cruise.umple.testgenerator;

use Utility_TestRunnerTemplate_JUnit.ump;
use Utility_TestRunnerTemplate_RubyUnit.ump;
use Utility_TestRunnerTemplate_PhpUnit.ump;

class Util{

depend java.util.Random;
depend java.lang.reflect.Method;
depend cruise.umple.testparser.TestParser;
depend java.io.*;
depend java.util.List;
depend java.util.ArrayList;

		

Random random = new Random ();

//------------------------
// Random String Generator 
//------------------------ 
public String randomGenerator (Random random, String characters, int length)
{
	
	char[] text = new char[length];
    for (int i = 0; i < length; i++)
    {
        text[i] = characters.charAt(random.nextInt(characters.length()));
    }
    return new String(text);
}

//------------------------
// Random Int Generator 
//------------------------
public int randomGenerator (int range)
{
	int text = random.nextInt(range);
	  	
	return text;
}

//-----------------------------
// Test Runner Template/Methods
//-----------------------------

public void writeTestRunnerFiles (String path , List<String> classes ) {
	  String testrunnerFileName = "TestRunner";
	  File file  = new File(path+testrunnerFileName);
	  StringBuilder br = new StringBuilder();
	  StringBuilder sb = new StringBuilder();
	  sb .append("");
	  sb.append(getTestRunnerTemplateJUnitCode (classes));
	  
  }
  
   emit getTestRunnerTemplateJUnitCode (List<String> classes) (TestRunnerJUnitGenerator);
   emit getTestRunnerTemplatePhpUnitCode (List<String> classes) (TestRunnerPhpUnitGenerator);
   emit getTestRunnerTemplateRubyUnitCode (List<String> classes) (TestRunnerRubyUnitGenerator);
   
   // Template for JUnit Test Runner 
   TestRunnerJUnitGenerator <<!<<# 
   String classesCode = "";
   
   for (int x = 0; x < classes.size(); x++)
   {
      if (x == 0)
       {classesCode+= classes.get(x)+".class";}
       else 
       {classesCode+=", " +classes.get(x)+".class";}   
   }
   
   #>> 
	import java.io.File;
	import org.junit.After;
	import org.junit.Assert;
	import org.junit.Before;
	import org.junit.Test;
	import org.junit.internal.TextListener;
	import org.junit.runner.JUnitCore;
	import org.junit.runner.Result;  
    
    public class TestRunner {
    
     public static void main (String[] args)
     JUnitCore  junit = new JUnitCore();
     junit.addListener(new TextListener(System.out));
     Result result = junit.run(<<=classesCode>>);
     
     resultReport(result);
    }
    
    public static void resultReport(Result result) {
		    System.out.println("Finished. Result: Failures: " +
		      result.getFailureCount() + ". Ignored: " +
		      result.getIgnoreCount() + ". Tests run: " +
		      result.getRunCount() + ". Time: " +
		      result.getRunTime() + "ms.");
		}
    
    }
  !>>
  
  // Template for PhpUnit test runner
  TestRunnerPhpUnitGenerator <<! //to be implemented  !>>
  
  
  // Template for Ruby Unit test runner
  TestRunnerRubyUnitGenerator <<! //to be implemented  !>>
  
  

//---------------------------------------------------
// AssertMethod // check if a method is present in a class using reflection, example: assertMethod(foo.class, "methodName") 
//---------------------------------------------------

public Boolean assertMethod (Class cls, String methodName)
    {
    	Boolean hasMethod = false;
    	Method[] methods = cls.getMethods();
    	for (Method m : methods )
    	{
    		if ( m.getName() == methodName)
    		{ hasMethod = true; }
    	}
    	return hasMethod;    	
    }

 public TestModel createUmpleTestSystem(String path, String filename,String lang)
   {
	  
	 String language =lang;   
    //path = "/cruise.umple.test-parser/src-gen/cruise/umple/testgenerator/";
    //filename = "ATest.umpt";
     File file = new File(path+filename);
     String grName = "";
     //grName = "src/ump/mbt_parsing.grammar";
     //grName = Util.class.getClassLoader().getResource("src/mbt_parsing.grammar").getFile();
     //System.out.println(grName);
     TestModel aTestModel = new TestModel(null, null, null, null, null,null, null, language);
     TestParser parser = new TestParser(null, grName, file, 0);     
     //System.out.println(file.getAbsolutePath());
     //System.out.println(Util.class.getClassLoader().getResource("mbt_parsing.grammar"));
     parser.setGrammarFile("src/ump/mbt_parsing.grammar");
     
     
     ///
     
     InputStream is = getClass().getResourceAsStream("mbt_parsing.grammar");
     InputStreamReader isr = new InputStreamReader(is);
     
     File grFile = new File("grammar");
     String grFileName = "grammar.grammar";
     grFile.mkdir();
     
     BufferedReader br = new BufferedReader(isr);
     
     
     StringBuffer sb = new StringBuffer();
     String line;
     try {
		while ((line = br.readLine()) != null) 
		 {
		   sb.append(line+"\n");
		 }
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
     try {
    	 BufferedWriter bw = new BufferedWriter(new FileWriter(new File(grFile.getAbsoluteFile(),grFileName)));   	
    	 bw.write(sb.toString());
    	 bw.flush();
    	 bw.close();
		br.close();
		 isr.close();
	     is.close();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
     
     
     //System.out.println(sb.toString());
    
     //return sb.toString();
     
     /////////
     
     
     
     parser.setGrammarFile("grammar/grammar.grammar");
     parser.setTestModelFile(file);
     parser.prepare();
     
     //deleting temp written files
     String[]entries = grFile.list();
     for(String s: entries){
         File currentFile = new File(grFile.getPath(),s);
         currentFile.delete();
     }
     
     grFile.delete();
     
     /// end of deleting temp files
     
     
     
     aTestModel = parser.getATestModel();
     aTestModel.setCodeLang(language);
     if(aTestModel.getCodeLang().equals("JUnit"))
     {
     
     TestCaseJUnitGenerator junitGenerator = new TestCaseJUnitGenerator(null, null, null, null, null);
	     junitGenerator.setTestModel(aTestModel);
	     junitGenerator.setPath(path);
	     junitGenerator.writeFile();
     }
     if(aTestModel.getCodeLang().equals("PhpUnit"))
     {
     	TestCasePhpUnitGenerator phpGenerator = new TestCasePhpUnitGenerator(null, null, null, null, null); 
         phpGenerator.setTestModel(aTestModel);
         phpGenerator.setPath(path);
         phpGenerator.writeFile();
   }
     if(aTestModel.getCodeLang().equals("RubyUnit"))
     {
     	TestCaseRubyUnitGenerator rubyGenerator = new TestCaseRubyUnitGenerator(null, null, null, null, null); 
         rubyGenerator.setTestModel(aTestModel);
         rubyGenerator.setPath(path);
         rubyGenerator.writeFile();
     }
     
     return aTestModel;
   }




}
