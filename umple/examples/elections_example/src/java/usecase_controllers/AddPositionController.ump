/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

*/

namespace usecase.addPosition;

class AddPositionController
{
  singleton;
  
  depend view.addPosition.AddPositionView;
  depend shared.Result;
  depend service.ElectionService;
  depend service.PositionService;
  depend service.ElectionForPositionService;
  depend shared.domain.Election;
  depend shared.domain.Position;
  depend shared.domain.ElectionForPosition;
  depend java.util.List;
  depend usecase.startup.Controller;
    
  lazy internal AddPositionView addPositionView;
  lazy internal Boolean positionAdded;
  lazy internal Boolean efpAdded;
  lazy internal String positionName;
  lazy internal Position newPosition;
  lazy internal Boolean positionFound;
  lazy internal ElectionForPosition efp;
    
  PositionAddingSteps {
    Initial
    {
      addPosition -> PreparingView;
    }
    PreparingView
    {
      entry / {showAddPositionView();}
      addButtonClicked -> CheckingPositionName;
      closeView -> ClosingView;
    }
    CheckingPositionName
    {
      entry / {positionName=addPositionView.getPositionName();}
      [positionName.trim().isEmpty()] -> PositionNameEmpty;
      [!positionName.trim().isEmpty()] -> CheckingExistingPosition;
    }
    CheckingExistingPosition
    {
      entry / {positionFound=positionExists();}
      [!positionFound] -> AddingPosition;
      [positionFound] -> PositionExists;
    }
    PositionNameEmpty
    {
      entry / {Result.getInstance().setMessage("position name cannot be empty!");}
      addButtonClicked -> CheckingpositionName;
      closeView -> ClosingView;
    }
    PositionExists
    {
      entry / {Result.getInstance().setMessage("position Exists!");
          Controller.getInstance().start();
          addPositionView.dispose();}
      -> Initial;
    }
    AddingPosition
    {
      entry / {tryToAddPosition();
          positionAdded=PositionService.getInstance().getPositionAdded();
          //efpAdded=ElectionForPositionService.getInstance().getElectionForPositionAdded();
          }
      [positionAdded] -> PositionAdded;
      [!positionAdded] -> PositionNotAdded;
    }
    PositionAdded
    {
      entry / {Result.getInstance().setMessage("Position Added Successfully!");
          Controller.getInstance().start();}
      -> Initial;
    }
    PositionNotAdded
    {
      entry / {Result.getInstance().setMessage("Adding Position Failed!");
          Controller.getInstance().start();}
      -> Initial;
    }
    ClosingView
    {
      entry / {addPositionView.dispose();}
      -> Initial;
    }
  }
   
   void showAddPositionView() {
     addPositionView=new AddPositionView();
     addPositionView.setVisible(true);
  }
  
  private boolean positionExists() {
    //selectedElection=addPositionView.getSelectedElection();
    newPosition=new Position(-1, positionName, "");
    //efp=new ElectionForPosition(-1, selectedElection, newPosition);
    PositionService.getInstance().setPositionToSearch(newPosition);
    return PositionService.getInstance().getPositionFound();
  }
  
  void tryToAddPosition() {
    String positionDescription=addPositionView.getPositionDescription();
    newPosition.setDescription(positionDescription);
    PositionService.getInstance().setNewPosition(newPosition);
    //ElectionForPositionService.getInstance().setNewElectionForPosition(efp);
    addPositionView.dispose();
  }
}