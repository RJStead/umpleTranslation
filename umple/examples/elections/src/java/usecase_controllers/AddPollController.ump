/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

*/

namespace usecase.addPoll;

class AddPollController
{
  singleton;
  
  depend shared.Result;
  depend view.addPoll.AddPollView;
  depend javax.swing.JOptionPane;
  depend service.ElectionService;
  depend service.PollService;
  depend shared.domain.Election;
  depend shared.domain.Poll;
  depend java.util.List;
  depend usecase.startup.Controller;
    
  lazy internal AddPollView addPollView;
  lazy internal List<Election> elections;
  lazy internal Boolean pollAdded;
  lazy internal String pollName;
  lazy internal Election selectedElection;
  lazy internal Poll newPoll;
  lazy internal Boolean pollFound;
    
  PollAddingSteps {
    Initial
    {
      addPoll -> ProvidingElectionsList;
    }
    ProvidingElectionsList
    {
      entry / {ElectionService.getInstance().getAllElections();
          elections=ElectionService.getInstance().getElections();}
      [!elections.isEmpty()] -> ElectionsListProvided;
      [elections.isEmpty()] -> NoElectionsFound;
    }
    ElectionsListProvided
    {
      entry / {showAddPollView();}
      addButtonClicked -> CheckingPollName;
      closeView -> ClosingView;
    }
    CheckingPollName
    {
      entry / {pollName=addPollView.getPollName();}
      [pollName.trim().isEmpty()] -> PollNameEmpty;
      [!pollName.trim().isEmpty()] -> CheckingExistingPoll;
    }
    CheckingExistingPoll
    {
      entry / {selectedElection=addPollView.getSelectedElection();
          newPoll=new Poll(-1, -1, pollName, "", selectedElection);
          PollService.getInstance().setPollToSearch(newPoll);
          pollFound=PollService.getInstance().getPollFound();}
      [!pollFound] -> AddingPoll;
      [pollFound] -> PollExists;
    }
    PollNameEmpty
    {
      entry / {Result.getInstance().setMessage("Poll name cannot be empty!");}
      addButtonClicked -> CheckingPollName;
      closeView -> ClosingView;
    }
    PollExists
    {
      entry / {Result.getInstance().setMessage("Poll Exists!");
          Controller.getInstance().start();
          addPollView.dispose();}
      -> Initial;
    }
    AddingPoll
    {
      entry / {tryToAddPoll();pollAdded=PollService.getInstance().getPollAdded();}
      [pollAdded] -> PollAdded;
      [!pollAdded] -> PollNotAdded;
    }
    PollAdded
    {
      entry / {Result.getInstance().setMessage("Poll Added Successfully!");
          Controller.getInstance().start();}
      -> Initial;
    }
    PollNotAdded
    {
      entry / {Result.getInstance().setMessage("Adding Poll Failed!");
          Controller.getInstance().start();}
      -> Initial;
    }
    ClosingView
    {
      entry / {addPollView.dispose();}
      -> Initial;
    }
    NoElectionsFound
    {
      entry / {Result.getInstance().setMessage("No elections found, add an election first!");
          Controller.getInstance().start();}
      -> Initial;
    }
  }
   
   void showAddPollView() {
     addPollView=new AddPollView(elections);
     addPollView.setVisible(true);
  }
  
  void tryToAddPoll() {
    String pollDescription=addPollView.getPollDescription();
    newPoll.setDescription(pollDescription);
    PollService.getInstance().setNewPoll(newPoll);
    addPollView.dispose();
  }
}