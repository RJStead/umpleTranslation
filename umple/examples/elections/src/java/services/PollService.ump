/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

*/

namespace service;

class PollService {
  depend java.util.List;
  depend java.util.ArrayList;
  depend shared.domain.Election;
  depend shared.domain.Poll;
  depend java.sql.Connection;
  depend java.sql.ResultSet;
  depend java.sql.Statement;
  depend java.sql.DriverManager;
  depend shared.Credentials;
  
  singleton;
  
  lazy Poll selectedPoll;
  lazy Election selectedElection;
  lazy List<Poll> polls;
  lazy Connection theConnection;
  lazy Boolean pollOpenned;
  lazy Poll newPoll;
  lazy Boolean pollAdded;
  lazy Poll pollToSearch;
  lazy Boolean pollFound;

  after setSelectedElection
  {
    getElectionPolls();
  }
  
  after setSelectedPoll
  {
    openPoll();
  }
  
  after setNewPoll
  {
    createPoll();
  }

  after setPollToSearch {
    pollFound=true;
    try {
      Statement stmt = theConnection.createStatement();
      ResultSet rs = stmt.executeQuery("SELECT * FROM poll where name='"+pollToSearch.getName()+"' and election_id_election="+pollToSearch.getElection().getIdElection());
      if (!rs.next())
        pollFound=false;
    } catch(Exception e) {
      System.err.println("Exception: " + e.getMessage());
      pollFound=false;
    }
  }
  
  PollServiceCycle {
    Idle {
      getElectionPolls -> LoadingElectionPolls;
      createPoll -> CreatingPoll;
    }
    LoadingElectionPolls {
      entry / {loadElectionPolls();}
      openPoll -> OpenningPoll;
    }
    OpenningPoll {
      entry / {tryToOpenPoll();}
      -> Idle;
    }
    CreatingPoll
    {
      entry / {addPoll();}
      -> Idle;
    }
  }
  
  before setPollServiceCycle
  {
    try {
      Class.forName("com.mysql.jdbc.Driver").newInstance();
      theConnection = DriverManager.getConnection("jdbc:mysql://"+Credentials.db_hostname+"/elections", Credentials.db_username, Credentials.db_password);
    } catch(Exception e) {
      System.err.println("Exception: " + e.getMessage());
    }
  }
  
  void loadElectionPolls() {
    polls=new ArrayList<Poll>();
    try {
      Statement stmt = theConnection.createStatement();
      ResultSet rs = stmt.executeQuery("SELECT * FROM poll where election_id_election="+selectedElection.getIdElection());
      while (rs.next()) {
        String name = rs.getString("name");
        String description = rs.getString("description");
        int id=Integer.parseInt(rs.getString("id_poll"));
        Poll poll=new Poll(id, -1, name, description, selectedElection);
        polls.add(poll);
      }
    } catch(Exception e) {
      System.err.println("Exception: " + e.getMessage());
    }
  }
  
  void tryToOpenPoll() {
    try {
      Statement stmt = theConnection.createStatement();
      stmt.executeUpdate("update elections.poll set status='open' where id_poll="+selectedPoll.getIdPoll());
      pollOpenned=true;
    } catch(Exception e) {
      System.err.println("Exception: " + e.getMessage());
      pollOpenned=false;
    }
  }
  
    
  void addPoll() {
    try {
      Statement stmt = theConnection.createStatement();
      stmt.executeUpdate("insert into elections.poll (election_id_election, name, description) values ('"+newPoll.getElection().getIdElection()+"', '"+newPoll.getName()+"', '"+newPoll.getDescription()+"')");
      pollAdded=true;
    } catch(Exception e) {
      System.err.println("Exception: " + e.getMessage());
      pollAdded=false;
    }
  }
}