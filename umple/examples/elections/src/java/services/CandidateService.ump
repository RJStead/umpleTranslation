/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

*/

namespace service;

class CandidateService {
  depend java.util.List;
  depend java.util.ArrayList;
  depend shared.domain.Candidate;
  depend java.sql.Connection;
  depend java.sql.ResultSet;
  depend java.sql.Statement;
  depend java.sql.DriverManager;
  depend shared.Credentials;
  
  singleton;
  
  lazy Candidate newCandidate;
  lazy List<Candidate> candidates;
  lazy internal Connection theConnection;
  lazy Boolean candidateAdded;
  lazy String candidateNameToSearch;
  lazy Boolean candidateFound;

  after setNewCandidate {
    createCandidate();
  }

  after setCandidateNameToSearch {
    findCandidateByName();
  }

  CandidateServiceCycle {
    Idle {
      getAllCandidates -> LoadingAllCandidates;
      createCandidate -> CreatingCandidate;
      findCandidateByName -> FindingCandidateByName;
    }
    LoadingAllCandidates {
      entry / {loadAllCandidates();}
      -> Idle;
    }
    CreatingCandidate {
      entry / {addCandidate();}
      -> Idle;
    }
    FindingCandidateByName {
      entry / {tryFindingCandidateByName();}
      -> Idle;
    }
  }

  before setCandidateServiceCycle {
    try {
      Class.forName("com.mysql.jdbc.Driver").newInstance();
      theConnection = DriverManager.getConnection("jdbc:mysql://"+Credentials.db_hostname+"/elections", Credentials.db_username, Credentials.db_password);
    } catch(Exception e) {
      System.err.println("Exception: " + e.getMessage());
    }
  }
      
  void loadAllCandidates() {
    candidates=new ArrayList<Candidate>();
    
    try {
      Statement stmt = theConnection.createStatement();
      ResultSet rs = stmt.executeQuery("SELECT * FROM elections.candidate");
      while (rs.next()) {
        String name = rs.getString("name");
        String address = rs.getString("address");
        String telephone = rs.getString("telephone");
        int id=Integer.parseInt(rs.getString("id_candidate"));
        Candidate candidate=new Candidate(id, name, address, telephone);
        candidates.add(candidate);
      }
    } catch(Exception e) {
      System.err.println("Exception: " + e.getMessage());
    }
  }
  
  void addCandidate() {
    try {
      Statement stmt = theConnection.createStatement();
      stmt.executeUpdate("insert into elections.candidate (name, address, telephone) values ('"+newCandidate.getName()+"', '"+newCandidate.getAddress()+"', '"+newCandidate.getTelephone()+"')");
      candidateAdded=true;
    } catch(Exception e) {
      System.err.println("Exception: " + e.getMessage());
      candidateAdded=false;
    }
  }
  
  private void tryFindingCandidateByName() {
    candidateFound=true;
    try {
      Statement stmt = theConnection.createStatement();
      ResultSet rs = stmt.executeQuery("SELECT * FROM candidate where name='"+candidateNameToSearch+"'");
      if (!rs.next())
        candidateFound=false;
    } catch(Exception e) {
      System.err.println("Exception: " + e.getMessage());
      candidateFound=false;
    }
  }
}